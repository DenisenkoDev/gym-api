// Code generated by ent, DO NOT EDIT.

package usagemode

import (
	"gym-api/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldEQ(FieldCreatedAt, v))
}

// PaidActivatedAt applies equality check predicate on the "paid_activated_at" field. It's identical to PaidActivatedAtEQ.
func PaidActivatedAt(v time.Time) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldEQ(FieldPaidActivatedAt, v))
}

// ModeEQ applies the EQ predicate on the "mode" field.
func ModeEQ(v Mode) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldEQ(FieldMode, v))
}

// ModeNEQ applies the NEQ predicate on the "mode" field.
func ModeNEQ(v Mode) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldNEQ(FieldMode, v))
}

// ModeIn applies the In predicate on the "mode" field.
func ModeIn(vs ...Mode) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldIn(FieldMode, vs...))
}

// ModeNotIn applies the NotIn predicate on the "mode" field.
func ModeNotIn(vs ...Mode) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldNotIn(FieldMode, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldLTE(FieldCreatedAt, v))
}

// PaidActivatedAtEQ applies the EQ predicate on the "paid_activated_at" field.
func PaidActivatedAtEQ(v time.Time) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldEQ(FieldPaidActivatedAt, v))
}

// PaidActivatedAtNEQ applies the NEQ predicate on the "paid_activated_at" field.
func PaidActivatedAtNEQ(v time.Time) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldNEQ(FieldPaidActivatedAt, v))
}

// PaidActivatedAtIn applies the In predicate on the "paid_activated_at" field.
func PaidActivatedAtIn(vs ...time.Time) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldIn(FieldPaidActivatedAt, vs...))
}

// PaidActivatedAtNotIn applies the NotIn predicate on the "paid_activated_at" field.
func PaidActivatedAtNotIn(vs ...time.Time) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldNotIn(FieldPaidActivatedAt, vs...))
}

// PaidActivatedAtGT applies the GT predicate on the "paid_activated_at" field.
func PaidActivatedAtGT(v time.Time) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldGT(FieldPaidActivatedAt, v))
}

// PaidActivatedAtGTE applies the GTE predicate on the "paid_activated_at" field.
func PaidActivatedAtGTE(v time.Time) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldGTE(FieldPaidActivatedAt, v))
}

// PaidActivatedAtLT applies the LT predicate on the "paid_activated_at" field.
func PaidActivatedAtLT(v time.Time) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldLT(FieldPaidActivatedAt, v))
}

// PaidActivatedAtLTE applies the LTE predicate on the "paid_activated_at" field.
func PaidActivatedAtLTE(v time.Time) predicate.UsageMode {
	return predicate.UsageMode(sql.FieldLTE(FieldPaidActivatedAt, v))
}

// PaidActivatedAtIsNil applies the IsNil predicate on the "paid_activated_at" field.
func PaidActivatedAtIsNil() predicate.UsageMode {
	return predicate.UsageMode(sql.FieldIsNull(FieldPaidActivatedAt))
}

// PaidActivatedAtNotNil applies the NotNil predicate on the "paid_activated_at" field.
func PaidActivatedAtNotNil() predicate.UsageMode {
	return predicate.UsageMode(sql.FieldNotNull(FieldPaidActivatedAt))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UsageMode {
	return predicate.UsageMode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UsageMode {
	return predicate.UsageMode(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UsageMode) predicate.UsageMode {
	return predicate.UsageMode(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UsageMode) predicate.UsageMode {
	return predicate.UsageMode(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UsageMode) predicate.UsageMode {
	return predicate.UsageMode(sql.NotPredicates(p))
}
