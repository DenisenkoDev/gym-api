// Code generated by ent, DO NOT EDIT.

package usagemode

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the usagemode type in the database.
	Label = "usage_mode"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMode holds the string denoting the mode field in the database.
	FieldMode = "mode"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldPaidActivatedAt holds the string denoting the paid_activated_at field in the database.
	FieldPaidActivatedAt = "paid_activated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the usagemode in the database.
	Table = "usage_modes"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "users"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "usage_mode_user"
)

// Columns holds all SQL columns for usagemode fields.
var Columns = []string{
	FieldID,
	FieldMode,
	FieldCreatedAt,
	FieldPaidActivatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Mode defines the type for the "mode" enum field.
type Mode string

// ModeTest is the default value of the Mode enum.
const DefaultMode = ModeTest

// Mode values.
const (
	ModeTest Mode = "test"
	ModePaid Mode = "paid"
)

func (m Mode) String() string {
	return string(m)
}

// ModeValidator is a validator for the "mode" field enum values. It is called by the builders before save.
func ModeValidator(m Mode) error {
	switch m {
	case ModeTest, ModePaid:
		return nil
	default:
		return fmt.Errorf("usagemode: invalid enum value for mode field: %q", m)
	}
}

// OrderOption defines the ordering options for the UsageMode queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMode orders the results by the mode field.
func ByMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMode, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByPaidActivatedAt orders the results by the paid_activated_at field.
func ByPaidActivatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaidActivatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, UserTable, UserColumn),
	)
}
