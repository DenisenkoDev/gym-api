// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"gym-api/ent/abonement"
	"gym-api/ent/abonementtype"
	"gym-api/ent/gym"
	"gym-api/ent/managerrole"
	"gym-api/ent/paymentrequisite"
	"gym-api/ent/predicate"
	"gym-api/ent/user"
	"gym-api/ent/userrole"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GymQuery is the builder for querying Gym entities.
type GymQuery struct {
	config
	ctx                  *QueryContext
	order                []gym.OrderOption
	inters               []Interceptor
	predicates           []predicate.Gym
	withVisitors         *UserQuery
	withManagers         *UserQuery
	withAbonementType    *AbonementTypeQuery
	withOwner            *UserQuery
	withAbonements       *AbonementQuery
	withUserRoles        *UserRoleQuery
	withManagerRoles     *ManagerRoleQuery
	withPaymentRequisite *PaymentRequisiteQuery
	withFKs              bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GymQuery builder.
func (gq *GymQuery) Where(ps ...predicate.Gym) *GymQuery {
	gq.predicates = append(gq.predicates, ps...)
	return gq
}

// Limit the number of records to be returned by this query.
func (gq *GymQuery) Limit(limit int) *GymQuery {
	gq.ctx.Limit = &limit
	return gq
}

// Offset to start from.
func (gq *GymQuery) Offset(offset int) *GymQuery {
	gq.ctx.Offset = &offset
	return gq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gq *GymQuery) Unique(unique bool) *GymQuery {
	gq.ctx.Unique = &unique
	return gq
}

// Order specifies how the records should be ordered.
func (gq *GymQuery) Order(o ...gym.OrderOption) *GymQuery {
	gq.order = append(gq.order, o...)
	return gq
}

// QueryVisitors chains the current query on the "visitors" edge.
func (gq *GymQuery) QueryVisitors() *UserQuery {
	query := (&UserClient{config: gq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gym.Table, gym.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, gym.VisitorsTable, gym.VisitorsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(gq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryManagers chains the current query on the "managers" edge.
func (gq *GymQuery) QueryManagers() *UserQuery {
	query := (&UserClient{config: gq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gym.Table, gym.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, gym.ManagersTable, gym.ManagersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(gq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAbonementType chains the current query on the "abonement_type" edge.
func (gq *GymQuery) QueryAbonementType() *AbonementTypeQuery {
	query := (&AbonementTypeClient{config: gq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gym.Table, gym.FieldID, selector),
			sqlgraph.To(abonementtype.Table, abonementtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, gym.AbonementTypeTable, gym.AbonementTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(gq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwner chains the current query on the "owner" edge.
func (gq *GymQuery) QueryOwner() *UserQuery {
	query := (&UserClient{config: gq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gym.Table, gym.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gym.OwnerTable, gym.OwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(gq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAbonements chains the current query on the "abonements" edge.
func (gq *GymQuery) QueryAbonements() *AbonementQuery {
	query := (&AbonementClient{config: gq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gym.Table, gym.FieldID, selector),
			sqlgraph.To(abonement.Table, abonement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, gym.AbonementsTable, gym.AbonementsColumn),
		)
		fromU = sqlgraph.SetNeighbors(gq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserRoles chains the current query on the "user_roles" edge.
func (gq *GymQuery) QueryUserRoles() *UserRoleQuery {
	query := (&UserRoleClient{config: gq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gym.Table, gym.FieldID, selector),
			sqlgraph.To(userrole.Table, userrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, gym.UserRolesTable, gym.UserRolesColumn),
		)
		fromU = sqlgraph.SetNeighbors(gq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryManagerRoles chains the current query on the "manager_roles" edge.
func (gq *GymQuery) QueryManagerRoles() *ManagerRoleQuery {
	query := (&ManagerRoleClient{config: gq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gym.Table, gym.FieldID, selector),
			sqlgraph.To(managerrole.Table, managerrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, gym.ManagerRolesTable, gym.ManagerRolesColumn),
		)
		fromU = sqlgraph.SetNeighbors(gq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPaymentRequisite chains the current query on the "payment_requisite" edge.
func (gq *GymQuery) QueryPaymentRequisite() *PaymentRequisiteQuery {
	query := (&PaymentRequisiteClient{config: gq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gym.Table, gym.FieldID, selector),
			sqlgraph.To(paymentrequisite.Table, paymentrequisite.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, gym.PaymentRequisiteTable, gym.PaymentRequisiteColumn),
		)
		fromU = sqlgraph.SetNeighbors(gq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Gym entity from the query.
// Returns a *NotFoundError when no Gym was found.
func (gq *GymQuery) First(ctx context.Context) (*Gym, error) {
	nodes, err := gq.Limit(1).All(setContextOp(ctx, gq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{gym.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gq *GymQuery) FirstX(ctx context.Context) *Gym {
	node, err := gq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Gym ID from the query.
// Returns a *NotFoundError when no Gym ID was found.
func (gq *GymQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gq.Limit(1).IDs(setContextOp(ctx, gq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{gym.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gq *GymQuery) FirstIDX(ctx context.Context) int {
	id, err := gq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Gym entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Gym entity is found.
// Returns a *NotFoundError when no Gym entities are found.
func (gq *GymQuery) Only(ctx context.Context) (*Gym, error) {
	nodes, err := gq.Limit(2).All(setContextOp(ctx, gq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{gym.Label}
	default:
		return nil, &NotSingularError{gym.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gq *GymQuery) OnlyX(ctx context.Context) *Gym {
	node, err := gq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Gym ID in the query.
// Returns a *NotSingularError when more than one Gym ID is found.
// Returns a *NotFoundError when no entities are found.
func (gq *GymQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gq.Limit(2).IDs(setContextOp(ctx, gq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{gym.Label}
	default:
		err = &NotSingularError{gym.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gq *GymQuery) OnlyIDX(ctx context.Context) int {
	id, err := gq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Gyms.
func (gq *GymQuery) All(ctx context.Context) ([]*Gym, error) {
	ctx = setContextOp(ctx, gq.ctx, ent.OpQueryAll)
	if err := gq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Gym, *GymQuery]()
	return withInterceptors[[]*Gym](ctx, gq, qr, gq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gq *GymQuery) AllX(ctx context.Context) []*Gym {
	nodes, err := gq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Gym IDs.
func (gq *GymQuery) IDs(ctx context.Context) (ids []int, err error) {
	if gq.ctx.Unique == nil && gq.path != nil {
		gq.Unique(true)
	}
	ctx = setContextOp(ctx, gq.ctx, ent.OpQueryIDs)
	if err = gq.Select(gym.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gq *GymQuery) IDsX(ctx context.Context) []int {
	ids, err := gq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gq *GymQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gq.ctx, ent.OpQueryCount)
	if err := gq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gq, querierCount[*GymQuery](), gq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gq *GymQuery) CountX(ctx context.Context) int {
	count, err := gq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gq *GymQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gq.ctx, ent.OpQueryExist)
	switch _, err := gq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gq *GymQuery) ExistX(ctx context.Context) bool {
	exist, err := gq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GymQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gq *GymQuery) Clone() *GymQuery {
	if gq == nil {
		return nil
	}
	return &GymQuery{
		config:               gq.config,
		ctx:                  gq.ctx.Clone(),
		order:                append([]gym.OrderOption{}, gq.order...),
		inters:               append([]Interceptor{}, gq.inters...),
		predicates:           append([]predicate.Gym{}, gq.predicates...),
		withVisitors:         gq.withVisitors.Clone(),
		withManagers:         gq.withManagers.Clone(),
		withAbonementType:    gq.withAbonementType.Clone(),
		withOwner:            gq.withOwner.Clone(),
		withAbonements:       gq.withAbonements.Clone(),
		withUserRoles:        gq.withUserRoles.Clone(),
		withManagerRoles:     gq.withManagerRoles.Clone(),
		withPaymentRequisite: gq.withPaymentRequisite.Clone(),
		// clone intermediate query.
		sql:  gq.sql.Clone(),
		path: gq.path,
	}
}

// WithVisitors tells the query-builder to eager-load the nodes that are connected to
// the "visitors" edge. The optional arguments are used to configure the query builder of the edge.
func (gq *GymQuery) WithVisitors(opts ...func(*UserQuery)) *GymQuery {
	query := (&UserClient{config: gq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gq.withVisitors = query
	return gq
}

// WithManagers tells the query-builder to eager-load the nodes that are connected to
// the "managers" edge. The optional arguments are used to configure the query builder of the edge.
func (gq *GymQuery) WithManagers(opts ...func(*UserQuery)) *GymQuery {
	query := (&UserClient{config: gq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gq.withManagers = query
	return gq
}

// WithAbonementType tells the query-builder to eager-load the nodes that are connected to
// the "abonement_type" edge. The optional arguments are used to configure the query builder of the edge.
func (gq *GymQuery) WithAbonementType(opts ...func(*AbonementTypeQuery)) *GymQuery {
	query := (&AbonementTypeClient{config: gq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gq.withAbonementType = query
	return gq
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (gq *GymQuery) WithOwner(opts ...func(*UserQuery)) *GymQuery {
	query := (&UserClient{config: gq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gq.withOwner = query
	return gq
}

// WithAbonements tells the query-builder to eager-load the nodes that are connected to
// the "abonements" edge. The optional arguments are used to configure the query builder of the edge.
func (gq *GymQuery) WithAbonements(opts ...func(*AbonementQuery)) *GymQuery {
	query := (&AbonementClient{config: gq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gq.withAbonements = query
	return gq
}

// WithUserRoles tells the query-builder to eager-load the nodes that are connected to
// the "user_roles" edge. The optional arguments are used to configure the query builder of the edge.
func (gq *GymQuery) WithUserRoles(opts ...func(*UserRoleQuery)) *GymQuery {
	query := (&UserRoleClient{config: gq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gq.withUserRoles = query
	return gq
}

// WithManagerRoles tells the query-builder to eager-load the nodes that are connected to
// the "manager_roles" edge. The optional arguments are used to configure the query builder of the edge.
func (gq *GymQuery) WithManagerRoles(opts ...func(*ManagerRoleQuery)) *GymQuery {
	query := (&ManagerRoleClient{config: gq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gq.withManagerRoles = query
	return gq
}

// WithPaymentRequisite tells the query-builder to eager-load the nodes that are connected to
// the "payment_requisite" edge. The optional arguments are used to configure the query builder of the edge.
func (gq *GymQuery) WithPaymentRequisite(opts ...func(*PaymentRequisiteQuery)) *GymQuery {
	query := (&PaymentRequisiteClient{config: gq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gq.withPaymentRequisite = query
	return gq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Gym.Query().
//		GroupBy(gym.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gq *GymQuery) GroupBy(field string, fields ...string) *GymGroupBy {
	gq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GymGroupBy{build: gq}
	grbuild.flds = &gq.ctx.Fields
	grbuild.label = gym.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Gym.Query().
//		Select(gym.FieldName).
//		Scan(ctx, &v)
func (gq *GymQuery) Select(fields ...string) *GymSelect {
	gq.ctx.Fields = append(gq.ctx.Fields, fields...)
	sbuild := &GymSelect{GymQuery: gq}
	sbuild.label = gym.Label
	sbuild.flds, sbuild.scan = &gq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GymSelect configured with the given aggregations.
func (gq *GymQuery) Aggregate(fns ...AggregateFunc) *GymSelect {
	return gq.Select().Aggregate(fns...)
}

func (gq *GymQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gq); err != nil {
				return err
			}
		}
	}
	for _, f := range gq.ctx.Fields {
		if !gym.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gq.path != nil {
		prev, err := gq.path(ctx)
		if err != nil {
			return err
		}
		gq.sql = prev
	}
	return nil
}

func (gq *GymQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Gym, error) {
	var (
		nodes       = []*Gym{}
		withFKs     = gq.withFKs
		_spec       = gq.querySpec()
		loadedTypes = [8]bool{
			gq.withVisitors != nil,
			gq.withManagers != nil,
			gq.withAbonementType != nil,
			gq.withOwner != nil,
			gq.withAbonements != nil,
			gq.withUserRoles != nil,
			gq.withManagerRoles != nil,
			gq.withPaymentRequisite != nil,
		}
	)
	if gq.withOwner != nil || gq.withPaymentRequisite != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, gym.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Gym).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Gym{config: gq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gq.withVisitors; query != nil {
		if err := gq.loadVisitors(ctx, query, nodes,
			func(n *Gym) { n.Edges.Visitors = []*User{} },
			func(n *Gym, e *User) { n.Edges.Visitors = append(n.Edges.Visitors, e) }); err != nil {
			return nil, err
		}
	}
	if query := gq.withManagers; query != nil {
		if err := gq.loadManagers(ctx, query, nodes,
			func(n *Gym) { n.Edges.Managers = []*User{} },
			func(n *Gym, e *User) { n.Edges.Managers = append(n.Edges.Managers, e) }); err != nil {
			return nil, err
		}
	}
	if query := gq.withAbonementType; query != nil {
		if err := gq.loadAbonementType(ctx, query, nodes,
			func(n *Gym) { n.Edges.AbonementType = []*AbonementType{} },
			func(n *Gym, e *AbonementType) { n.Edges.AbonementType = append(n.Edges.AbonementType, e) }); err != nil {
			return nil, err
		}
	}
	if query := gq.withOwner; query != nil {
		if err := gq.loadOwner(ctx, query, nodes, nil,
			func(n *Gym, e *User) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := gq.withAbonements; query != nil {
		if err := gq.loadAbonements(ctx, query, nodes,
			func(n *Gym) { n.Edges.Abonements = []*Abonement{} },
			func(n *Gym, e *Abonement) { n.Edges.Abonements = append(n.Edges.Abonements, e) }); err != nil {
			return nil, err
		}
	}
	if query := gq.withUserRoles; query != nil {
		if err := gq.loadUserRoles(ctx, query, nodes,
			func(n *Gym) { n.Edges.UserRoles = []*UserRole{} },
			func(n *Gym, e *UserRole) { n.Edges.UserRoles = append(n.Edges.UserRoles, e) }); err != nil {
			return nil, err
		}
	}
	if query := gq.withManagerRoles; query != nil {
		if err := gq.loadManagerRoles(ctx, query, nodes,
			func(n *Gym) { n.Edges.ManagerRoles = []*ManagerRole{} },
			func(n *Gym, e *ManagerRole) { n.Edges.ManagerRoles = append(n.Edges.ManagerRoles, e) }); err != nil {
			return nil, err
		}
	}
	if query := gq.withPaymentRequisite; query != nil {
		if err := gq.loadPaymentRequisite(ctx, query, nodes, nil,
			func(n *Gym, e *PaymentRequisite) { n.Edges.PaymentRequisite = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gq *GymQuery) loadVisitors(ctx context.Context, query *UserQuery, nodes []*Gym, init func(*Gym), assign func(*Gym, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Gym)
	nids := make(map[int]map[*Gym]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(gym.VisitorsTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(gym.VisitorsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(gym.VisitorsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(gym.VisitorsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Gym]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "visitors" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (gq *GymQuery) loadManagers(ctx context.Context, query *UserQuery, nodes []*Gym, init func(*Gym), assign func(*Gym, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Gym)
	nids := make(map[int]map[*Gym]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(gym.ManagersTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(gym.ManagersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(gym.ManagersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(gym.ManagersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Gym]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "managers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (gq *GymQuery) loadAbonementType(ctx context.Context, query *AbonementTypeQuery, nodes []*Gym, init func(*Gym), assign func(*Gym, *AbonementType)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Gym)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AbonementType(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(gym.AbonementTypeColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.abonement_type_gym
		if fk == nil {
			return fmt.Errorf(`foreign-key "abonement_type_gym" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "abonement_type_gym" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (gq *GymQuery) loadOwner(ctx context.Context, query *UserQuery, nodes []*Gym, init func(*Gym), assign func(*Gym, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Gym)
	for i := range nodes {
		if nodes[i].user_owned_gyms == nil {
			continue
		}
		fk := *nodes[i].user_owned_gyms
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_owned_gyms" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gq *GymQuery) loadAbonements(ctx context.Context, query *AbonementQuery, nodes []*Gym, init func(*Gym), assign func(*Gym, *Abonement)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Gym)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Abonement(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(gym.AbonementsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.abonement_gym
		if fk == nil {
			return fmt.Errorf(`foreign-key "abonement_gym" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "abonement_gym" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (gq *GymQuery) loadUserRoles(ctx context.Context, query *UserRoleQuery, nodes []*Gym, init func(*Gym), assign func(*Gym, *UserRole)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Gym)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserRole(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(gym.UserRolesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_role_gym
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_role_gym" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_role_gym" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (gq *GymQuery) loadManagerRoles(ctx context.Context, query *ManagerRoleQuery, nodes []*Gym, init func(*Gym), assign func(*Gym, *ManagerRole)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Gym)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ManagerRole(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(gym.ManagerRolesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.manager_role_gym
		if fk == nil {
			return fmt.Errorf(`foreign-key "manager_role_gym" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "manager_role_gym" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (gq *GymQuery) loadPaymentRequisite(ctx context.Context, query *PaymentRequisiteQuery, nodes []*Gym, init func(*Gym), assign func(*Gym, *PaymentRequisite)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Gym)
	for i := range nodes {
		if nodes[i].payment_requisite_gym == nil {
			continue
		}
		fk := *nodes[i].payment_requisite_gym
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(paymentrequisite.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "payment_requisite_gym" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (gq *GymQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gq.querySpec()
	_spec.Node.Columns = gq.ctx.Fields
	if len(gq.ctx.Fields) > 0 {
		_spec.Unique = gq.ctx.Unique != nil && *gq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, gq.driver, _spec)
}

func (gq *GymQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(gym.Table, gym.Columns, sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt))
	_spec.From = gq.sql
	if unique := gq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if gq.path != nil {
		_spec.Unique = true
	}
	if fields := gq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gym.FieldID)
		for i := range fields {
			if fields[i] != gym.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gq *GymQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gq.driver.Dialect())
	t1 := builder.Table(gym.Table)
	columns := gq.ctx.Fields
	if len(columns) == 0 {
		columns = gym.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gq.sql != nil {
		selector = gq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gq.ctx.Unique != nil && *gq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range gq.predicates {
		p(selector)
	}
	for _, p := range gq.order {
		p(selector)
	}
	if offset := gq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GymGroupBy is the group-by builder for Gym entities.
type GymGroupBy struct {
	selector
	build *GymQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ggb *GymGroupBy) Aggregate(fns ...AggregateFunc) *GymGroupBy {
	ggb.fns = append(ggb.fns, fns...)
	return ggb
}

// Scan applies the selector query and scans the result into the given value.
func (ggb *GymGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ggb.build.ctx, ent.OpQueryGroupBy)
	if err := ggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GymQuery, *GymGroupBy](ctx, ggb.build, ggb, ggb.build.inters, v)
}

func (ggb *GymGroupBy) sqlScan(ctx context.Context, root *GymQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ggb.fns))
	for _, fn := range ggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ggb.flds)+len(ggb.fns))
		for _, f := range *ggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GymSelect is the builder for selecting fields of Gym entities.
type GymSelect struct {
	*GymQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gs *GymSelect) Aggregate(fns ...AggregateFunc) *GymSelect {
	gs.fns = append(gs.fns, fns...)
	return gs
}

// Scan applies the selector query and scans the result into the given value.
func (gs *GymSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gs.ctx, ent.OpQuerySelect)
	if err := gs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GymQuery, *GymSelect](ctx, gs.GymQuery, gs, gs.inters, v)
}

func (gs *GymSelect) sqlScan(ctx context.Context, root *GymQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gs.fns))
	for _, fn := range gs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
