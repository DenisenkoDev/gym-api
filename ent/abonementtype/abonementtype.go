// Code generated by ent, DO NOT EDIT.

package abonementtype

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the abonementtype type in the database.
	Label = "abonement_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeGym holds the string denoting the gym edge name in mutations.
	EdgeGym = "gym"
	// EdgeAbonement holds the string denoting the abonement edge name in mutations.
	EdgeAbonement = "abonement"
	// Table holds the table name of the abonementtype in the database.
	Table = "abonement_types"
	// GymTable is the table that holds the gym relation/edge.
	GymTable = "abonement_types"
	// GymInverseTable is the table name for the Gym entity.
	// It exists in this package in order to avoid circular dependency with the "gym" package.
	GymInverseTable = "gyms"
	// GymColumn is the table column denoting the gym relation/edge.
	GymColumn = "abonement_type_gym"
	// AbonementTable is the table that holds the abonement relation/edge.
	AbonementTable = "abonements"
	// AbonementInverseTable is the table name for the Abonement entity.
	// It exists in this package in order to avoid circular dependency with the "abonement" package.
	AbonementInverseTable = "abonements"
	// AbonementColumn is the table column denoting the abonement relation/edge.
	AbonementColumn = "abonement_type_abonement"
)

// Columns holds all SQL columns for abonementtype fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "abonement_types"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"abonement_type_gym",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the AbonementType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByGymField orders the results by gym field.
func ByGymField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGymStep(), sql.OrderByField(field, opts...))
	}
}

// ByAbonementCount orders the results by abonement count.
func ByAbonementCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAbonementStep(), opts...)
	}
}

// ByAbonement orders the results by abonement terms.
func ByAbonement(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAbonementStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newGymStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GymInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, GymTable, GymColumn),
	)
}
func newAbonementStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AbonementInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AbonementTable, AbonementColumn),
	)
}
