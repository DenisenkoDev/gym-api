// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gym-api/ent/predicate"
	"gym-api/ent/usagemode"
	"gym-api/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UsageModeUpdate is the builder for updating UsageMode entities.
type UsageModeUpdate struct {
	config
	hooks    []Hook
	mutation *UsageModeMutation
}

// Where appends a list predicates to the UsageModeUpdate builder.
func (umu *UsageModeUpdate) Where(ps ...predicate.UsageMode) *UsageModeUpdate {
	umu.mutation.Where(ps...)
	return umu
}

// SetMode sets the "mode" field.
func (umu *UsageModeUpdate) SetMode(u usagemode.Mode) *UsageModeUpdate {
	umu.mutation.SetMode(u)
	return umu
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (umu *UsageModeUpdate) SetNillableMode(u *usagemode.Mode) *UsageModeUpdate {
	if u != nil {
		umu.SetMode(*u)
	}
	return umu
}

// SetCreatedAt sets the "created_at" field.
func (umu *UsageModeUpdate) SetCreatedAt(t time.Time) *UsageModeUpdate {
	umu.mutation.SetCreatedAt(t)
	return umu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (umu *UsageModeUpdate) SetNillableCreatedAt(t *time.Time) *UsageModeUpdate {
	if t != nil {
		umu.SetCreatedAt(*t)
	}
	return umu
}

// SetPaidActivatedAt sets the "paid_activated_at" field.
func (umu *UsageModeUpdate) SetPaidActivatedAt(t time.Time) *UsageModeUpdate {
	umu.mutation.SetPaidActivatedAt(t)
	return umu
}

// SetNillablePaidActivatedAt sets the "paid_activated_at" field if the given value is not nil.
func (umu *UsageModeUpdate) SetNillablePaidActivatedAt(t *time.Time) *UsageModeUpdate {
	if t != nil {
		umu.SetPaidActivatedAt(*t)
	}
	return umu
}

// ClearPaidActivatedAt clears the value of the "paid_activated_at" field.
func (umu *UsageModeUpdate) ClearPaidActivatedAt() *UsageModeUpdate {
	umu.mutation.ClearPaidActivatedAt()
	return umu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (umu *UsageModeUpdate) SetUserID(id int) *UsageModeUpdate {
	umu.mutation.SetUserID(id)
	return umu
}

// SetUser sets the "user" edge to the User entity.
func (umu *UsageModeUpdate) SetUser(u *User) *UsageModeUpdate {
	return umu.SetUserID(u.ID)
}

// Mutation returns the UsageModeMutation object of the builder.
func (umu *UsageModeUpdate) Mutation() *UsageModeMutation {
	return umu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (umu *UsageModeUpdate) ClearUser() *UsageModeUpdate {
	umu.mutation.ClearUser()
	return umu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (umu *UsageModeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, umu.sqlSave, umu.mutation, umu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (umu *UsageModeUpdate) SaveX(ctx context.Context) int {
	affected, err := umu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (umu *UsageModeUpdate) Exec(ctx context.Context) error {
	_, err := umu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umu *UsageModeUpdate) ExecX(ctx context.Context) {
	if err := umu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umu *UsageModeUpdate) check() error {
	if v, ok := umu.mutation.Mode(); ok {
		if err := usagemode.ModeValidator(v); err != nil {
			return &ValidationError{Name: "mode", err: fmt.Errorf(`ent: validator failed for field "UsageMode.mode": %w`, err)}
		}
	}
	if umu.mutation.UserCleared() && len(umu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UsageMode.user"`)
	}
	return nil
}

func (umu *UsageModeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := umu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usagemode.Table, usagemode.Columns, sqlgraph.NewFieldSpec(usagemode.FieldID, field.TypeInt))
	if ps := umu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := umu.mutation.Mode(); ok {
		_spec.SetField(usagemode.FieldMode, field.TypeEnum, value)
	}
	if value, ok := umu.mutation.CreatedAt(); ok {
		_spec.SetField(usagemode.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := umu.mutation.PaidActivatedAt(); ok {
		_spec.SetField(usagemode.FieldPaidActivatedAt, field.TypeTime, value)
	}
	if umu.mutation.PaidActivatedAtCleared() {
		_spec.ClearField(usagemode.FieldPaidActivatedAt, field.TypeTime)
	}
	if umu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   usagemode.UserTable,
			Columns: []string{usagemode.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   usagemode.UserTable,
			Columns: []string{usagemode.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, umu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usagemode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	umu.mutation.done = true
	return n, nil
}

// UsageModeUpdateOne is the builder for updating a single UsageMode entity.
type UsageModeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UsageModeMutation
}

// SetMode sets the "mode" field.
func (umuo *UsageModeUpdateOne) SetMode(u usagemode.Mode) *UsageModeUpdateOne {
	umuo.mutation.SetMode(u)
	return umuo
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (umuo *UsageModeUpdateOne) SetNillableMode(u *usagemode.Mode) *UsageModeUpdateOne {
	if u != nil {
		umuo.SetMode(*u)
	}
	return umuo
}

// SetCreatedAt sets the "created_at" field.
func (umuo *UsageModeUpdateOne) SetCreatedAt(t time.Time) *UsageModeUpdateOne {
	umuo.mutation.SetCreatedAt(t)
	return umuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (umuo *UsageModeUpdateOne) SetNillableCreatedAt(t *time.Time) *UsageModeUpdateOne {
	if t != nil {
		umuo.SetCreatedAt(*t)
	}
	return umuo
}

// SetPaidActivatedAt sets the "paid_activated_at" field.
func (umuo *UsageModeUpdateOne) SetPaidActivatedAt(t time.Time) *UsageModeUpdateOne {
	umuo.mutation.SetPaidActivatedAt(t)
	return umuo
}

// SetNillablePaidActivatedAt sets the "paid_activated_at" field if the given value is not nil.
func (umuo *UsageModeUpdateOne) SetNillablePaidActivatedAt(t *time.Time) *UsageModeUpdateOne {
	if t != nil {
		umuo.SetPaidActivatedAt(*t)
	}
	return umuo
}

// ClearPaidActivatedAt clears the value of the "paid_activated_at" field.
func (umuo *UsageModeUpdateOne) ClearPaidActivatedAt() *UsageModeUpdateOne {
	umuo.mutation.ClearPaidActivatedAt()
	return umuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (umuo *UsageModeUpdateOne) SetUserID(id int) *UsageModeUpdateOne {
	umuo.mutation.SetUserID(id)
	return umuo
}

// SetUser sets the "user" edge to the User entity.
func (umuo *UsageModeUpdateOne) SetUser(u *User) *UsageModeUpdateOne {
	return umuo.SetUserID(u.ID)
}

// Mutation returns the UsageModeMutation object of the builder.
func (umuo *UsageModeUpdateOne) Mutation() *UsageModeMutation {
	return umuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (umuo *UsageModeUpdateOne) ClearUser() *UsageModeUpdateOne {
	umuo.mutation.ClearUser()
	return umuo
}

// Where appends a list predicates to the UsageModeUpdate builder.
func (umuo *UsageModeUpdateOne) Where(ps ...predicate.UsageMode) *UsageModeUpdateOne {
	umuo.mutation.Where(ps...)
	return umuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (umuo *UsageModeUpdateOne) Select(field string, fields ...string) *UsageModeUpdateOne {
	umuo.fields = append([]string{field}, fields...)
	return umuo
}

// Save executes the query and returns the updated UsageMode entity.
func (umuo *UsageModeUpdateOne) Save(ctx context.Context) (*UsageMode, error) {
	return withHooks(ctx, umuo.sqlSave, umuo.mutation, umuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (umuo *UsageModeUpdateOne) SaveX(ctx context.Context) *UsageMode {
	node, err := umuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (umuo *UsageModeUpdateOne) Exec(ctx context.Context) error {
	_, err := umuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umuo *UsageModeUpdateOne) ExecX(ctx context.Context) {
	if err := umuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umuo *UsageModeUpdateOne) check() error {
	if v, ok := umuo.mutation.Mode(); ok {
		if err := usagemode.ModeValidator(v); err != nil {
			return &ValidationError{Name: "mode", err: fmt.Errorf(`ent: validator failed for field "UsageMode.mode": %w`, err)}
		}
	}
	if umuo.mutation.UserCleared() && len(umuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UsageMode.user"`)
	}
	return nil
}

func (umuo *UsageModeUpdateOne) sqlSave(ctx context.Context) (_node *UsageMode, err error) {
	if err := umuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usagemode.Table, usagemode.Columns, sqlgraph.NewFieldSpec(usagemode.FieldID, field.TypeInt))
	id, ok := umuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UsageMode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := umuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usagemode.FieldID)
		for _, f := range fields {
			if !usagemode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usagemode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := umuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := umuo.mutation.Mode(); ok {
		_spec.SetField(usagemode.FieldMode, field.TypeEnum, value)
	}
	if value, ok := umuo.mutation.CreatedAt(); ok {
		_spec.SetField(usagemode.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := umuo.mutation.PaidActivatedAt(); ok {
		_spec.SetField(usagemode.FieldPaidActivatedAt, field.TypeTime, value)
	}
	if umuo.mutation.PaidActivatedAtCleared() {
		_spec.ClearField(usagemode.FieldPaidActivatedAt, field.TypeTime)
	}
	if umuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   usagemode.UserTable,
			Columns: []string{usagemode.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   usagemode.UserTable,
			Columns: []string{usagemode.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UsageMode{config: umuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, umuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usagemode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	umuo.mutation.done = true
	return _node, nil
}
