// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gym-api/ent/abonementtype"
	"gym-api/ent/gym"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AbonementType is the model entity for the AbonementType schema.
type AbonementType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AbonementTypeQuery when eager-loading is set.
	Edges              AbonementTypeEdges `json:"edges"`
	abonement_type_gym *int
	selectValues       sql.SelectValues
}

// AbonementTypeEdges holds the relations/edges for other nodes in the graph.
type AbonementTypeEdges struct {
	// Gym holds the value of the gym edge.
	Gym *Gym `json:"gym,omitempty"`
	// Abonement holds the value of the abonement edge.
	Abonement []*Abonement `json:"abonement,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GymOrErr returns the Gym value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AbonementTypeEdges) GymOrErr() (*Gym, error) {
	if e.Gym != nil {
		return e.Gym, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: gym.Label}
	}
	return nil, &NotLoadedError{edge: "gym"}
}

// AbonementOrErr returns the Abonement value or an error if the edge
// was not loaded in eager-loading.
func (e AbonementTypeEdges) AbonementOrErr() ([]*Abonement, error) {
	if e.loadedTypes[1] {
		return e.Abonement, nil
	}
	return nil, &NotLoadedError{edge: "abonement"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AbonementType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case abonementtype.FieldID:
			values[i] = new(sql.NullInt64)
		case abonementtype.FieldName:
			values[i] = new(sql.NullString)
		case abonementtype.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case abonementtype.ForeignKeys[0]: // abonement_type_gym
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AbonementType fields.
func (at *AbonementType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case abonementtype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			at.ID = int(value.Int64)
		case abonementtype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				at.Name = value.String
			}
		case abonementtype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				at.CreatedAt = value.Time
			}
		case abonementtype.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field abonement_type_gym", value)
			} else if value.Valid {
				at.abonement_type_gym = new(int)
				*at.abonement_type_gym = int(value.Int64)
			}
		default:
			at.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AbonementType.
// This includes values selected through modifiers, order, etc.
func (at *AbonementType) Value(name string) (ent.Value, error) {
	return at.selectValues.Get(name)
}

// QueryGym queries the "gym" edge of the AbonementType entity.
func (at *AbonementType) QueryGym() *GymQuery {
	return NewAbonementTypeClient(at.config).QueryGym(at)
}

// QueryAbonement queries the "abonement" edge of the AbonementType entity.
func (at *AbonementType) QueryAbonement() *AbonementQuery {
	return NewAbonementTypeClient(at.config).QueryAbonement(at)
}

// Update returns a builder for updating this AbonementType.
// Note that you need to call AbonementType.Unwrap() before calling this method if this AbonementType
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *AbonementType) Update() *AbonementTypeUpdateOne {
	return NewAbonementTypeClient(at.config).UpdateOne(at)
}

// Unwrap unwraps the AbonementType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *AbonementType) Unwrap() *AbonementType {
	_tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: AbonementType is not a transactional entity")
	}
	at.config.driver = _tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *AbonementType) String() string {
	var builder strings.Builder
	builder.WriteString("AbonementType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", at.ID))
	builder.WriteString("name=")
	builder.WriteString(at.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(at.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AbonementTypes is a parsable slice of AbonementType.
type AbonementTypes []*AbonementType
