// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gym-api/ent/abonement"
	"gym-api/ent/abonementtype"
	"gym-api/ent/gym"
	"gym-api/ent/payment"
	"gym-api/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AbonementCreate is the builder for creating a Abonement entity.
type AbonementCreate struct {
	config
	mutation *AbonementMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ac *AbonementCreate) SetName(s string) *AbonementCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetPrice sets the "price" field.
func (ac *AbonementCreate) SetPrice(f float64) *AbonementCreate {
	ac.mutation.SetPrice(f)
	return ac
}

// SetDurationMonths sets the "duration_months" field.
func (ac *AbonementCreate) SetDurationMonths(i int) *AbonementCreate {
	ac.mutation.SetDurationMonths(i)
	return ac
}

// SetNillableDurationMonths sets the "duration_months" field if the given value is not nil.
func (ac *AbonementCreate) SetNillableDurationMonths(i *int) *AbonementCreate {
	if i != nil {
		ac.SetDurationMonths(*i)
	}
	return ac
}

// SetExpirationDate sets the "expiration_date" field.
func (ac *AbonementCreate) SetExpirationDate(t time.Time) *AbonementCreate {
	ac.mutation.SetExpirationDate(t)
	return ac
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (ac *AbonementCreate) SetNillableExpirationDate(t *time.Time) *AbonementCreate {
	if t != nil {
		ac.SetExpirationDate(*t)
	}
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AbonementCreate) SetCreatedAt(t time.Time) *AbonementCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AbonementCreate) SetNillableCreatedAt(t *time.Time) *AbonementCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AbonementCreate) SetUpdatedAt(t time.Time) *AbonementCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AbonementCreate) SetNillableUpdatedAt(t *time.Time) *AbonementCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetPaidUntil sets the "paid_until" field.
func (ac *AbonementCreate) SetPaidUntil(t time.Time) *AbonementCreate {
	ac.mutation.SetPaidUntil(t)
	return ac
}

// SetNillablePaidUntil sets the "paid_until" field if the given value is not nil.
func (ac *AbonementCreate) SetNillablePaidUntil(t *time.Time) *AbonementCreate {
	if t != nil {
		ac.SetPaidUntil(*t)
	}
	return ac
}

// SetIsActive sets the "is_active" field.
func (ac *AbonementCreate) SetIsActive(b bool) *AbonementCreate {
	ac.mutation.SetIsActive(b)
	return ac
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ac *AbonementCreate) SetNillableIsActive(b *bool) *AbonementCreate {
	if b != nil {
		ac.SetIsActive(*b)
	}
	return ac
}

// SetIsPaid sets the "is_paid" field.
func (ac *AbonementCreate) SetIsPaid(b bool) *AbonementCreate {
	ac.mutation.SetIsPaid(b)
	return ac
}

// SetNillableIsPaid sets the "is_paid" field if the given value is not nil.
func (ac *AbonementCreate) SetNillableIsPaid(b *bool) *AbonementCreate {
	if b != nil {
		ac.SetIsPaid(*b)
	}
	return ac
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by IDs.
func (ac *AbonementCreate) AddPaymentIDs(ids ...int) *AbonementCreate {
	ac.mutation.AddPaymentIDs(ids...)
	return ac
}

// AddPayments adds the "payments" edges to the Payment entity.
func (ac *AbonementCreate) AddPayments(p ...*Payment) *AbonementCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ac.AddPaymentIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ac *AbonementCreate) SetUserID(id int) *AbonementCreate {
	ac.mutation.SetUserID(id)
	return ac
}

// SetUser sets the "user" edge to the User entity.
func (ac *AbonementCreate) SetUser(u *User) *AbonementCreate {
	return ac.SetUserID(u.ID)
}

// SetCoachID sets the "coach" edge to the User entity by ID.
func (ac *AbonementCreate) SetCoachID(id int) *AbonementCreate {
	ac.mutation.SetCoachID(id)
	return ac
}

// SetNillableCoachID sets the "coach" edge to the User entity by ID if the given value is not nil.
func (ac *AbonementCreate) SetNillableCoachID(id *int) *AbonementCreate {
	if id != nil {
		ac = ac.SetCoachID(*id)
	}
	return ac
}

// SetCoach sets the "coach" edge to the User entity.
func (ac *AbonementCreate) SetCoach(u *User) *AbonementCreate {
	return ac.SetCoachID(u.ID)
}

// SetGymID sets the "gym" edge to the Gym entity by ID.
func (ac *AbonementCreate) SetGymID(id int) *AbonementCreate {
	ac.mutation.SetGymID(id)
	return ac
}

// SetGym sets the "gym" edge to the Gym entity.
func (ac *AbonementCreate) SetGym(g *Gym) *AbonementCreate {
	return ac.SetGymID(g.ID)
}

// SetTypeID sets the "type" edge to the AbonementType entity by ID.
func (ac *AbonementCreate) SetTypeID(id int) *AbonementCreate {
	ac.mutation.SetTypeID(id)
	return ac
}

// SetType sets the "type" edge to the AbonementType entity.
func (ac *AbonementCreate) SetType(a *AbonementType) *AbonementCreate {
	return ac.SetTypeID(a.ID)
}

// Mutation returns the AbonementMutation object of the builder.
func (ac *AbonementCreate) Mutation() *AbonementMutation {
	return ac.mutation
}

// Save creates the Abonement in the database.
func (ac *AbonementCreate) Save(ctx context.Context) (*Abonement, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AbonementCreate) SaveX(ctx context.Context) *Abonement {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AbonementCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AbonementCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AbonementCreate) defaults() {
	if _, ok := ac.mutation.DurationMonths(); !ok {
		v := abonement.DefaultDurationMonths
		ac.mutation.SetDurationMonths(v)
	}
	if _, ok := ac.mutation.ExpirationDate(); !ok {
		v := abonement.DefaultExpirationDate()
		ac.mutation.SetExpirationDate(v)
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := abonement.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.IsActive(); !ok {
		v := abonement.DefaultIsActive
		ac.mutation.SetIsActive(v)
	}
	if _, ok := ac.mutation.IsPaid(); !ok {
		v := abonement.DefaultIsPaid
		ac.mutation.SetIsPaid(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AbonementCreate) check() error {
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Abonement.name"`)}
	}
	if _, ok := ac.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Abonement.price"`)}
	}
	if v, ok := ac.mutation.Price(); ok {
		if err := abonement.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Abonement.price": %w`, err)}
		}
	}
	if _, ok := ac.mutation.DurationMonths(); !ok {
		return &ValidationError{Name: "duration_months", err: errors.New(`ent: missing required field "Abonement.duration_months"`)}
	}
	if v, ok := ac.mutation.DurationMonths(); ok {
		if err := abonement.DurationMonthsValidator(v); err != nil {
			return &ValidationError{Name: "duration_months", err: fmt.Errorf(`ent: validator failed for field "Abonement.duration_months": %w`, err)}
		}
	}
	if _, ok := ac.mutation.ExpirationDate(); !ok {
		return &ValidationError{Name: "expiration_date", err: errors.New(`ent: missing required field "Abonement.expiration_date"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Abonement.created_at"`)}
	}
	if _, ok := ac.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "Abonement.is_active"`)}
	}
	if _, ok := ac.mutation.IsPaid(); !ok {
		return &ValidationError{Name: "is_paid", err: errors.New(`ent: missing required field "Abonement.is_paid"`)}
	}
	if len(ac.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Abonement.user"`)}
	}
	if len(ac.mutation.GymIDs()) == 0 {
		return &ValidationError{Name: "gym", err: errors.New(`ent: missing required edge "Abonement.gym"`)}
	}
	if len(ac.mutation.TypeIDs()) == 0 {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required edge "Abonement.type"`)}
	}
	return nil
}

func (ac *AbonementCreate) sqlSave(ctx context.Context) (*Abonement, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AbonementCreate) createSpec() (*Abonement, *sqlgraph.CreateSpec) {
	var (
		_node = &Abonement{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(abonement.Table, sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(abonement.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Price(); ok {
		_spec.SetField(abonement.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := ac.mutation.DurationMonths(); ok {
		_spec.SetField(abonement.FieldDurationMonths, field.TypeInt, value)
		_node.DurationMonths = value
	}
	if value, ok := ac.mutation.ExpirationDate(); ok {
		_spec.SetField(abonement.FieldExpirationDate, field.TypeTime, value)
		_node.ExpirationDate = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(abonement.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(abonement.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.PaidUntil(); ok {
		_spec.SetField(abonement.FieldPaidUntil, field.TypeTime, value)
		_node.PaidUntil = value
	}
	if value, ok := ac.mutation.IsActive(); ok {
		_spec.SetField(abonement.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := ac.mutation.IsPaid(); ok {
		_spec.SetField(abonement.FieldIsPaid, field.TypeBool, value)
		_node.IsPaid = value
	}
	if nodes := ac.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abonement.PaymentsTable,
			Columns: []string{abonement.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   abonement.UserTable,
			Columns: []string{abonement.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_abonements = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.CoachIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abonement.CoachTable,
			Columns: []string{abonement.CoachColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.abonement_coach = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.GymIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abonement.GymTable,
			Columns: []string{abonement.GymColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.abonement_gym = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   abonement.TypeTable,
			Columns: []string{abonement.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonementtype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.abonement_type_abonement = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AbonementCreateBulk is the builder for creating many Abonement entities in bulk.
type AbonementCreateBulk struct {
	config
	err      error
	builders []*AbonementCreate
}

// Save creates the Abonement entities in the database.
func (acb *AbonementCreateBulk) Save(ctx context.Context) ([]*Abonement, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Abonement, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AbonementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AbonementCreateBulk) SaveX(ctx context.Context) []*Abonement {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AbonementCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AbonementCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
