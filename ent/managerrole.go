// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gym-api/ent/gym"
	"gym-api/ent/managerrole"
	"gym-api/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ManagerRole is the model entity for the ManagerRole schema.
type ManagerRole struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ManagerRole holds the value of the "manager_role" field.
	ManagerRole managerrole.ManagerRole `json:"manager_role,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// IsClose holds the value of the "is_close" field.
	IsClose bool `json:"is_close,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ManagerRoleQuery when eager-loading is set.
	Edges             ManagerRoleEdges `json:"edges"`
	manager_role_gym  *int
	manager_role_user *int
	selectValues      sql.SelectValues
}

// ManagerRoleEdges holds the relations/edges for other nodes in the graph.
type ManagerRoleEdges struct {
	// Gym holds the value of the gym edge.
	Gym *Gym `json:"gym,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GymOrErr returns the Gym value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ManagerRoleEdges) GymOrErr() (*Gym, error) {
	if e.Gym != nil {
		return e.Gym, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: gym.Label}
	}
	return nil, &NotLoadedError{edge: "gym"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ManagerRoleEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ManagerRole) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case managerrole.FieldIsClose:
			values[i] = new(sql.NullBool)
		case managerrole.FieldID:
			values[i] = new(sql.NullInt64)
		case managerrole.FieldManagerRole:
			values[i] = new(sql.NullString)
		case managerrole.FieldCreatedAt, managerrole.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case managerrole.ForeignKeys[0]: // manager_role_gym
			values[i] = new(sql.NullInt64)
		case managerrole.ForeignKeys[1]: // manager_role_user
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ManagerRole fields.
func (mr *ManagerRole) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case managerrole.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mr.ID = int(value.Int64)
		case managerrole.FieldManagerRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field manager_role", values[i])
			} else if value.Valid {
				mr.ManagerRole = managerrole.ManagerRole(value.String)
			}
		case managerrole.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mr.CreatedAt = value.Time
			}
		case managerrole.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mr.UpdatedAt = value.Time
			}
		case managerrole.FieldIsClose:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_close", values[i])
			} else if value.Valid {
				mr.IsClose = value.Bool
			}
		case managerrole.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field manager_role_gym", value)
			} else if value.Valid {
				mr.manager_role_gym = new(int)
				*mr.manager_role_gym = int(value.Int64)
			}
		case managerrole.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field manager_role_user", value)
			} else if value.Valid {
				mr.manager_role_user = new(int)
				*mr.manager_role_user = int(value.Int64)
			}
		default:
			mr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ManagerRole.
// This includes values selected through modifiers, order, etc.
func (mr *ManagerRole) Value(name string) (ent.Value, error) {
	return mr.selectValues.Get(name)
}

// QueryGym queries the "gym" edge of the ManagerRole entity.
func (mr *ManagerRole) QueryGym() *GymQuery {
	return NewManagerRoleClient(mr.config).QueryGym(mr)
}

// QueryUser queries the "user" edge of the ManagerRole entity.
func (mr *ManagerRole) QueryUser() *UserQuery {
	return NewManagerRoleClient(mr.config).QueryUser(mr)
}

// Update returns a builder for updating this ManagerRole.
// Note that you need to call ManagerRole.Unwrap() before calling this method if this ManagerRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (mr *ManagerRole) Update() *ManagerRoleUpdateOne {
	return NewManagerRoleClient(mr.config).UpdateOne(mr)
}

// Unwrap unwraps the ManagerRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mr *ManagerRole) Unwrap() *ManagerRole {
	_tx, ok := mr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ManagerRole is not a transactional entity")
	}
	mr.config.driver = _tx.drv
	return mr
}

// String implements the fmt.Stringer.
func (mr *ManagerRole) String() string {
	var builder strings.Builder
	builder.WriteString("ManagerRole(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mr.ID))
	builder.WriteString("manager_role=")
	builder.WriteString(fmt.Sprintf("%v", mr.ManagerRole))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_close=")
	builder.WriteString(fmt.Sprintf("%v", mr.IsClose))
	builder.WriteByte(')')
	return builder.String()
}

// ManagerRoles is a parsable slice of ManagerRole.
type ManagerRoles []*ManagerRole
