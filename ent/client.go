// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"gym-api/ent/migrate"

	"gym-api/ent/abonement"
	"gym-api/ent/abonementtype"
	"gym-api/ent/credential"
	"gym-api/ent/gym"
	"gym-api/ent/managerrole"
	"gym-api/ent/payment"
	"gym-api/ent/paymentrequisite"
	"gym-api/ent/usagemode"
	"gym-api/ent/user"
	"gym-api/ent/userrole"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Abonement is the client for interacting with the Abonement builders.
	Abonement *AbonementClient
	// AbonementType is the client for interacting with the AbonementType builders.
	AbonementType *AbonementTypeClient
	// Credential is the client for interacting with the Credential builders.
	Credential *CredentialClient
	// Gym is the client for interacting with the Gym builders.
	Gym *GymClient
	// ManagerRole is the client for interacting with the ManagerRole builders.
	ManagerRole *ManagerRoleClient
	// Payment is the client for interacting with the Payment builders.
	Payment *PaymentClient
	// PaymentRequisite is the client for interacting with the PaymentRequisite builders.
	PaymentRequisite *PaymentRequisiteClient
	// UsageMode is the client for interacting with the UsageMode builders.
	UsageMode *UsageModeClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserRole is the client for interacting with the UserRole builders.
	UserRole *UserRoleClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Abonement = NewAbonementClient(c.config)
	c.AbonementType = NewAbonementTypeClient(c.config)
	c.Credential = NewCredentialClient(c.config)
	c.Gym = NewGymClient(c.config)
	c.ManagerRole = NewManagerRoleClient(c.config)
	c.Payment = NewPaymentClient(c.config)
	c.PaymentRequisite = NewPaymentRequisiteClient(c.config)
	c.UsageMode = NewUsageModeClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserRole = NewUserRoleClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Abonement:        NewAbonementClient(cfg),
		AbonementType:    NewAbonementTypeClient(cfg),
		Credential:       NewCredentialClient(cfg),
		Gym:              NewGymClient(cfg),
		ManagerRole:      NewManagerRoleClient(cfg),
		Payment:          NewPaymentClient(cfg),
		PaymentRequisite: NewPaymentRequisiteClient(cfg),
		UsageMode:        NewUsageModeClient(cfg),
		User:             NewUserClient(cfg),
		UserRole:         NewUserRoleClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Abonement:        NewAbonementClient(cfg),
		AbonementType:    NewAbonementTypeClient(cfg),
		Credential:       NewCredentialClient(cfg),
		Gym:              NewGymClient(cfg),
		ManagerRole:      NewManagerRoleClient(cfg),
		Payment:          NewPaymentClient(cfg),
		PaymentRequisite: NewPaymentRequisiteClient(cfg),
		UsageMode:        NewUsageModeClient(cfg),
		User:             NewUserClient(cfg),
		UserRole:         NewUserRoleClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Abonement.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Abonement, c.AbonementType, c.Credential, c.Gym, c.ManagerRole, c.Payment,
		c.PaymentRequisite, c.UsageMode, c.User, c.UserRole,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Abonement, c.AbonementType, c.Credential, c.Gym, c.ManagerRole, c.Payment,
		c.PaymentRequisite, c.UsageMode, c.User, c.UserRole,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AbonementMutation:
		return c.Abonement.mutate(ctx, m)
	case *AbonementTypeMutation:
		return c.AbonementType.mutate(ctx, m)
	case *CredentialMutation:
		return c.Credential.mutate(ctx, m)
	case *GymMutation:
		return c.Gym.mutate(ctx, m)
	case *ManagerRoleMutation:
		return c.ManagerRole.mutate(ctx, m)
	case *PaymentMutation:
		return c.Payment.mutate(ctx, m)
	case *PaymentRequisiteMutation:
		return c.PaymentRequisite.mutate(ctx, m)
	case *UsageModeMutation:
		return c.UsageMode.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserRoleMutation:
		return c.UserRole.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AbonementClient is a client for the Abonement schema.
type AbonementClient struct {
	config
}

// NewAbonementClient returns a client for the Abonement from the given config.
func NewAbonementClient(c config) *AbonementClient {
	return &AbonementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `abonement.Hooks(f(g(h())))`.
func (c *AbonementClient) Use(hooks ...Hook) {
	c.hooks.Abonement = append(c.hooks.Abonement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `abonement.Intercept(f(g(h())))`.
func (c *AbonementClient) Intercept(interceptors ...Interceptor) {
	c.inters.Abonement = append(c.inters.Abonement, interceptors...)
}

// Create returns a builder for creating a Abonement entity.
func (c *AbonementClient) Create() *AbonementCreate {
	mutation := newAbonementMutation(c.config, OpCreate)
	return &AbonementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Abonement entities.
func (c *AbonementClient) CreateBulk(builders ...*AbonementCreate) *AbonementCreateBulk {
	return &AbonementCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AbonementClient) MapCreateBulk(slice any, setFunc func(*AbonementCreate, int)) *AbonementCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AbonementCreateBulk{err: fmt.Errorf("calling to AbonementClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AbonementCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AbonementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Abonement.
func (c *AbonementClient) Update() *AbonementUpdate {
	mutation := newAbonementMutation(c.config, OpUpdate)
	return &AbonementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AbonementClient) UpdateOne(a *Abonement) *AbonementUpdateOne {
	mutation := newAbonementMutation(c.config, OpUpdateOne, withAbonement(a))
	return &AbonementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AbonementClient) UpdateOneID(id int) *AbonementUpdateOne {
	mutation := newAbonementMutation(c.config, OpUpdateOne, withAbonementID(id))
	return &AbonementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Abonement.
func (c *AbonementClient) Delete() *AbonementDelete {
	mutation := newAbonementMutation(c.config, OpDelete)
	return &AbonementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AbonementClient) DeleteOne(a *Abonement) *AbonementDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AbonementClient) DeleteOneID(id int) *AbonementDeleteOne {
	builder := c.Delete().Where(abonement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AbonementDeleteOne{builder}
}

// Query returns a query builder for Abonement.
func (c *AbonementClient) Query() *AbonementQuery {
	return &AbonementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAbonement},
		inters: c.Interceptors(),
	}
}

// Get returns a Abonement entity by its id.
func (c *AbonementClient) Get(ctx context.Context, id int) (*Abonement, error) {
	return c.Query().Where(abonement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AbonementClient) GetX(ctx context.Context, id int) *Abonement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPayments queries the payments edge of a Abonement.
func (c *AbonementClient) QueryPayments(a *Abonement) *PaymentQuery {
	query := (&PaymentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abonement.Table, abonement.FieldID, id),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, abonement.PaymentsTable, abonement.PaymentsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Abonement.
func (c *AbonementClient) QueryUser(a *Abonement) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abonement.Table, abonement.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, abonement.UserTable, abonement.UserColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCoach queries the coach edge of a Abonement.
func (c *AbonementClient) QueryCoach(a *Abonement) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abonement.Table, abonement.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, abonement.CoachTable, abonement.CoachColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGym queries the gym edge of a Abonement.
func (c *AbonementClient) QueryGym(a *Abonement) *GymQuery {
	query := (&GymClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abonement.Table, abonement.FieldID, id),
			sqlgraph.To(gym.Table, gym.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, abonement.GymTable, abonement.GymColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryType queries the type edge of a Abonement.
func (c *AbonementClient) QueryType(a *Abonement) *AbonementTypeQuery {
	query := (&AbonementTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abonement.Table, abonement.FieldID, id),
			sqlgraph.To(abonementtype.Table, abonementtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, abonement.TypeTable, abonement.TypeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AbonementClient) Hooks() []Hook {
	return c.hooks.Abonement
}

// Interceptors returns the client interceptors.
func (c *AbonementClient) Interceptors() []Interceptor {
	return c.inters.Abonement
}

func (c *AbonementClient) mutate(ctx context.Context, m *AbonementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AbonementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AbonementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AbonementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AbonementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Abonement mutation op: %q", m.Op())
	}
}

// AbonementTypeClient is a client for the AbonementType schema.
type AbonementTypeClient struct {
	config
}

// NewAbonementTypeClient returns a client for the AbonementType from the given config.
func NewAbonementTypeClient(c config) *AbonementTypeClient {
	return &AbonementTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `abonementtype.Hooks(f(g(h())))`.
func (c *AbonementTypeClient) Use(hooks ...Hook) {
	c.hooks.AbonementType = append(c.hooks.AbonementType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `abonementtype.Intercept(f(g(h())))`.
func (c *AbonementTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.AbonementType = append(c.inters.AbonementType, interceptors...)
}

// Create returns a builder for creating a AbonementType entity.
func (c *AbonementTypeClient) Create() *AbonementTypeCreate {
	mutation := newAbonementTypeMutation(c.config, OpCreate)
	return &AbonementTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AbonementType entities.
func (c *AbonementTypeClient) CreateBulk(builders ...*AbonementTypeCreate) *AbonementTypeCreateBulk {
	return &AbonementTypeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AbonementTypeClient) MapCreateBulk(slice any, setFunc func(*AbonementTypeCreate, int)) *AbonementTypeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AbonementTypeCreateBulk{err: fmt.Errorf("calling to AbonementTypeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AbonementTypeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AbonementTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AbonementType.
func (c *AbonementTypeClient) Update() *AbonementTypeUpdate {
	mutation := newAbonementTypeMutation(c.config, OpUpdate)
	return &AbonementTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AbonementTypeClient) UpdateOne(at *AbonementType) *AbonementTypeUpdateOne {
	mutation := newAbonementTypeMutation(c.config, OpUpdateOne, withAbonementType(at))
	return &AbonementTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AbonementTypeClient) UpdateOneID(id int) *AbonementTypeUpdateOne {
	mutation := newAbonementTypeMutation(c.config, OpUpdateOne, withAbonementTypeID(id))
	return &AbonementTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AbonementType.
func (c *AbonementTypeClient) Delete() *AbonementTypeDelete {
	mutation := newAbonementTypeMutation(c.config, OpDelete)
	return &AbonementTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AbonementTypeClient) DeleteOne(at *AbonementType) *AbonementTypeDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AbonementTypeClient) DeleteOneID(id int) *AbonementTypeDeleteOne {
	builder := c.Delete().Where(abonementtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AbonementTypeDeleteOne{builder}
}

// Query returns a query builder for AbonementType.
func (c *AbonementTypeClient) Query() *AbonementTypeQuery {
	return &AbonementTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAbonementType},
		inters: c.Interceptors(),
	}
}

// Get returns a AbonementType entity by its id.
func (c *AbonementTypeClient) Get(ctx context.Context, id int) (*AbonementType, error) {
	return c.Query().Where(abonementtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AbonementTypeClient) GetX(ctx context.Context, id int) *AbonementType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGym queries the gym edge of a AbonementType.
func (c *AbonementTypeClient) QueryGym(at *AbonementType) *GymQuery {
	query := (&GymClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abonementtype.Table, abonementtype.FieldID, id),
			sqlgraph.To(gym.Table, gym.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, abonementtype.GymTable, abonementtype.GymColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAbonement queries the abonement edge of a AbonementType.
func (c *AbonementTypeClient) QueryAbonement(at *AbonementType) *AbonementQuery {
	query := (&AbonementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(abonementtype.Table, abonementtype.FieldID, id),
			sqlgraph.To(abonement.Table, abonement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, abonementtype.AbonementTable, abonementtype.AbonementColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AbonementTypeClient) Hooks() []Hook {
	return c.hooks.AbonementType
}

// Interceptors returns the client interceptors.
func (c *AbonementTypeClient) Interceptors() []Interceptor {
	return c.inters.AbonementType
}

func (c *AbonementTypeClient) mutate(ctx context.Context, m *AbonementTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AbonementTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AbonementTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AbonementTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AbonementTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AbonementType mutation op: %q", m.Op())
	}
}

// CredentialClient is a client for the Credential schema.
type CredentialClient struct {
	config
}

// NewCredentialClient returns a client for the Credential from the given config.
func NewCredentialClient(c config) *CredentialClient {
	return &CredentialClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `credential.Hooks(f(g(h())))`.
func (c *CredentialClient) Use(hooks ...Hook) {
	c.hooks.Credential = append(c.hooks.Credential, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `credential.Intercept(f(g(h())))`.
func (c *CredentialClient) Intercept(interceptors ...Interceptor) {
	c.inters.Credential = append(c.inters.Credential, interceptors...)
}

// Create returns a builder for creating a Credential entity.
func (c *CredentialClient) Create() *CredentialCreate {
	mutation := newCredentialMutation(c.config, OpCreate)
	return &CredentialCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Credential entities.
func (c *CredentialClient) CreateBulk(builders ...*CredentialCreate) *CredentialCreateBulk {
	return &CredentialCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CredentialClient) MapCreateBulk(slice any, setFunc func(*CredentialCreate, int)) *CredentialCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CredentialCreateBulk{err: fmt.Errorf("calling to CredentialClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CredentialCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CredentialCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Credential.
func (c *CredentialClient) Update() *CredentialUpdate {
	mutation := newCredentialMutation(c.config, OpUpdate)
	return &CredentialUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CredentialClient) UpdateOne(cr *Credential) *CredentialUpdateOne {
	mutation := newCredentialMutation(c.config, OpUpdateOne, withCredential(cr))
	return &CredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CredentialClient) UpdateOneID(id int) *CredentialUpdateOne {
	mutation := newCredentialMutation(c.config, OpUpdateOne, withCredentialID(id))
	return &CredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Credential.
func (c *CredentialClient) Delete() *CredentialDelete {
	mutation := newCredentialMutation(c.config, OpDelete)
	return &CredentialDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CredentialClient) DeleteOne(cr *Credential) *CredentialDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CredentialClient) DeleteOneID(id int) *CredentialDeleteOne {
	builder := c.Delete().Where(credential.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CredentialDeleteOne{builder}
}

// Query returns a query builder for Credential.
func (c *CredentialClient) Query() *CredentialQuery {
	return &CredentialQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCredential},
		inters: c.Interceptors(),
	}
}

// Get returns a Credential entity by its id.
func (c *CredentialClient) Get(ctx context.Context, id int) (*Credential, error) {
	return c.Query().Where(credential.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CredentialClient) GetX(ctx context.Context, id int) *Credential {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Credential.
func (c *CredentialClient) QueryUser(cr *Credential) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(credential.Table, credential.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, credential.UserTable, credential.UserColumn),
		)
		fromV = sqlgraph.Neighbors(cr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CredentialClient) Hooks() []Hook {
	return c.hooks.Credential
}

// Interceptors returns the client interceptors.
func (c *CredentialClient) Interceptors() []Interceptor {
	return c.inters.Credential
}

func (c *CredentialClient) mutate(ctx context.Context, m *CredentialMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CredentialCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CredentialUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CredentialDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Credential mutation op: %q", m.Op())
	}
}

// GymClient is a client for the Gym schema.
type GymClient struct {
	config
}

// NewGymClient returns a client for the Gym from the given config.
func NewGymClient(c config) *GymClient {
	return &GymClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gym.Hooks(f(g(h())))`.
func (c *GymClient) Use(hooks ...Hook) {
	c.hooks.Gym = append(c.hooks.Gym, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `gym.Intercept(f(g(h())))`.
func (c *GymClient) Intercept(interceptors ...Interceptor) {
	c.inters.Gym = append(c.inters.Gym, interceptors...)
}

// Create returns a builder for creating a Gym entity.
func (c *GymClient) Create() *GymCreate {
	mutation := newGymMutation(c.config, OpCreate)
	return &GymCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Gym entities.
func (c *GymClient) CreateBulk(builders ...*GymCreate) *GymCreateBulk {
	return &GymCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GymClient) MapCreateBulk(slice any, setFunc func(*GymCreate, int)) *GymCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GymCreateBulk{err: fmt.Errorf("calling to GymClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GymCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GymCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Gym.
func (c *GymClient) Update() *GymUpdate {
	mutation := newGymMutation(c.config, OpUpdate)
	return &GymUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GymClient) UpdateOne(gy *Gym) *GymUpdateOne {
	mutation := newGymMutation(c.config, OpUpdateOne, withGym(gy))
	return &GymUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GymClient) UpdateOneID(id int) *GymUpdateOne {
	mutation := newGymMutation(c.config, OpUpdateOne, withGymID(id))
	return &GymUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Gym.
func (c *GymClient) Delete() *GymDelete {
	mutation := newGymMutation(c.config, OpDelete)
	return &GymDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GymClient) DeleteOne(gy *Gym) *GymDeleteOne {
	return c.DeleteOneID(gy.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GymClient) DeleteOneID(id int) *GymDeleteOne {
	builder := c.Delete().Where(gym.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GymDeleteOne{builder}
}

// Query returns a query builder for Gym.
func (c *GymClient) Query() *GymQuery {
	return &GymQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGym},
		inters: c.Interceptors(),
	}
}

// Get returns a Gym entity by its id.
func (c *GymClient) Get(ctx context.Context, id int) (*Gym, error) {
	return c.Query().Where(gym.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GymClient) GetX(ctx context.Context, id int) *Gym {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVisitors queries the visitors edge of a Gym.
func (c *GymClient) QueryVisitors(gy *Gym) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gy.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gym.Table, gym.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, gym.VisitorsTable, gym.VisitorsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(gy.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryManagers queries the managers edge of a Gym.
func (c *GymClient) QueryManagers(gy *Gym) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gy.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gym.Table, gym.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, gym.ManagersTable, gym.ManagersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(gy.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAbonementType queries the abonement_type edge of a Gym.
func (c *GymClient) QueryAbonementType(gy *Gym) *AbonementTypeQuery {
	query := (&AbonementTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gy.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gym.Table, gym.FieldID, id),
			sqlgraph.To(abonementtype.Table, abonementtype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, gym.AbonementTypeTable, gym.AbonementTypeColumn),
		)
		fromV = sqlgraph.Neighbors(gy.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwner queries the owner edge of a Gym.
func (c *GymClient) QueryOwner(gy *Gym) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gy.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gym.Table, gym.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gym.OwnerTable, gym.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(gy.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAbonements queries the abonements edge of a Gym.
func (c *GymClient) QueryAbonements(gy *Gym) *AbonementQuery {
	query := (&AbonementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gy.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gym.Table, gym.FieldID, id),
			sqlgraph.To(abonement.Table, abonement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, gym.AbonementsTable, gym.AbonementsColumn),
		)
		fromV = sqlgraph.Neighbors(gy.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserRoles queries the user_roles edge of a Gym.
func (c *GymClient) QueryUserRoles(gy *Gym) *UserRoleQuery {
	query := (&UserRoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gy.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gym.Table, gym.FieldID, id),
			sqlgraph.To(userrole.Table, userrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, gym.UserRolesTable, gym.UserRolesColumn),
		)
		fromV = sqlgraph.Neighbors(gy.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryManagerRoles queries the manager_roles edge of a Gym.
func (c *GymClient) QueryManagerRoles(gy *Gym) *ManagerRoleQuery {
	query := (&ManagerRoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gy.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gym.Table, gym.FieldID, id),
			sqlgraph.To(managerrole.Table, managerrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, gym.ManagerRolesTable, gym.ManagerRolesColumn),
		)
		fromV = sqlgraph.Neighbors(gy.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPaymentRequisite queries the payment_requisite edge of a Gym.
func (c *GymClient) QueryPaymentRequisite(gy *Gym) *PaymentRequisiteQuery {
	query := (&PaymentRequisiteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gy.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gym.Table, gym.FieldID, id),
			sqlgraph.To(paymentrequisite.Table, paymentrequisite.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, gym.PaymentRequisiteTable, gym.PaymentRequisiteColumn),
		)
		fromV = sqlgraph.Neighbors(gy.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GymClient) Hooks() []Hook {
	return c.hooks.Gym
}

// Interceptors returns the client interceptors.
func (c *GymClient) Interceptors() []Interceptor {
	return c.inters.Gym
}

func (c *GymClient) mutate(ctx context.Context, m *GymMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GymCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GymUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GymUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GymDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Gym mutation op: %q", m.Op())
	}
}

// ManagerRoleClient is a client for the ManagerRole schema.
type ManagerRoleClient struct {
	config
}

// NewManagerRoleClient returns a client for the ManagerRole from the given config.
func NewManagerRoleClient(c config) *ManagerRoleClient {
	return &ManagerRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `managerrole.Hooks(f(g(h())))`.
func (c *ManagerRoleClient) Use(hooks ...Hook) {
	c.hooks.ManagerRole = append(c.hooks.ManagerRole, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `managerrole.Intercept(f(g(h())))`.
func (c *ManagerRoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.ManagerRole = append(c.inters.ManagerRole, interceptors...)
}

// Create returns a builder for creating a ManagerRole entity.
func (c *ManagerRoleClient) Create() *ManagerRoleCreate {
	mutation := newManagerRoleMutation(c.config, OpCreate)
	return &ManagerRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ManagerRole entities.
func (c *ManagerRoleClient) CreateBulk(builders ...*ManagerRoleCreate) *ManagerRoleCreateBulk {
	return &ManagerRoleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ManagerRoleClient) MapCreateBulk(slice any, setFunc func(*ManagerRoleCreate, int)) *ManagerRoleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ManagerRoleCreateBulk{err: fmt.Errorf("calling to ManagerRoleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ManagerRoleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ManagerRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ManagerRole.
func (c *ManagerRoleClient) Update() *ManagerRoleUpdate {
	mutation := newManagerRoleMutation(c.config, OpUpdate)
	return &ManagerRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ManagerRoleClient) UpdateOne(mr *ManagerRole) *ManagerRoleUpdateOne {
	mutation := newManagerRoleMutation(c.config, OpUpdateOne, withManagerRole(mr))
	return &ManagerRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ManagerRoleClient) UpdateOneID(id int) *ManagerRoleUpdateOne {
	mutation := newManagerRoleMutation(c.config, OpUpdateOne, withManagerRoleID(id))
	return &ManagerRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ManagerRole.
func (c *ManagerRoleClient) Delete() *ManagerRoleDelete {
	mutation := newManagerRoleMutation(c.config, OpDelete)
	return &ManagerRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ManagerRoleClient) DeleteOne(mr *ManagerRole) *ManagerRoleDeleteOne {
	return c.DeleteOneID(mr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ManagerRoleClient) DeleteOneID(id int) *ManagerRoleDeleteOne {
	builder := c.Delete().Where(managerrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ManagerRoleDeleteOne{builder}
}

// Query returns a query builder for ManagerRole.
func (c *ManagerRoleClient) Query() *ManagerRoleQuery {
	return &ManagerRoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeManagerRole},
		inters: c.Interceptors(),
	}
}

// Get returns a ManagerRole entity by its id.
func (c *ManagerRoleClient) Get(ctx context.Context, id int) (*ManagerRole, error) {
	return c.Query().Where(managerrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ManagerRoleClient) GetX(ctx context.Context, id int) *ManagerRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGym queries the gym edge of a ManagerRole.
func (c *ManagerRoleClient) QueryGym(mr *ManagerRole) *GymQuery {
	query := (&GymClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(managerrole.Table, managerrole.FieldID, id),
			sqlgraph.To(gym.Table, gym.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, managerrole.GymTable, managerrole.GymColumn),
		)
		fromV = sqlgraph.Neighbors(mr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a ManagerRole.
func (c *ManagerRoleClient) QueryUser(mr *ManagerRole) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(managerrole.Table, managerrole.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, managerrole.UserTable, managerrole.UserColumn),
		)
		fromV = sqlgraph.Neighbors(mr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ManagerRoleClient) Hooks() []Hook {
	return c.hooks.ManagerRole
}

// Interceptors returns the client interceptors.
func (c *ManagerRoleClient) Interceptors() []Interceptor {
	return c.inters.ManagerRole
}

func (c *ManagerRoleClient) mutate(ctx context.Context, m *ManagerRoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ManagerRoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ManagerRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ManagerRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ManagerRoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ManagerRole mutation op: %q", m.Op())
	}
}

// PaymentClient is a client for the Payment schema.
type PaymentClient struct {
	config
}

// NewPaymentClient returns a client for the Payment from the given config.
func NewPaymentClient(c config) *PaymentClient {
	return &PaymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `payment.Hooks(f(g(h())))`.
func (c *PaymentClient) Use(hooks ...Hook) {
	c.hooks.Payment = append(c.hooks.Payment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `payment.Intercept(f(g(h())))`.
func (c *PaymentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Payment = append(c.inters.Payment, interceptors...)
}

// Create returns a builder for creating a Payment entity.
func (c *PaymentClient) Create() *PaymentCreate {
	mutation := newPaymentMutation(c.config, OpCreate)
	return &PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Payment entities.
func (c *PaymentClient) CreateBulk(builders ...*PaymentCreate) *PaymentCreateBulk {
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentClient) MapCreateBulk(slice any, setFunc func(*PaymentCreate, int)) *PaymentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentCreateBulk{err: fmt.Errorf("calling to PaymentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Payment.
func (c *PaymentClient) Update() *PaymentUpdate {
	mutation := newPaymentMutation(c.config, OpUpdate)
	return &PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentClient) UpdateOne(pa *Payment) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPayment(pa))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentClient) UpdateOneID(id int) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPaymentID(id))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Payment.
func (c *PaymentClient) Delete() *PaymentDelete {
	mutation := newPaymentMutation(c.config, OpDelete)
	return &PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentClient) DeleteOne(pa *Payment) *PaymentDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentClient) DeleteOneID(id int) *PaymentDeleteOne {
	builder := c.Delete().Where(payment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentDeleteOne{builder}
}

// Query returns a query builder for Payment.
func (c *PaymentClient) Query() *PaymentQuery {
	return &PaymentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePayment},
		inters: c.Interceptors(),
	}
}

// Get returns a Payment entity by its id.
func (c *PaymentClient) Get(ctx context.Context, id int) (*Payment, error) {
	return c.Query().Where(payment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentClient) GetX(ctx context.Context, id int) *Payment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAbonement queries the abonement edge of a Payment.
func (c *PaymentClient) QueryAbonement(pa *Payment) *AbonementQuery {
	query := (&AbonementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payment.Table, payment.FieldID, id),
			sqlgraph.To(abonement.Table, abonement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, payment.AbonementTable, payment.AbonementColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentClient) Hooks() []Hook {
	return c.hooks.Payment
}

// Interceptors returns the client interceptors.
func (c *PaymentClient) Interceptors() []Interceptor {
	return c.inters.Payment
}

func (c *PaymentClient) mutate(ctx context.Context, m *PaymentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Payment mutation op: %q", m.Op())
	}
}

// PaymentRequisiteClient is a client for the PaymentRequisite schema.
type PaymentRequisiteClient struct {
	config
}

// NewPaymentRequisiteClient returns a client for the PaymentRequisite from the given config.
func NewPaymentRequisiteClient(c config) *PaymentRequisiteClient {
	return &PaymentRequisiteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentrequisite.Hooks(f(g(h())))`.
func (c *PaymentRequisiteClient) Use(hooks ...Hook) {
	c.hooks.PaymentRequisite = append(c.hooks.PaymentRequisite, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `paymentrequisite.Intercept(f(g(h())))`.
func (c *PaymentRequisiteClient) Intercept(interceptors ...Interceptor) {
	c.inters.PaymentRequisite = append(c.inters.PaymentRequisite, interceptors...)
}

// Create returns a builder for creating a PaymentRequisite entity.
func (c *PaymentRequisiteClient) Create() *PaymentRequisiteCreate {
	mutation := newPaymentRequisiteMutation(c.config, OpCreate)
	return &PaymentRequisiteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentRequisite entities.
func (c *PaymentRequisiteClient) CreateBulk(builders ...*PaymentRequisiteCreate) *PaymentRequisiteCreateBulk {
	return &PaymentRequisiteCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentRequisiteClient) MapCreateBulk(slice any, setFunc func(*PaymentRequisiteCreate, int)) *PaymentRequisiteCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentRequisiteCreateBulk{err: fmt.Errorf("calling to PaymentRequisiteClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentRequisiteCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentRequisiteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentRequisite.
func (c *PaymentRequisiteClient) Update() *PaymentRequisiteUpdate {
	mutation := newPaymentRequisiteMutation(c.config, OpUpdate)
	return &PaymentRequisiteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentRequisiteClient) UpdateOne(pr *PaymentRequisite) *PaymentRequisiteUpdateOne {
	mutation := newPaymentRequisiteMutation(c.config, OpUpdateOne, withPaymentRequisite(pr))
	return &PaymentRequisiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentRequisiteClient) UpdateOneID(id int) *PaymentRequisiteUpdateOne {
	mutation := newPaymentRequisiteMutation(c.config, OpUpdateOne, withPaymentRequisiteID(id))
	return &PaymentRequisiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentRequisite.
func (c *PaymentRequisiteClient) Delete() *PaymentRequisiteDelete {
	mutation := newPaymentRequisiteMutation(c.config, OpDelete)
	return &PaymentRequisiteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentRequisiteClient) DeleteOne(pr *PaymentRequisite) *PaymentRequisiteDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentRequisiteClient) DeleteOneID(id int) *PaymentRequisiteDeleteOne {
	builder := c.Delete().Where(paymentrequisite.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentRequisiteDeleteOne{builder}
}

// Query returns a query builder for PaymentRequisite.
func (c *PaymentRequisiteClient) Query() *PaymentRequisiteQuery {
	return &PaymentRequisiteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePaymentRequisite},
		inters: c.Interceptors(),
	}
}

// Get returns a PaymentRequisite entity by its id.
func (c *PaymentRequisiteClient) Get(ctx context.Context, id int) (*PaymentRequisite, error) {
	return c.Query().Where(paymentrequisite.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentRequisiteClient) GetX(ctx context.Context, id int) *PaymentRequisite {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGym queries the gym edge of a PaymentRequisite.
func (c *PaymentRequisiteClient) QueryGym(pr *PaymentRequisite) *GymQuery {
	query := (&GymClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentrequisite.Table, paymentrequisite.FieldID, id),
			sqlgraph.To(gym.Table, gym.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, paymentrequisite.GymTable, paymentrequisite.GymColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentRequisiteClient) Hooks() []Hook {
	return c.hooks.PaymentRequisite
}

// Interceptors returns the client interceptors.
func (c *PaymentRequisiteClient) Interceptors() []Interceptor {
	return c.inters.PaymentRequisite
}

func (c *PaymentRequisiteClient) mutate(ctx context.Context, m *PaymentRequisiteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentRequisiteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentRequisiteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentRequisiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentRequisiteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PaymentRequisite mutation op: %q", m.Op())
	}
}

// UsageModeClient is a client for the UsageMode schema.
type UsageModeClient struct {
	config
}

// NewUsageModeClient returns a client for the UsageMode from the given config.
func NewUsageModeClient(c config) *UsageModeClient {
	return &UsageModeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usagemode.Hooks(f(g(h())))`.
func (c *UsageModeClient) Use(hooks ...Hook) {
	c.hooks.UsageMode = append(c.hooks.UsageMode, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usagemode.Intercept(f(g(h())))`.
func (c *UsageModeClient) Intercept(interceptors ...Interceptor) {
	c.inters.UsageMode = append(c.inters.UsageMode, interceptors...)
}

// Create returns a builder for creating a UsageMode entity.
func (c *UsageModeClient) Create() *UsageModeCreate {
	mutation := newUsageModeMutation(c.config, OpCreate)
	return &UsageModeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UsageMode entities.
func (c *UsageModeClient) CreateBulk(builders ...*UsageModeCreate) *UsageModeCreateBulk {
	return &UsageModeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UsageModeClient) MapCreateBulk(slice any, setFunc func(*UsageModeCreate, int)) *UsageModeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UsageModeCreateBulk{err: fmt.Errorf("calling to UsageModeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UsageModeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UsageModeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UsageMode.
func (c *UsageModeClient) Update() *UsageModeUpdate {
	mutation := newUsageModeMutation(c.config, OpUpdate)
	return &UsageModeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UsageModeClient) UpdateOne(um *UsageMode) *UsageModeUpdateOne {
	mutation := newUsageModeMutation(c.config, OpUpdateOne, withUsageMode(um))
	return &UsageModeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UsageModeClient) UpdateOneID(id int) *UsageModeUpdateOne {
	mutation := newUsageModeMutation(c.config, OpUpdateOne, withUsageModeID(id))
	return &UsageModeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UsageMode.
func (c *UsageModeClient) Delete() *UsageModeDelete {
	mutation := newUsageModeMutation(c.config, OpDelete)
	return &UsageModeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UsageModeClient) DeleteOne(um *UsageMode) *UsageModeDeleteOne {
	return c.DeleteOneID(um.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UsageModeClient) DeleteOneID(id int) *UsageModeDeleteOne {
	builder := c.Delete().Where(usagemode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UsageModeDeleteOne{builder}
}

// Query returns a query builder for UsageMode.
func (c *UsageModeClient) Query() *UsageModeQuery {
	return &UsageModeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUsageMode},
		inters: c.Interceptors(),
	}
}

// Get returns a UsageMode entity by its id.
func (c *UsageModeClient) Get(ctx context.Context, id int) (*UsageMode, error) {
	return c.Query().Where(usagemode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UsageModeClient) GetX(ctx context.Context, id int) *UsageMode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UsageMode.
func (c *UsageModeClient) QueryUser(um *UsageMode) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usagemode.Table, usagemode.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, usagemode.UserTable, usagemode.UserColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UsageModeClient) Hooks() []Hook {
	return c.hooks.UsageMode
}

// Interceptors returns the client interceptors.
func (c *UsageModeClient) Interceptors() []Interceptor {
	return c.inters.UsageMode
}

func (c *UsageModeClient) mutate(ctx context.Context, m *UsageModeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UsageModeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UsageModeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UsageModeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UsageModeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UsageMode mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVisitorGym queries the visitor_gym edge of a User.
func (c *UserClient) QueryVisitorGym(u *User) *GymQuery {
	query := (&GymClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(gym.Table, gym.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.VisitorGymTable, user.VisitorGymPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryManagerGym queries the manager_gym edge of a User.
func (c *UserClient) QueryManagerGym(u *User) *GymQuery {
	query := (&GymClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(gym.Table, gym.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.ManagerGymTable, user.ManagerGymPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPersonalTreiner queries the personal_treiner edge of a User.
func (c *UserClient) QueryPersonalTreiner(u *User) *AbonementQuery {
	query := (&AbonementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(abonement.Table, abonement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.PersonalTreinerTable, user.PersonalTreinerColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwnedGyms queries the owned_gyms edge of a User.
func (c *UserClient) QueryOwnedGyms(u *User) *GymQuery {
	query := (&GymClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(gym.Table, gym.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.OwnedGymsTable, user.OwnedGymsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAbonements queries the abonements edge of a User.
func (c *UserClient) QueryAbonements(u *User) *AbonementQuery {
	query := (&AbonementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(abonement.Table, abonement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AbonementsTable, user.AbonementsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserRoles queries the user_roles edge of a User.
func (c *UserClient) QueryUserRoles(u *User) *UserRoleQuery {
	query := (&UserRoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userrole.Table, userrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserRolesTable, user.UserRolesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryManagerRoles queries the manager_roles edge of a User.
func (c *UserClient) QueryManagerRoles(u *User) *ManagerRoleQuery {
	query := (&ManagerRoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(managerrole.Table, managerrole.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.ManagerRolesTable, user.ManagerRolesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFamilyOf queries the family_of edge of a User.
func (c *UserClient) QueryFamilyOf(u *User) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.FamilyOfTable, user.FamilyOfPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFamilyMembers queries the family_members edge of a User.
func (c *UserClient) QueryFamilyMembers(u *User) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.FamilyMembersTable, user.FamilyMembersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCredential queries the credential edge of a User.
func (c *UserClient) QueryCredential(u *User) *CredentialQuery {
	query := (&CredentialClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(credential.Table, credential.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, user.CredentialTable, user.CredentialColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsageMode queries the usage_mode edge of a User.
func (c *UserClient) QueryUsageMode(u *User) *UsageModeQuery {
	query := (&UsageModeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usagemode.Table, usagemode.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, user.UsageModeTable, user.UsageModeColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserRoleClient is a client for the UserRole schema.
type UserRoleClient struct {
	config
}

// NewUserRoleClient returns a client for the UserRole from the given config.
func NewUserRoleClient(c config) *UserRoleClient {
	return &UserRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userrole.Hooks(f(g(h())))`.
func (c *UserRoleClient) Use(hooks ...Hook) {
	c.hooks.UserRole = append(c.hooks.UserRole, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userrole.Intercept(f(g(h())))`.
func (c *UserRoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserRole = append(c.inters.UserRole, interceptors...)
}

// Create returns a builder for creating a UserRole entity.
func (c *UserRoleClient) Create() *UserRoleCreate {
	mutation := newUserRoleMutation(c.config, OpCreate)
	return &UserRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserRole entities.
func (c *UserRoleClient) CreateBulk(builders ...*UserRoleCreate) *UserRoleCreateBulk {
	return &UserRoleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserRoleClient) MapCreateBulk(slice any, setFunc func(*UserRoleCreate, int)) *UserRoleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserRoleCreateBulk{err: fmt.Errorf("calling to UserRoleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserRoleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserRole.
func (c *UserRoleClient) Update() *UserRoleUpdate {
	mutation := newUserRoleMutation(c.config, OpUpdate)
	return &UserRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserRoleClient) UpdateOne(ur *UserRole) *UserRoleUpdateOne {
	mutation := newUserRoleMutation(c.config, OpUpdateOne, withUserRole(ur))
	return &UserRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserRoleClient) UpdateOneID(id int) *UserRoleUpdateOne {
	mutation := newUserRoleMutation(c.config, OpUpdateOne, withUserRoleID(id))
	return &UserRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserRole.
func (c *UserRoleClient) Delete() *UserRoleDelete {
	mutation := newUserRoleMutation(c.config, OpDelete)
	return &UserRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserRoleClient) DeleteOne(ur *UserRole) *UserRoleDeleteOne {
	return c.DeleteOneID(ur.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserRoleClient) DeleteOneID(id int) *UserRoleDeleteOne {
	builder := c.Delete().Where(userrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserRoleDeleteOne{builder}
}

// Query returns a query builder for UserRole.
func (c *UserRoleClient) Query() *UserRoleQuery {
	return &UserRoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserRole},
		inters: c.Interceptors(),
	}
}

// Get returns a UserRole entity by its id.
func (c *UserRoleClient) Get(ctx context.Context, id int) (*UserRole, error) {
	return c.Query().Where(userrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserRoleClient) GetX(ctx context.Context, id int) *UserRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGym queries the gym edge of a UserRole.
func (c *UserRoleClient) QueryGym(ur *UserRole) *GymQuery {
	query := (&GymClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ur.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userrole.Table, userrole.FieldID, id),
			sqlgraph.To(gym.Table, gym.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userrole.GymTable, userrole.GymColumn),
		)
		fromV = sqlgraph.Neighbors(ur.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a UserRole.
func (c *UserRoleClient) QueryUser(ur *UserRole) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ur.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userrole.Table, userrole.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userrole.UserTable, userrole.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ur.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserRoleClient) Hooks() []Hook {
	return c.hooks.UserRole
}

// Interceptors returns the client interceptors.
func (c *UserRoleClient) Interceptors() []Interceptor {
	return c.inters.UserRole
}

func (c *UserRoleClient) mutate(ctx context.Context, m *UserRoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserRoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserRoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserRole mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Abonement, AbonementType, Credential, Gym, ManagerRole, Payment,
		PaymentRequisite, UsageMode, User, UserRole []ent.Hook
	}
	inters struct {
		Abonement, AbonementType, Credential, Gym, ManagerRole, Payment,
		PaymentRequisite, UsageMode, User, UserRole []ent.Interceptor
	}
)
