// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMail holds the string denoting the mail field in the database.
	FieldMail = "mail"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeVisitorGym holds the string denoting the visitor_gym edge name in mutations.
	EdgeVisitorGym = "visitor_gym"
	// EdgeManagerGym holds the string denoting the manager_gym edge name in mutations.
	EdgeManagerGym = "manager_gym"
	// EdgePersonalTreiner holds the string denoting the personal_treiner edge name in mutations.
	EdgePersonalTreiner = "personal_treiner"
	// EdgeOwnedGyms holds the string denoting the owned_gyms edge name in mutations.
	EdgeOwnedGyms = "owned_gyms"
	// EdgeAbonements holds the string denoting the abonements edge name in mutations.
	EdgeAbonements = "abonements"
	// EdgeUserRoles holds the string denoting the user_roles edge name in mutations.
	EdgeUserRoles = "user_roles"
	// EdgeManagerRoles holds the string denoting the manager_roles edge name in mutations.
	EdgeManagerRoles = "manager_roles"
	// EdgeFamilyOf holds the string denoting the family_of edge name in mutations.
	EdgeFamilyOf = "family_of"
	// EdgeFamilyMembers holds the string denoting the family_members edge name in mutations.
	EdgeFamilyMembers = "family_members"
	// EdgeCredential holds the string denoting the credential edge name in mutations.
	EdgeCredential = "credential"
	// EdgeUsageMode holds the string denoting the usage_mode edge name in mutations.
	EdgeUsageMode = "usage_mode"
	// Table holds the table name of the user in the database.
	Table = "users"
	// VisitorGymTable is the table that holds the visitor_gym relation/edge. The primary key declared below.
	VisitorGymTable = "gym_visitors"
	// VisitorGymInverseTable is the table name for the Gym entity.
	// It exists in this package in order to avoid circular dependency with the "gym" package.
	VisitorGymInverseTable = "gyms"
	// ManagerGymTable is the table that holds the manager_gym relation/edge. The primary key declared below.
	ManagerGymTable = "gym_managers"
	// ManagerGymInverseTable is the table name for the Gym entity.
	// It exists in this package in order to avoid circular dependency with the "gym" package.
	ManagerGymInverseTable = "gyms"
	// PersonalTreinerTable is the table that holds the personal_treiner relation/edge.
	PersonalTreinerTable = "abonements"
	// PersonalTreinerInverseTable is the table name for the Abonement entity.
	// It exists in this package in order to avoid circular dependency with the "abonement" package.
	PersonalTreinerInverseTable = "abonements"
	// PersonalTreinerColumn is the table column denoting the personal_treiner relation/edge.
	PersonalTreinerColumn = "abonement_coach"
	// OwnedGymsTable is the table that holds the owned_gyms relation/edge.
	OwnedGymsTable = "gyms"
	// OwnedGymsInverseTable is the table name for the Gym entity.
	// It exists in this package in order to avoid circular dependency with the "gym" package.
	OwnedGymsInverseTable = "gyms"
	// OwnedGymsColumn is the table column denoting the owned_gyms relation/edge.
	OwnedGymsColumn = "user_owned_gyms"
	// AbonementsTable is the table that holds the abonements relation/edge.
	AbonementsTable = "abonements"
	// AbonementsInverseTable is the table name for the Abonement entity.
	// It exists in this package in order to avoid circular dependency with the "abonement" package.
	AbonementsInverseTable = "abonements"
	// AbonementsColumn is the table column denoting the abonements relation/edge.
	AbonementsColumn = "user_abonements"
	// UserRolesTable is the table that holds the user_roles relation/edge.
	UserRolesTable = "user_roles"
	// UserRolesInverseTable is the table name for the UserRole entity.
	// It exists in this package in order to avoid circular dependency with the "userrole" package.
	UserRolesInverseTable = "user_roles"
	// UserRolesColumn is the table column denoting the user_roles relation/edge.
	UserRolesColumn = "user_role_user"
	// ManagerRolesTable is the table that holds the manager_roles relation/edge.
	ManagerRolesTable = "manager_roles"
	// ManagerRolesInverseTable is the table name for the ManagerRole entity.
	// It exists in this package in order to avoid circular dependency with the "managerrole" package.
	ManagerRolesInverseTable = "manager_roles"
	// ManagerRolesColumn is the table column denoting the manager_roles relation/edge.
	ManagerRolesColumn = "manager_role_user"
	// FamilyOfTable is the table that holds the family_of relation/edge. The primary key declared below.
	FamilyOfTable = "user_family_members"
	// FamilyMembersTable is the table that holds the family_members relation/edge. The primary key declared below.
	FamilyMembersTable = "user_family_members"
	// CredentialTable is the table that holds the credential relation/edge.
	CredentialTable = "users"
	// CredentialInverseTable is the table name for the Credential entity.
	// It exists in this package in order to avoid circular dependency with the "credential" package.
	CredentialInverseTable = "credentials"
	// CredentialColumn is the table column denoting the credential relation/edge.
	CredentialColumn = "credential_user"
	// UsageModeTable is the table that holds the usage_mode relation/edge.
	UsageModeTable = "users"
	// UsageModeInverseTable is the table name for the UsageMode entity.
	// It exists in this package in order to avoid circular dependency with the "usagemode" package.
	UsageModeInverseTable = "usage_modes"
	// UsageModeColumn is the table column denoting the usage_mode relation/edge.
	UsageModeColumn = "usage_mode_user"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldMail,
	FieldFirstName,
	FieldLastName,
	FieldPhone,
	FieldAddress,
	FieldDescription,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"credential_user",
	"usage_mode_user",
}

var (
	// VisitorGymPrimaryKey and VisitorGymColumn2 are the table columns denoting the
	// primary key for the visitor_gym relation (M2M).
	VisitorGymPrimaryKey = []string{"gym_id", "user_id"}
	// ManagerGymPrimaryKey and ManagerGymColumn2 are the table columns denoting the
	// primary key for the manager_gym relation (M2M).
	ManagerGymPrimaryKey = []string{"gym_id", "user_id"}
	// FamilyOfPrimaryKey and FamilyOfColumn2 are the table columns denoting the
	// primary key for the family_of relation (M2M).
	FamilyOfPrimaryKey = []string{"user_id", "family_of_id"}
	// FamilyMembersPrimaryKey and FamilyMembersColumn2 are the table columns denoting the
	// primary key for the family_members relation (M2M).
	FamilyMembersPrimaryKey = []string{"user_id", "family_of_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMail orders the results by the mail field.
func ByMail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMail, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByVisitorGymCount orders the results by visitor_gym count.
func ByVisitorGymCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVisitorGymStep(), opts...)
	}
}

// ByVisitorGym orders the results by visitor_gym terms.
func ByVisitorGym(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVisitorGymStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByManagerGymCount orders the results by manager_gym count.
func ByManagerGymCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newManagerGymStep(), opts...)
	}
}

// ByManagerGym orders the results by manager_gym terms.
func ByManagerGym(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newManagerGymStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPersonalTreinerCount orders the results by personal_treiner count.
func ByPersonalTreinerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPersonalTreinerStep(), opts...)
	}
}

// ByPersonalTreiner orders the results by personal_treiner terms.
func ByPersonalTreiner(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPersonalTreinerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnedGymsCount orders the results by owned_gyms count.
func ByOwnedGymsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnedGymsStep(), opts...)
	}
}

// ByOwnedGyms orders the results by owned_gyms terms.
func ByOwnedGyms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnedGymsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAbonementsCount orders the results by abonements count.
func ByAbonementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAbonementsStep(), opts...)
	}
}

// ByAbonements orders the results by abonements terms.
func ByAbonements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAbonementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserRolesCount orders the results by user_roles count.
func ByUserRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserRolesStep(), opts...)
	}
}

// ByUserRoles orders the results by user_roles terms.
func ByUserRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByManagerRolesCount orders the results by manager_roles count.
func ByManagerRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newManagerRolesStep(), opts...)
	}
}

// ByManagerRoles orders the results by manager_roles terms.
func ByManagerRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newManagerRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFamilyOfCount orders the results by family_of count.
func ByFamilyOfCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFamilyOfStep(), opts...)
	}
}

// ByFamilyOf orders the results by family_of terms.
func ByFamilyOf(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFamilyOfStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFamilyMembersCount orders the results by family_members count.
func ByFamilyMembersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFamilyMembersStep(), opts...)
	}
}

// ByFamilyMembers orders the results by family_members terms.
func ByFamilyMembers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFamilyMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCredentialField orders the results by credential field.
func ByCredentialField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCredentialStep(), sql.OrderByField(field, opts...))
	}
}

// ByUsageModeField orders the results by usage_mode field.
func ByUsageModeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsageModeStep(), sql.OrderByField(field, opts...))
	}
}
func newVisitorGymStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VisitorGymInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, VisitorGymTable, VisitorGymPrimaryKey...),
	)
}
func newManagerGymStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ManagerGymInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ManagerGymTable, ManagerGymPrimaryKey...),
	)
}
func newPersonalTreinerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PersonalTreinerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PersonalTreinerTable, PersonalTreinerColumn),
	)
}
func newOwnedGymsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnedGymsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OwnedGymsTable, OwnedGymsColumn),
	)
}
func newAbonementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AbonementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AbonementsTable, AbonementsColumn),
	)
}
func newUserRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserRolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, UserRolesTable, UserRolesColumn),
	)
}
func newManagerRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ManagerRolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ManagerRolesTable, ManagerRolesColumn),
	)
}
func newFamilyOfStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, FamilyOfTable, FamilyOfPrimaryKey...),
	)
}
func newFamilyMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FamilyMembersTable, FamilyMembersPrimaryKey...),
	)
}
func newCredentialStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CredentialInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, CredentialTable, CredentialColumn),
	)
}
func newUsageModeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsageModeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, UsageModeTable, UsageModeColumn),
	)
}
