// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gym-api/ent/gym"
	"gym-api/ent/managerrole"
	"gym-api/ent/predicate"
	"gym-api/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ManagerRoleUpdate is the builder for updating ManagerRole entities.
type ManagerRoleUpdate struct {
	config
	hooks    []Hook
	mutation *ManagerRoleMutation
}

// Where appends a list predicates to the ManagerRoleUpdate builder.
func (mru *ManagerRoleUpdate) Where(ps ...predicate.ManagerRole) *ManagerRoleUpdate {
	mru.mutation.Where(ps...)
	return mru
}

// SetManagerRole sets the "manager_role" field.
func (mru *ManagerRoleUpdate) SetManagerRole(mr managerrole.ManagerRole) *ManagerRoleUpdate {
	mru.mutation.SetManagerRole(mr)
	return mru
}

// SetNillableManagerRole sets the "manager_role" field if the given value is not nil.
func (mru *ManagerRoleUpdate) SetNillableManagerRole(mr *managerrole.ManagerRole) *ManagerRoleUpdate {
	if mr != nil {
		mru.SetManagerRole(*mr)
	}
	return mru
}

// SetCreatedAt sets the "created_at" field.
func (mru *ManagerRoleUpdate) SetCreatedAt(t time.Time) *ManagerRoleUpdate {
	mru.mutation.SetCreatedAt(t)
	return mru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mru *ManagerRoleUpdate) SetNillableCreatedAt(t *time.Time) *ManagerRoleUpdate {
	if t != nil {
		mru.SetCreatedAt(*t)
	}
	return mru
}

// SetUpdatedAt sets the "updated_at" field.
func (mru *ManagerRoleUpdate) SetUpdatedAt(t time.Time) *ManagerRoleUpdate {
	mru.mutation.SetUpdatedAt(t)
	return mru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mru *ManagerRoleUpdate) SetNillableUpdatedAt(t *time.Time) *ManagerRoleUpdate {
	if t != nil {
		mru.SetUpdatedAt(*t)
	}
	return mru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mru *ManagerRoleUpdate) ClearUpdatedAt() *ManagerRoleUpdate {
	mru.mutation.ClearUpdatedAt()
	return mru
}

// SetIsClose sets the "is_close" field.
func (mru *ManagerRoleUpdate) SetIsClose(b bool) *ManagerRoleUpdate {
	mru.mutation.SetIsClose(b)
	return mru
}

// SetNillableIsClose sets the "is_close" field if the given value is not nil.
func (mru *ManagerRoleUpdate) SetNillableIsClose(b *bool) *ManagerRoleUpdate {
	if b != nil {
		mru.SetIsClose(*b)
	}
	return mru
}

// SetGymID sets the "gym" edge to the Gym entity by ID.
func (mru *ManagerRoleUpdate) SetGymID(id int) *ManagerRoleUpdate {
	mru.mutation.SetGymID(id)
	return mru
}

// SetGym sets the "gym" edge to the Gym entity.
func (mru *ManagerRoleUpdate) SetGym(g *Gym) *ManagerRoleUpdate {
	return mru.SetGymID(g.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mru *ManagerRoleUpdate) SetUserID(id int) *ManagerRoleUpdate {
	mru.mutation.SetUserID(id)
	return mru
}

// SetUser sets the "user" edge to the User entity.
func (mru *ManagerRoleUpdate) SetUser(u *User) *ManagerRoleUpdate {
	return mru.SetUserID(u.ID)
}

// Mutation returns the ManagerRoleMutation object of the builder.
func (mru *ManagerRoleUpdate) Mutation() *ManagerRoleMutation {
	return mru.mutation
}

// ClearGym clears the "gym" edge to the Gym entity.
func (mru *ManagerRoleUpdate) ClearGym() *ManagerRoleUpdate {
	mru.mutation.ClearGym()
	return mru
}

// ClearUser clears the "user" edge to the User entity.
func (mru *ManagerRoleUpdate) ClearUser() *ManagerRoleUpdate {
	mru.mutation.ClearUser()
	return mru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mru *ManagerRoleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mru.sqlSave, mru.mutation, mru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mru *ManagerRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := mru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mru *ManagerRoleUpdate) Exec(ctx context.Context) error {
	_, err := mru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mru *ManagerRoleUpdate) ExecX(ctx context.Context) {
	if err := mru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mru *ManagerRoleUpdate) check() error {
	if v, ok := mru.mutation.ManagerRole(); ok {
		if err := managerrole.ManagerRoleValidator(v); err != nil {
			return &ValidationError{Name: "manager_role", err: fmt.Errorf(`ent: validator failed for field "ManagerRole.manager_role": %w`, err)}
		}
	}
	if mru.mutation.GymCleared() && len(mru.mutation.GymIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ManagerRole.gym"`)
	}
	if mru.mutation.UserCleared() && len(mru.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ManagerRole.user"`)
	}
	return nil
}

func (mru *ManagerRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(managerrole.Table, managerrole.Columns, sqlgraph.NewFieldSpec(managerrole.FieldID, field.TypeInt))
	if ps := mru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mru.mutation.ManagerRole(); ok {
		_spec.SetField(managerrole.FieldManagerRole, field.TypeEnum, value)
	}
	if value, ok := mru.mutation.CreatedAt(); ok {
		_spec.SetField(managerrole.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mru.mutation.UpdatedAt(); ok {
		_spec.SetField(managerrole.FieldUpdatedAt, field.TypeTime, value)
	}
	if mru.mutation.UpdatedAtCleared() {
		_spec.ClearField(managerrole.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mru.mutation.IsClose(); ok {
		_spec.SetField(managerrole.FieldIsClose, field.TypeBool, value)
	}
	if mru.mutation.GymCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   managerrole.GymTable,
			Columns: []string{managerrole.GymColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mru.mutation.GymIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   managerrole.GymTable,
			Columns: []string{managerrole.GymColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   managerrole.UserTable,
			Columns: []string{managerrole.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   managerrole.UserTable,
			Columns: []string{managerrole.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{managerrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mru.mutation.done = true
	return n, nil
}

// ManagerRoleUpdateOne is the builder for updating a single ManagerRole entity.
type ManagerRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ManagerRoleMutation
}

// SetManagerRole sets the "manager_role" field.
func (mruo *ManagerRoleUpdateOne) SetManagerRole(mr managerrole.ManagerRole) *ManagerRoleUpdateOne {
	mruo.mutation.SetManagerRole(mr)
	return mruo
}

// SetNillableManagerRole sets the "manager_role" field if the given value is not nil.
func (mruo *ManagerRoleUpdateOne) SetNillableManagerRole(mr *managerrole.ManagerRole) *ManagerRoleUpdateOne {
	if mr != nil {
		mruo.SetManagerRole(*mr)
	}
	return mruo
}

// SetCreatedAt sets the "created_at" field.
func (mruo *ManagerRoleUpdateOne) SetCreatedAt(t time.Time) *ManagerRoleUpdateOne {
	mruo.mutation.SetCreatedAt(t)
	return mruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mruo *ManagerRoleUpdateOne) SetNillableCreatedAt(t *time.Time) *ManagerRoleUpdateOne {
	if t != nil {
		mruo.SetCreatedAt(*t)
	}
	return mruo
}

// SetUpdatedAt sets the "updated_at" field.
func (mruo *ManagerRoleUpdateOne) SetUpdatedAt(t time.Time) *ManagerRoleUpdateOne {
	mruo.mutation.SetUpdatedAt(t)
	return mruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mruo *ManagerRoleUpdateOne) SetNillableUpdatedAt(t *time.Time) *ManagerRoleUpdateOne {
	if t != nil {
		mruo.SetUpdatedAt(*t)
	}
	return mruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mruo *ManagerRoleUpdateOne) ClearUpdatedAt() *ManagerRoleUpdateOne {
	mruo.mutation.ClearUpdatedAt()
	return mruo
}

// SetIsClose sets the "is_close" field.
func (mruo *ManagerRoleUpdateOne) SetIsClose(b bool) *ManagerRoleUpdateOne {
	mruo.mutation.SetIsClose(b)
	return mruo
}

// SetNillableIsClose sets the "is_close" field if the given value is not nil.
func (mruo *ManagerRoleUpdateOne) SetNillableIsClose(b *bool) *ManagerRoleUpdateOne {
	if b != nil {
		mruo.SetIsClose(*b)
	}
	return mruo
}

// SetGymID sets the "gym" edge to the Gym entity by ID.
func (mruo *ManagerRoleUpdateOne) SetGymID(id int) *ManagerRoleUpdateOne {
	mruo.mutation.SetGymID(id)
	return mruo
}

// SetGym sets the "gym" edge to the Gym entity.
func (mruo *ManagerRoleUpdateOne) SetGym(g *Gym) *ManagerRoleUpdateOne {
	return mruo.SetGymID(g.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mruo *ManagerRoleUpdateOne) SetUserID(id int) *ManagerRoleUpdateOne {
	mruo.mutation.SetUserID(id)
	return mruo
}

// SetUser sets the "user" edge to the User entity.
func (mruo *ManagerRoleUpdateOne) SetUser(u *User) *ManagerRoleUpdateOne {
	return mruo.SetUserID(u.ID)
}

// Mutation returns the ManagerRoleMutation object of the builder.
func (mruo *ManagerRoleUpdateOne) Mutation() *ManagerRoleMutation {
	return mruo.mutation
}

// ClearGym clears the "gym" edge to the Gym entity.
func (mruo *ManagerRoleUpdateOne) ClearGym() *ManagerRoleUpdateOne {
	mruo.mutation.ClearGym()
	return mruo
}

// ClearUser clears the "user" edge to the User entity.
func (mruo *ManagerRoleUpdateOne) ClearUser() *ManagerRoleUpdateOne {
	mruo.mutation.ClearUser()
	return mruo
}

// Where appends a list predicates to the ManagerRoleUpdate builder.
func (mruo *ManagerRoleUpdateOne) Where(ps ...predicate.ManagerRole) *ManagerRoleUpdateOne {
	mruo.mutation.Where(ps...)
	return mruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mruo *ManagerRoleUpdateOne) Select(field string, fields ...string) *ManagerRoleUpdateOne {
	mruo.fields = append([]string{field}, fields...)
	return mruo
}

// Save executes the query and returns the updated ManagerRole entity.
func (mruo *ManagerRoleUpdateOne) Save(ctx context.Context) (*ManagerRole, error) {
	return withHooks(ctx, mruo.sqlSave, mruo.mutation, mruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mruo *ManagerRoleUpdateOne) SaveX(ctx context.Context) *ManagerRole {
	node, err := mruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mruo *ManagerRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := mruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mruo *ManagerRoleUpdateOne) ExecX(ctx context.Context) {
	if err := mruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mruo *ManagerRoleUpdateOne) check() error {
	if v, ok := mruo.mutation.ManagerRole(); ok {
		if err := managerrole.ManagerRoleValidator(v); err != nil {
			return &ValidationError{Name: "manager_role", err: fmt.Errorf(`ent: validator failed for field "ManagerRole.manager_role": %w`, err)}
		}
	}
	if mruo.mutation.GymCleared() && len(mruo.mutation.GymIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ManagerRole.gym"`)
	}
	if mruo.mutation.UserCleared() && len(mruo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ManagerRole.user"`)
	}
	return nil
}

func (mruo *ManagerRoleUpdateOne) sqlSave(ctx context.Context) (_node *ManagerRole, err error) {
	if err := mruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(managerrole.Table, managerrole.Columns, sqlgraph.NewFieldSpec(managerrole.FieldID, field.TypeInt))
	id, ok := mruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ManagerRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, managerrole.FieldID)
		for _, f := range fields {
			if !managerrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != managerrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mruo.mutation.ManagerRole(); ok {
		_spec.SetField(managerrole.FieldManagerRole, field.TypeEnum, value)
	}
	if value, ok := mruo.mutation.CreatedAt(); ok {
		_spec.SetField(managerrole.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mruo.mutation.UpdatedAt(); ok {
		_spec.SetField(managerrole.FieldUpdatedAt, field.TypeTime, value)
	}
	if mruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(managerrole.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mruo.mutation.IsClose(); ok {
		_spec.SetField(managerrole.FieldIsClose, field.TypeBool, value)
	}
	if mruo.mutation.GymCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   managerrole.GymTable,
			Columns: []string{managerrole.GymColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mruo.mutation.GymIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   managerrole.GymTable,
			Columns: []string{managerrole.GymColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   managerrole.UserTable,
			Columns: []string{managerrole.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   managerrole.UserTable,
			Columns: []string{managerrole.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ManagerRole{config: mruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{managerrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mruo.mutation.done = true
	return _node, nil
}
