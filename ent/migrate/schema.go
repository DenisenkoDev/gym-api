// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AbonementsColumns holds the columns for the "abonements" table.
	AbonementsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "price", Type: field.TypeFloat64},
		{Name: "duration_months", Type: field.TypeInt, Default: 1},
		{Name: "expiration_date", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "paid_until", Type: field.TypeTime, Nullable: true},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "is_paid", Type: field.TypeBool, Default: false},
		{Name: "abonement_coach", Type: field.TypeInt, Nullable: true},
		{Name: "abonement_gym", Type: field.TypeInt},
		{Name: "abonement_type_abonement", Type: field.TypeInt},
		{Name: "user_abonements", Type: field.TypeInt},
	}
	// AbonementsTable holds the schema information for the "abonements" table.
	AbonementsTable = &schema.Table{
		Name:       "abonements",
		Columns:    AbonementsColumns,
		PrimaryKey: []*schema.Column{AbonementsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "abonements_users_coach",
				Columns:    []*schema.Column{AbonementsColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "abonements_gyms_gym",
				Columns:    []*schema.Column{AbonementsColumns[11]},
				RefColumns: []*schema.Column{GymsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "abonements_abonement_types_abonement",
				Columns:    []*schema.Column{AbonementsColumns[12]},
				RefColumns: []*schema.Column{AbonementTypesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "abonements_users_abonements",
				Columns:    []*schema.Column{AbonementsColumns[13]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// AbonementTypesColumns holds the columns for the "abonement_types" table.
	AbonementTypesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "abonement_type_gym", Type: field.TypeInt},
	}
	// AbonementTypesTable holds the schema information for the "abonement_types" table.
	AbonementTypesTable = &schema.Table{
		Name:       "abonement_types",
		Columns:    AbonementTypesColumns,
		PrimaryKey: []*schema.Column{AbonementTypesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "abonement_types_gyms_gym",
				Columns:    []*schema.Column{AbonementTypesColumns[3]},
				RefColumns: []*schema.Column{GymsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// CredentialsColumns holds the columns for the "credentials" table.
	CredentialsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "password_hash", Type: field.TypeString},
	}
	// CredentialsTable holds the schema information for the "credentials" table.
	CredentialsTable = &schema.Table{
		Name:       "credentials",
		Columns:    CredentialsColumns,
		PrimaryKey: []*schema.Column{CredentialsColumns[0]},
	}
	// GymsColumns holds the columns for the "gyms" table.
	GymsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "currency_id", Type: field.TypeInt, Default: 3},
		{Name: "phone", Type: field.TypeString, Unique: true},
		{Name: "mail", Type: field.TypeString, Unique: true},
		{Name: "address", Type: field.TypeString, Nullable: true},
		{Name: "web_site", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "payment_requisite_gym", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "user_owned_gyms", Type: field.TypeInt},
	}
	// GymsTable holds the schema information for the "gyms" table.
	GymsTable = &schema.Table{
		Name:       "gyms",
		Columns:    GymsColumns,
		PrimaryKey: []*schema.Column{GymsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "gyms_payment_requisites_gym",
				Columns:    []*schema.Column{GymsColumns[10]},
				RefColumns: []*schema.Column{PaymentRequisitesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "gyms_users_owned_gyms",
				Columns:    []*schema.Column{GymsColumns[11]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ManagerRolesColumns holds the columns for the "manager_roles" table.
	ManagerRolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "manager_role", Type: field.TypeEnum, Enums: []string{"director", "sales_manager", "trainer", "instructor", "administrator", "cleaner", "massage_therapist"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "is_close", Type: field.TypeBool, Default: false},
		{Name: "manager_role_gym", Type: field.TypeInt},
		{Name: "manager_role_user", Type: field.TypeInt},
	}
	// ManagerRolesTable holds the schema information for the "manager_roles" table.
	ManagerRolesTable = &schema.Table{
		Name:       "manager_roles",
		Columns:    ManagerRolesColumns,
		PrimaryKey: []*schema.Column{ManagerRolesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "manager_roles_gyms_gym",
				Columns:    []*schema.Column{ManagerRolesColumns[5]},
				RefColumns: []*schema.Column{GymsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "manager_roles_users_user",
				Columns:    []*schema.Column{ManagerRolesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// PaymentsColumns holds the columns for the "payments" table.
	PaymentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "amount", Type: field.TypeFloat64},
		{Name: "link_photo", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "confirmed_at", Type: field.TypeTime, Nullable: true},
		{Name: "is_confirmed", Type: field.TypeBool, Default: false},
		{Name: "payment_abonement", Type: field.TypeInt},
	}
	// PaymentsTable holds the schema information for the "payments" table.
	PaymentsTable = &schema.Table{
		Name:       "payments",
		Columns:    PaymentsColumns,
		PrimaryKey: []*schema.Column{PaymentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "payments_abonements_abonement",
				Columns:    []*schema.Column{PaymentsColumns[6]},
				RefColumns: []*schema.Column{AbonementsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// PaymentRequisitesColumns holds the columns for the "payment_requisites" table.
	PaymentRequisitesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "bank_kard_1", Type: field.TypeString, Nullable: true},
		{Name: "bank_kard_2", Type: field.TypeString, Nullable: true},
		{Name: "bank_kard_3", Type: field.TypeString, Nullable: true},
		{Name: "bank_kard_4", Type: field.TypeString, Nullable: true},
		{Name: "bank_kard_5", Type: field.TypeString, Nullable: true},
		{Name: "name_bank_kard_1", Type: field.TypeString, Nullable: true},
		{Name: "name_bank_kard_2", Type: field.TypeString, Nullable: true},
		{Name: "name_bank_kard_3", Type: field.TypeString, Nullable: true},
		{Name: "name_bank_kard_4", Type: field.TypeString, Nullable: true},
		{Name: "name_bank_kard_5", Type: field.TypeString, Nullable: true},
		{Name: "name_bank", Type: field.TypeString, Nullable: true},
		{Name: "iban", Type: field.TypeString, Nullable: true},
		{Name: "edrpou", Type: field.TypeString, Nullable: true},
		{Name: "receiver_name", Type: field.TypeString, Nullable: true},
		{Name: "payment_purpose", Type: field.TypeString, Nullable: true},
		{Name: "mfo", Type: field.TypeString, Nullable: true},
		{Name: "account_number", Type: field.TypeString, Nullable: true},
	}
	// PaymentRequisitesTable holds the schema information for the "payment_requisites" table.
	PaymentRequisitesTable = &schema.Table{
		Name:       "payment_requisites",
		Columns:    PaymentRequisitesColumns,
		PrimaryKey: []*schema.Column{PaymentRequisitesColumns[0]},
	}
	// UsageModesColumns holds the columns for the "usage_modes" table.
	UsageModesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "mode", Type: field.TypeEnum, Enums: []string{"test", "paid"}, Default: "test"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "paid_activated_at", Type: field.TypeTime, Nullable: true},
	}
	// UsageModesTable holds the schema information for the "usage_modes" table.
	UsageModesTable = &schema.Table{
		Name:       "usage_modes",
		Columns:    UsageModesColumns,
		PrimaryKey: []*schema.Column{UsageModesColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "mail", Type: field.TypeString, Unique: true},
		{Name: "first_name", Type: field.TypeString},
		{Name: "last_name", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString},
		{Name: "address", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "credential_user", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "usage_mode_user", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_credentials_user",
				Columns:    []*schema.Column{UsersColumns[9]},
				RefColumns: []*schema.Column{CredentialsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "users_usage_modes_user",
				Columns:    []*schema.Column{UsersColumns[10]},
				RefColumns: []*schema.Column{UsageModesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserRolesColumns holds the columns for the "user_roles" table.
	UserRolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_role", Type: field.TypeEnum, Enums: []string{"visitor", "manager", "owner"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "is_close", Type: field.TypeBool, Default: false},
		{Name: "user_role_gym", Type: field.TypeInt},
		{Name: "user_role_user", Type: field.TypeInt},
	}
	// UserRolesTable holds the schema information for the "user_roles" table.
	UserRolesTable = &schema.Table{
		Name:       "user_roles",
		Columns:    UserRolesColumns,
		PrimaryKey: []*schema.Column{UserRolesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_roles_gyms_gym",
				Columns:    []*schema.Column{UserRolesColumns[5]},
				RefColumns: []*schema.Column{GymsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_roles_users_user",
				Columns:    []*schema.Column{UserRolesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// GymVisitorsColumns holds the columns for the "gym_visitors" table.
	GymVisitorsColumns = []*schema.Column{
		{Name: "gym_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// GymVisitorsTable holds the schema information for the "gym_visitors" table.
	GymVisitorsTable = &schema.Table{
		Name:       "gym_visitors",
		Columns:    GymVisitorsColumns,
		PrimaryKey: []*schema.Column{GymVisitorsColumns[0], GymVisitorsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "gym_visitors_gym_id",
				Columns:    []*schema.Column{GymVisitorsColumns[0]},
				RefColumns: []*schema.Column{GymsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "gym_visitors_user_id",
				Columns:    []*schema.Column{GymVisitorsColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// GymManagersColumns holds the columns for the "gym_managers" table.
	GymManagersColumns = []*schema.Column{
		{Name: "gym_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// GymManagersTable holds the schema information for the "gym_managers" table.
	GymManagersTable = &schema.Table{
		Name:       "gym_managers",
		Columns:    GymManagersColumns,
		PrimaryKey: []*schema.Column{GymManagersColumns[0], GymManagersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "gym_managers_gym_id",
				Columns:    []*schema.Column{GymManagersColumns[0]},
				RefColumns: []*schema.Column{GymsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "gym_managers_user_id",
				Columns:    []*schema.Column{GymManagersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserFamilyMembersColumns holds the columns for the "user_family_members" table.
	UserFamilyMembersColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "family_of_id", Type: field.TypeInt},
	}
	// UserFamilyMembersTable holds the schema information for the "user_family_members" table.
	UserFamilyMembersTable = &schema.Table{
		Name:       "user_family_members",
		Columns:    UserFamilyMembersColumns,
		PrimaryKey: []*schema.Column{UserFamilyMembersColumns[0], UserFamilyMembersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_family_members_user_id",
				Columns:    []*schema.Column{UserFamilyMembersColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_family_members_family_of_id",
				Columns:    []*schema.Column{UserFamilyMembersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AbonementsTable,
		AbonementTypesTable,
		CredentialsTable,
		GymsTable,
		ManagerRolesTable,
		PaymentsTable,
		PaymentRequisitesTable,
		UsageModesTable,
		UsersTable,
		UserRolesTable,
		GymVisitorsTable,
		GymManagersTable,
		UserFamilyMembersTable,
	}
)

func init() {
	AbonementsTable.ForeignKeys[0].RefTable = UsersTable
	AbonementsTable.ForeignKeys[1].RefTable = GymsTable
	AbonementsTable.ForeignKeys[2].RefTable = AbonementTypesTable
	AbonementsTable.ForeignKeys[3].RefTable = UsersTable
	AbonementTypesTable.ForeignKeys[0].RefTable = GymsTable
	GymsTable.ForeignKeys[0].RefTable = PaymentRequisitesTable
	GymsTable.ForeignKeys[1].RefTable = UsersTable
	ManagerRolesTable.ForeignKeys[0].RefTable = GymsTable
	ManagerRolesTable.ForeignKeys[1].RefTable = UsersTable
	PaymentsTable.ForeignKeys[0].RefTable = AbonementsTable
	UsersTable.ForeignKeys[0].RefTable = CredentialsTable
	UsersTable.ForeignKeys[1].RefTable = UsageModesTable
	UserRolesTable.ForeignKeys[0].RefTable = GymsTable
	UserRolesTable.ForeignKeys[1].RefTable = UsersTable
	GymVisitorsTable.ForeignKeys[0].RefTable = GymsTable
	GymVisitorsTable.ForeignKeys[1].RefTable = UsersTable
	GymManagersTable.ForeignKeys[0].RefTable = GymsTable
	GymManagersTable.ForeignKeys[1].RefTable = UsersTable
	UserFamilyMembersTable.ForeignKeys[0].RefTable = UsersTable
	UserFamilyMembersTable.ForeignKeys[1].RefTable = UsersTable
}
