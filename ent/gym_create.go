// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gym-api/ent/abonement"
	"gym-api/ent/abonementtype"
	"gym-api/ent/gym"
	"gym-api/ent/managerrole"
	"gym-api/ent/paymentrequisite"
	"gym-api/ent/user"
	"gym-api/ent/userrole"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GymCreate is the builder for creating a Gym entity.
type GymCreate struct {
	config
	mutation *GymMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (gc *GymCreate) SetName(s string) *GymCreate {
	gc.mutation.SetName(s)
	return gc
}

// SetCurrencyID sets the "currency_id" field.
func (gc *GymCreate) SetCurrencyID(i int) *GymCreate {
	gc.mutation.SetCurrencyID(i)
	return gc
}

// SetNillableCurrencyID sets the "currency_id" field if the given value is not nil.
func (gc *GymCreate) SetNillableCurrencyID(i *int) *GymCreate {
	if i != nil {
		gc.SetCurrencyID(*i)
	}
	return gc
}

// SetPhone sets the "phone" field.
func (gc *GymCreate) SetPhone(s string) *GymCreate {
	gc.mutation.SetPhone(s)
	return gc
}

// SetMail sets the "mail" field.
func (gc *GymCreate) SetMail(s string) *GymCreate {
	gc.mutation.SetMail(s)
	return gc
}

// SetAddress sets the "address" field.
func (gc *GymCreate) SetAddress(s string) *GymCreate {
	gc.mutation.SetAddress(s)
	return gc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (gc *GymCreate) SetNillableAddress(s *string) *GymCreate {
	if s != nil {
		gc.SetAddress(*s)
	}
	return gc
}

// SetWebSite sets the "web_site" field.
func (gc *GymCreate) SetWebSite(s string) *GymCreate {
	gc.mutation.SetWebSite(s)
	return gc
}

// SetNillableWebSite sets the "web_site" field if the given value is not nil.
func (gc *GymCreate) SetNillableWebSite(s *string) *GymCreate {
	if s != nil {
		gc.SetWebSite(*s)
	}
	return gc
}

// SetDescription sets the "description" field.
func (gc *GymCreate) SetDescription(s string) *GymCreate {
	gc.mutation.SetDescription(s)
	return gc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (gc *GymCreate) SetNillableDescription(s *string) *GymCreate {
	if s != nil {
		gc.SetDescription(*s)
	}
	return gc
}

// SetCreatedAt sets the "created_at" field.
func (gc *GymCreate) SetCreatedAt(t time.Time) *GymCreate {
	gc.mutation.SetCreatedAt(t)
	return gc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gc *GymCreate) SetNillableCreatedAt(t *time.Time) *GymCreate {
	if t != nil {
		gc.SetCreatedAt(*t)
	}
	return gc
}

// SetUpdatedAt sets the "updated_at" field.
func (gc *GymCreate) SetUpdatedAt(t time.Time) *GymCreate {
	gc.mutation.SetUpdatedAt(t)
	return gc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gc *GymCreate) SetNillableUpdatedAt(t *time.Time) *GymCreate {
	if t != nil {
		gc.SetUpdatedAt(*t)
	}
	return gc
}

// AddVisitorIDs adds the "visitors" edge to the User entity by IDs.
func (gc *GymCreate) AddVisitorIDs(ids ...int) *GymCreate {
	gc.mutation.AddVisitorIDs(ids...)
	return gc
}

// AddVisitors adds the "visitors" edges to the User entity.
func (gc *GymCreate) AddVisitors(u ...*User) *GymCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gc.AddVisitorIDs(ids...)
}

// AddManagerIDs adds the "managers" edge to the User entity by IDs.
func (gc *GymCreate) AddManagerIDs(ids ...int) *GymCreate {
	gc.mutation.AddManagerIDs(ids...)
	return gc
}

// AddManagers adds the "managers" edges to the User entity.
func (gc *GymCreate) AddManagers(u ...*User) *GymCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gc.AddManagerIDs(ids...)
}

// AddAbonementTypeIDs adds the "abonement_type" edge to the AbonementType entity by IDs.
func (gc *GymCreate) AddAbonementTypeIDs(ids ...int) *GymCreate {
	gc.mutation.AddAbonementTypeIDs(ids...)
	return gc
}

// AddAbonementType adds the "abonement_type" edges to the AbonementType entity.
func (gc *GymCreate) AddAbonementType(a ...*AbonementType) *GymCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return gc.AddAbonementTypeIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (gc *GymCreate) SetOwnerID(id int) *GymCreate {
	gc.mutation.SetOwnerID(id)
	return gc
}

// SetOwner sets the "owner" edge to the User entity.
func (gc *GymCreate) SetOwner(u *User) *GymCreate {
	return gc.SetOwnerID(u.ID)
}

// AddAbonementIDs adds the "abonements" edge to the Abonement entity by IDs.
func (gc *GymCreate) AddAbonementIDs(ids ...int) *GymCreate {
	gc.mutation.AddAbonementIDs(ids...)
	return gc
}

// AddAbonements adds the "abonements" edges to the Abonement entity.
func (gc *GymCreate) AddAbonements(a ...*Abonement) *GymCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return gc.AddAbonementIDs(ids...)
}

// AddUserRoleIDs adds the "user_roles" edge to the UserRole entity by IDs.
func (gc *GymCreate) AddUserRoleIDs(ids ...int) *GymCreate {
	gc.mutation.AddUserRoleIDs(ids...)
	return gc
}

// AddUserRoles adds the "user_roles" edges to the UserRole entity.
func (gc *GymCreate) AddUserRoles(u ...*UserRole) *GymCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gc.AddUserRoleIDs(ids...)
}

// AddManagerRoleIDs adds the "manager_roles" edge to the ManagerRole entity by IDs.
func (gc *GymCreate) AddManagerRoleIDs(ids ...int) *GymCreate {
	gc.mutation.AddManagerRoleIDs(ids...)
	return gc
}

// AddManagerRoles adds the "manager_roles" edges to the ManagerRole entity.
func (gc *GymCreate) AddManagerRoles(m ...*ManagerRole) *GymCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return gc.AddManagerRoleIDs(ids...)
}

// SetPaymentRequisiteID sets the "payment_requisite" edge to the PaymentRequisite entity by ID.
func (gc *GymCreate) SetPaymentRequisiteID(id int) *GymCreate {
	gc.mutation.SetPaymentRequisiteID(id)
	return gc
}

// SetNillablePaymentRequisiteID sets the "payment_requisite" edge to the PaymentRequisite entity by ID if the given value is not nil.
func (gc *GymCreate) SetNillablePaymentRequisiteID(id *int) *GymCreate {
	if id != nil {
		gc = gc.SetPaymentRequisiteID(*id)
	}
	return gc
}

// SetPaymentRequisite sets the "payment_requisite" edge to the PaymentRequisite entity.
func (gc *GymCreate) SetPaymentRequisite(p *PaymentRequisite) *GymCreate {
	return gc.SetPaymentRequisiteID(p.ID)
}

// Mutation returns the GymMutation object of the builder.
func (gc *GymCreate) Mutation() *GymMutation {
	return gc.mutation
}

// Save creates the Gym in the database.
func (gc *GymCreate) Save(ctx context.Context) (*Gym, error) {
	gc.defaults()
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GymCreate) SaveX(ctx context.Context) *Gym {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GymCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GymCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GymCreate) defaults() {
	if _, ok := gc.mutation.CurrencyID(); !ok {
		v := gym.DefaultCurrencyID
		gc.mutation.SetCurrencyID(v)
	}
	if _, ok := gc.mutation.CreatedAt(); !ok {
		v := gym.DefaultCreatedAt()
		gc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GymCreate) check() error {
	if _, ok := gc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Gym.name"`)}
	}
	if _, ok := gc.mutation.CurrencyID(); !ok {
		return &ValidationError{Name: "currency_id", err: errors.New(`ent: missing required field "Gym.currency_id"`)}
	}
	if _, ok := gc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Gym.phone"`)}
	}
	if _, ok := gc.mutation.Mail(); !ok {
		return &ValidationError{Name: "mail", err: errors.New(`ent: missing required field "Gym.mail"`)}
	}
	if _, ok := gc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Gym.created_at"`)}
	}
	if len(gc.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Gym.owner"`)}
	}
	return nil
}

func (gc *GymCreate) sqlSave(ctx context.Context) (*Gym, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GymCreate) createSpec() (*Gym, *sqlgraph.CreateSpec) {
	var (
		_node = &Gym{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(gym.Table, sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt))
	)
	if value, ok := gc.mutation.Name(); ok {
		_spec.SetField(gym.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := gc.mutation.CurrencyID(); ok {
		_spec.SetField(gym.FieldCurrencyID, field.TypeInt, value)
		_node.CurrencyID = value
	}
	if value, ok := gc.mutation.Phone(); ok {
		_spec.SetField(gym.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := gc.mutation.Mail(); ok {
		_spec.SetField(gym.FieldMail, field.TypeString, value)
		_node.Mail = value
	}
	if value, ok := gc.mutation.Address(); ok {
		_spec.SetField(gym.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := gc.mutation.WebSite(); ok {
		_spec.SetField(gym.FieldWebSite, field.TypeString, value)
		_node.WebSite = value
	}
	if value, ok := gc.mutation.Description(); ok {
		_spec.SetField(gym.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := gc.mutation.CreatedAt(); ok {
		_spec.SetField(gym.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gc.mutation.UpdatedAt(); ok {
		_spec.SetField(gym.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := gc.mutation.VisitorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gym.VisitorsTable,
			Columns: gym.VisitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.ManagersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gym.ManagersTable,
			Columns: gym.ManagersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.AbonementTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.AbonementTypeTable,
			Columns: []string{gym.AbonementTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonementtype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gym.OwnerTable,
			Columns: []string{gym.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_owned_gyms = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.AbonementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.AbonementsTable,
			Columns: []string{gym.AbonementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.UserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.UserRolesTable,
			Columns: []string{gym.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.ManagerRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.ManagerRolesTable,
			Columns: []string{gym.ManagerRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(managerrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.PaymentRequisiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   gym.PaymentRequisiteTable,
			Columns: []string{gym.PaymentRequisiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentrequisite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.payment_requisite_gym = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GymCreateBulk is the builder for creating many Gym entities in bulk.
type GymCreateBulk struct {
	config
	err      error
	builders []*GymCreate
}

// Save creates the Gym entities in the database.
func (gcb *GymCreateBulk) Save(ctx context.Context) ([]*Gym, error) {
	if gcb.err != nil {
		return nil, gcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Gym, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GymMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GymCreateBulk) SaveX(ctx context.Context) []*Gym {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GymCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GymCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
