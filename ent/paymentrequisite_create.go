// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gym-api/ent/gym"
	"gym-api/ent/paymentrequisite"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentRequisiteCreate is the builder for creating a PaymentRequisite entity.
type PaymentRequisiteCreate struct {
	config
	mutation *PaymentRequisiteMutation
	hooks    []Hook
}

// SetBankKard1 sets the "bank_kard_1" field.
func (prc *PaymentRequisiteCreate) SetBankKard1(s string) *PaymentRequisiteCreate {
	prc.mutation.SetBankKard1(s)
	return prc
}

// SetNillableBankKard1 sets the "bank_kard_1" field if the given value is not nil.
func (prc *PaymentRequisiteCreate) SetNillableBankKard1(s *string) *PaymentRequisiteCreate {
	if s != nil {
		prc.SetBankKard1(*s)
	}
	return prc
}

// SetBankKard2 sets the "bank_kard_2" field.
func (prc *PaymentRequisiteCreate) SetBankKard2(s string) *PaymentRequisiteCreate {
	prc.mutation.SetBankKard2(s)
	return prc
}

// SetNillableBankKard2 sets the "bank_kard_2" field if the given value is not nil.
func (prc *PaymentRequisiteCreate) SetNillableBankKard2(s *string) *PaymentRequisiteCreate {
	if s != nil {
		prc.SetBankKard2(*s)
	}
	return prc
}

// SetBankKard3 sets the "bank_kard_3" field.
func (prc *PaymentRequisiteCreate) SetBankKard3(s string) *PaymentRequisiteCreate {
	prc.mutation.SetBankKard3(s)
	return prc
}

// SetNillableBankKard3 sets the "bank_kard_3" field if the given value is not nil.
func (prc *PaymentRequisiteCreate) SetNillableBankKard3(s *string) *PaymentRequisiteCreate {
	if s != nil {
		prc.SetBankKard3(*s)
	}
	return prc
}

// SetBankKard4 sets the "bank_kard_4" field.
func (prc *PaymentRequisiteCreate) SetBankKard4(s string) *PaymentRequisiteCreate {
	prc.mutation.SetBankKard4(s)
	return prc
}

// SetNillableBankKard4 sets the "bank_kard_4" field if the given value is not nil.
func (prc *PaymentRequisiteCreate) SetNillableBankKard4(s *string) *PaymentRequisiteCreate {
	if s != nil {
		prc.SetBankKard4(*s)
	}
	return prc
}

// SetBankKard5 sets the "bank_kard_5" field.
func (prc *PaymentRequisiteCreate) SetBankKard5(s string) *PaymentRequisiteCreate {
	prc.mutation.SetBankKard5(s)
	return prc
}

// SetNillableBankKard5 sets the "bank_kard_5" field if the given value is not nil.
func (prc *PaymentRequisiteCreate) SetNillableBankKard5(s *string) *PaymentRequisiteCreate {
	if s != nil {
		prc.SetBankKard5(*s)
	}
	return prc
}

// SetNameBankKard1 sets the "name_bank_kard_1" field.
func (prc *PaymentRequisiteCreate) SetNameBankKard1(s string) *PaymentRequisiteCreate {
	prc.mutation.SetNameBankKard1(s)
	return prc
}

// SetNillableNameBankKard1 sets the "name_bank_kard_1" field if the given value is not nil.
func (prc *PaymentRequisiteCreate) SetNillableNameBankKard1(s *string) *PaymentRequisiteCreate {
	if s != nil {
		prc.SetNameBankKard1(*s)
	}
	return prc
}

// SetNameBankKard2 sets the "name_bank_kard_2" field.
func (prc *PaymentRequisiteCreate) SetNameBankKard2(s string) *PaymentRequisiteCreate {
	prc.mutation.SetNameBankKard2(s)
	return prc
}

// SetNillableNameBankKard2 sets the "name_bank_kard_2" field if the given value is not nil.
func (prc *PaymentRequisiteCreate) SetNillableNameBankKard2(s *string) *PaymentRequisiteCreate {
	if s != nil {
		prc.SetNameBankKard2(*s)
	}
	return prc
}

// SetNameBankKard3 sets the "name_bank_kard_3" field.
func (prc *PaymentRequisiteCreate) SetNameBankKard3(s string) *PaymentRequisiteCreate {
	prc.mutation.SetNameBankKard3(s)
	return prc
}

// SetNillableNameBankKard3 sets the "name_bank_kard_3" field if the given value is not nil.
func (prc *PaymentRequisiteCreate) SetNillableNameBankKard3(s *string) *PaymentRequisiteCreate {
	if s != nil {
		prc.SetNameBankKard3(*s)
	}
	return prc
}

// SetNameBankKard4 sets the "name_bank_kard_4" field.
func (prc *PaymentRequisiteCreate) SetNameBankKard4(s string) *PaymentRequisiteCreate {
	prc.mutation.SetNameBankKard4(s)
	return prc
}

// SetNillableNameBankKard4 sets the "name_bank_kard_4" field if the given value is not nil.
func (prc *PaymentRequisiteCreate) SetNillableNameBankKard4(s *string) *PaymentRequisiteCreate {
	if s != nil {
		prc.SetNameBankKard4(*s)
	}
	return prc
}

// SetNameBankKard5 sets the "name_bank_kard_5" field.
func (prc *PaymentRequisiteCreate) SetNameBankKard5(s string) *PaymentRequisiteCreate {
	prc.mutation.SetNameBankKard5(s)
	return prc
}

// SetNillableNameBankKard5 sets the "name_bank_kard_5" field if the given value is not nil.
func (prc *PaymentRequisiteCreate) SetNillableNameBankKard5(s *string) *PaymentRequisiteCreate {
	if s != nil {
		prc.SetNameBankKard5(*s)
	}
	return prc
}

// SetNameBank sets the "name_bank" field.
func (prc *PaymentRequisiteCreate) SetNameBank(s string) *PaymentRequisiteCreate {
	prc.mutation.SetNameBank(s)
	return prc
}

// SetNillableNameBank sets the "name_bank" field if the given value is not nil.
func (prc *PaymentRequisiteCreate) SetNillableNameBank(s *string) *PaymentRequisiteCreate {
	if s != nil {
		prc.SetNameBank(*s)
	}
	return prc
}

// SetIban sets the "iban" field.
func (prc *PaymentRequisiteCreate) SetIban(s string) *PaymentRequisiteCreate {
	prc.mutation.SetIban(s)
	return prc
}

// SetNillableIban sets the "iban" field if the given value is not nil.
func (prc *PaymentRequisiteCreate) SetNillableIban(s *string) *PaymentRequisiteCreate {
	if s != nil {
		prc.SetIban(*s)
	}
	return prc
}

// SetEdrpou sets the "edrpou" field.
func (prc *PaymentRequisiteCreate) SetEdrpou(s string) *PaymentRequisiteCreate {
	prc.mutation.SetEdrpou(s)
	return prc
}

// SetNillableEdrpou sets the "edrpou" field if the given value is not nil.
func (prc *PaymentRequisiteCreate) SetNillableEdrpou(s *string) *PaymentRequisiteCreate {
	if s != nil {
		prc.SetEdrpou(*s)
	}
	return prc
}

// SetReceiverName sets the "receiver_name" field.
func (prc *PaymentRequisiteCreate) SetReceiverName(s string) *PaymentRequisiteCreate {
	prc.mutation.SetReceiverName(s)
	return prc
}

// SetNillableReceiverName sets the "receiver_name" field if the given value is not nil.
func (prc *PaymentRequisiteCreate) SetNillableReceiverName(s *string) *PaymentRequisiteCreate {
	if s != nil {
		prc.SetReceiverName(*s)
	}
	return prc
}

// SetPaymentPurpose sets the "payment_purpose" field.
func (prc *PaymentRequisiteCreate) SetPaymentPurpose(s string) *PaymentRequisiteCreate {
	prc.mutation.SetPaymentPurpose(s)
	return prc
}

// SetNillablePaymentPurpose sets the "payment_purpose" field if the given value is not nil.
func (prc *PaymentRequisiteCreate) SetNillablePaymentPurpose(s *string) *PaymentRequisiteCreate {
	if s != nil {
		prc.SetPaymentPurpose(*s)
	}
	return prc
}

// SetMfo sets the "mfo" field.
func (prc *PaymentRequisiteCreate) SetMfo(s string) *PaymentRequisiteCreate {
	prc.mutation.SetMfo(s)
	return prc
}

// SetNillableMfo sets the "mfo" field if the given value is not nil.
func (prc *PaymentRequisiteCreate) SetNillableMfo(s *string) *PaymentRequisiteCreate {
	if s != nil {
		prc.SetMfo(*s)
	}
	return prc
}

// SetAccountNumber sets the "account_number" field.
func (prc *PaymentRequisiteCreate) SetAccountNumber(s string) *PaymentRequisiteCreate {
	prc.mutation.SetAccountNumber(s)
	return prc
}

// SetNillableAccountNumber sets the "account_number" field if the given value is not nil.
func (prc *PaymentRequisiteCreate) SetNillableAccountNumber(s *string) *PaymentRequisiteCreate {
	if s != nil {
		prc.SetAccountNumber(*s)
	}
	return prc
}

// SetGymID sets the "gym" edge to the Gym entity by ID.
func (prc *PaymentRequisiteCreate) SetGymID(id int) *PaymentRequisiteCreate {
	prc.mutation.SetGymID(id)
	return prc
}

// SetGym sets the "gym" edge to the Gym entity.
func (prc *PaymentRequisiteCreate) SetGym(g *Gym) *PaymentRequisiteCreate {
	return prc.SetGymID(g.ID)
}

// Mutation returns the PaymentRequisiteMutation object of the builder.
func (prc *PaymentRequisiteCreate) Mutation() *PaymentRequisiteMutation {
	return prc.mutation
}

// Save creates the PaymentRequisite in the database.
func (prc *PaymentRequisiteCreate) Save(ctx context.Context) (*PaymentRequisite, error) {
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PaymentRequisiteCreate) SaveX(ctx context.Context) *PaymentRequisite {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *PaymentRequisiteCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *PaymentRequisiteCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *PaymentRequisiteCreate) check() error {
	if len(prc.mutation.GymIDs()) == 0 {
		return &ValidationError{Name: "gym", err: errors.New(`ent: missing required edge "PaymentRequisite.gym"`)}
	}
	return nil
}

func (prc *PaymentRequisiteCreate) sqlSave(ctx context.Context) (*PaymentRequisite, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *PaymentRequisiteCreate) createSpec() (*PaymentRequisite, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentRequisite{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(paymentrequisite.Table, sqlgraph.NewFieldSpec(paymentrequisite.FieldID, field.TypeInt))
	)
	if value, ok := prc.mutation.BankKard1(); ok {
		_spec.SetField(paymentrequisite.FieldBankKard1, field.TypeString, value)
		_node.BankKard1 = value
	}
	if value, ok := prc.mutation.BankKard2(); ok {
		_spec.SetField(paymentrequisite.FieldBankKard2, field.TypeString, value)
		_node.BankKard2 = value
	}
	if value, ok := prc.mutation.BankKard3(); ok {
		_spec.SetField(paymentrequisite.FieldBankKard3, field.TypeString, value)
		_node.BankKard3 = value
	}
	if value, ok := prc.mutation.BankKard4(); ok {
		_spec.SetField(paymentrequisite.FieldBankKard4, field.TypeString, value)
		_node.BankKard4 = value
	}
	if value, ok := prc.mutation.BankKard5(); ok {
		_spec.SetField(paymentrequisite.FieldBankKard5, field.TypeString, value)
		_node.BankKard5 = value
	}
	if value, ok := prc.mutation.NameBankKard1(); ok {
		_spec.SetField(paymentrequisite.FieldNameBankKard1, field.TypeString, value)
		_node.NameBankKard1 = value
	}
	if value, ok := prc.mutation.NameBankKard2(); ok {
		_spec.SetField(paymentrequisite.FieldNameBankKard2, field.TypeString, value)
		_node.NameBankKard2 = value
	}
	if value, ok := prc.mutation.NameBankKard3(); ok {
		_spec.SetField(paymentrequisite.FieldNameBankKard3, field.TypeString, value)
		_node.NameBankKard3 = value
	}
	if value, ok := prc.mutation.NameBankKard4(); ok {
		_spec.SetField(paymentrequisite.FieldNameBankKard4, field.TypeString, value)
		_node.NameBankKard4 = value
	}
	if value, ok := prc.mutation.NameBankKard5(); ok {
		_spec.SetField(paymentrequisite.FieldNameBankKard5, field.TypeString, value)
		_node.NameBankKard5 = value
	}
	if value, ok := prc.mutation.NameBank(); ok {
		_spec.SetField(paymentrequisite.FieldNameBank, field.TypeString, value)
		_node.NameBank = value
	}
	if value, ok := prc.mutation.Iban(); ok {
		_spec.SetField(paymentrequisite.FieldIban, field.TypeString, value)
		_node.Iban = value
	}
	if value, ok := prc.mutation.Edrpou(); ok {
		_spec.SetField(paymentrequisite.FieldEdrpou, field.TypeString, value)
		_node.Edrpou = value
	}
	if value, ok := prc.mutation.ReceiverName(); ok {
		_spec.SetField(paymentrequisite.FieldReceiverName, field.TypeString, value)
		_node.ReceiverName = value
	}
	if value, ok := prc.mutation.PaymentPurpose(); ok {
		_spec.SetField(paymentrequisite.FieldPaymentPurpose, field.TypeString, value)
		_node.PaymentPurpose = value
	}
	if value, ok := prc.mutation.Mfo(); ok {
		_spec.SetField(paymentrequisite.FieldMfo, field.TypeString, value)
		_node.Mfo = value
	}
	if value, ok := prc.mutation.AccountNumber(); ok {
		_spec.SetField(paymentrequisite.FieldAccountNumber, field.TypeString, value)
		_node.AccountNumber = value
	}
	if nodes := prc.mutation.GymIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   paymentrequisite.GymTable,
			Columns: []string{paymentrequisite.GymColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PaymentRequisiteCreateBulk is the builder for creating many PaymentRequisite entities in bulk.
type PaymentRequisiteCreateBulk struct {
	config
	err      error
	builders []*PaymentRequisiteCreate
}

// Save creates the PaymentRequisite entities in the database.
func (prcb *PaymentRequisiteCreateBulk) Save(ctx context.Context) ([]*PaymentRequisite, error) {
	if prcb.err != nil {
		return nil, prcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PaymentRequisite, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentRequisiteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PaymentRequisiteCreateBulk) SaveX(ctx context.Context) []*PaymentRequisite {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *PaymentRequisiteCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *PaymentRequisiteCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}
