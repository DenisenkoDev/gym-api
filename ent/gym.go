// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gym-api/ent/gym"
	"gym-api/ent/paymentrequisite"
	"gym-api/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Gym is the model entity for the Gym schema.
type Gym struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CurrencyID holds the value of the "currency_id" field.
	CurrencyID int `json:"currency_id,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Mail holds the value of the "mail" field.
	Mail string `json:"mail,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// WebSite holds the value of the "web_site" field.
	WebSite string `json:"web_site,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GymQuery when eager-loading is set.
	Edges                 GymEdges `json:"edges"`
	payment_requisite_gym *int
	user_owned_gyms       *int
	selectValues          sql.SelectValues
}

// GymEdges holds the relations/edges for other nodes in the graph.
type GymEdges struct {
	// Visitors holds the value of the visitors edge.
	Visitors []*User `json:"visitors,omitempty"`
	// Managers holds the value of the managers edge.
	Managers []*User `json:"managers,omitempty"`
	// AbonementType holds the value of the abonement_type edge.
	AbonementType []*AbonementType `json:"abonement_type,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Abonements holds the value of the abonements edge.
	Abonements []*Abonement `json:"abonements,omitempty"`
	// UserRoles holds the value of the user_roles edge.
	UserRoles []*UserRole `json:"user_roles,omitempty"`
	// ManagerRoles holds the value of the manager_roles edge.
	ManagerRoles []*ManagerRole `json:"manager_roles,omitempty"`
	// PaymentRequisite holds the value of the payment_requisite edge.
	PaymentRequisite *PaymentRequisite `json:"payment_requisite,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// VisitorsOrErr returns the Visitors value or an error if the edge
// was not loaded in eager-loading.
func (e GymEdges) VisitorsOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Visitors, nil
	}
	return nil, &NotLoadedError{edge: "visitors"}
}

// ManagersOrErr returns the Managers value or an error if the edge
// was not loaded in eager-loading.
func (e GymEdges) ManagersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Managers, nil
	}
	return nil, &NotLoadedError{edge: "managers"}
}

// AbonementTypeOrErr returns the AbonementType value or an error if the edge
// was not loaded in eager-loading.
func (e GymEdges) AbonementTypeOrErr() ([]*AbonementType, error) {
	if e.loadedTypes[2] {
		return e.AbonementType, nil
	}
	return nil, &NotLoadedError{edge: "abonement_type"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GymEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// AbonementsOrErr returns the Abonements value or an error if the edge
// was not loaded in eager-loading.
func (e GymEdges) AbonementsOrErr() ([]*Abonement, error) {
	if e.loadedTypes[4] {
		return e.Abonements, nil
	}
	return nil, &NotLoadedError{edge: "abonements"}
}

// UserRolesOrErr returns the UserRoles value or an error if the edge
// was not loaded in eager-loading.
func (e GymEdges) UserRolesOrErr() ([]*UserRole, error) {
	if e.loadedTypes[5] {
		return e.UserRoles, nil
	}
	return nil, &NotLoadedError{edge: "user_roles"}
}

// ManagerRolesOrErr returns the ManagerRoles value or an error if the edge
// was not loaded in eager-loading.
func (e GymEdges) ManagerRolesOrErr() ([]*ManagerRole, error) {
	if e.loadedTypes[6] {
		return e.ManagerRoles, nil
	}
	return nil, &NotLoadedError{edge: "manager_roles"}
}

// PaymentRequisiteOrErr returns the PaymentRequisite value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GymEdges) PaymentRequisiteOrErr() (*PaymentRequisite, error) {
	if e.PaymentRequisite != nil {
		return e.PaymentRequisite, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: paymentrequisite.Label}
	}
	return nil, &NotLoadedError{edge: "payment_requisite"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Gym) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gym.FieldID, gym.FieldCurrencyID:
			values[i] = new(sql.NullInt64)
		case gym.FieldName, gym.FieldPhone, gym.FieldMail, gym.FieldAddress, gym.FieldWebSite, gym.FieldDescription:
			values[i] = new(sql.NullString)
		case gym.FieldCreatedAt, gym.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case gym.ForeignKeys[0]: // payment_requisite_gym
			values[i] = new(sql.NullInt64)
		case gym.ForeignKeys[1]: // user_owned_gyms
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Gym fields.
func (gy *Gym) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gym.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gy.ID = int(value.Int64)
		case gym.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gy.Name = value.String
			}
		case gym.FieldCurrencyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field currency_id", values[i])
			} else if value.Valid {
				gy.CurrencyID = int(value.Int64)
			}
		case gym.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				gy.Phone = value.String
			}
		case gym.FieldMail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mail", values[i])
			} else if value.Valid {
				gy.Mail = value.String
			}
		case gym.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				gy.Address = value.String
			}
		case gym.FieldWebSite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field web_site", values[i])
			} else if value.Valid {
				gy.WebSite = value.String
			}
		case gym.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				gy.Description = value.String
			}
		case gym.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gy.CreatedAt = value.Time
			}
		case gym.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gy.UpdatedAt = value.Time
			}
		case gym.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field payment_requisite_gym", value)
			} else if value.Valid {
				gy.payment_requisite_gym = new(int)
				*gy.payment_requisite_gym = int(value.Int64)
			}
		case gym.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_owned_gyms", value)
			} else if value.Valid {
				gy.user_owned_gyms = new(int)
				*gy.user_owned_gyms = int(value.Int64)
			}
		default:
			gy.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Gym.
// This includes values selected through modifiers, order, etc.
func (gy *Gym) Value(name string) (ent.Value, error) {
	return gy.selectValues.Get(name)
}

// QueryVisitors queries the "visitors" edge of the Gym entity.
func (gy *Gym) QueryVisitors() *UserQuery {
	return NewGymClient(gy.config).QueryVisitors(gy)
}

// QueryManagers queries the "managers" edge of the Gym entity.
func (gy *Gym) QueryManagers() *UserQuery {
	return NewGymClient(gy.config).QueryManagers(gy)
}

// QueryAbonementType queries the "abonement_type" edge of the Gym entity.
func (gy *Gym) QueryAbonementType() *AbonementTypeQuery {
	return NewGymClient(gy.config).QueryAbonementType(gy)
}

// QueryOwner queries the "owner" edge of the Gym entity.
func (gy *Gym) QueryOwner() *UserQuery {
	return NewGymClient(gy.config).QueryOwner(gy)
}

// QueryAbonements queries the "abonements" edge of the Gym entity.
func (gy *Gym) QueryAbonements() *AbonementQuery {
	return NewGymClient(gy.config).QueryAbonements(gy)
}

// QueryUserRoles queries the "user_roles" edge of the Gym entity.
func (gy *Gym) QueryUserRoles() *UserRoleQuery {
	return NewGymClient(gy.config).QueryUserRoles(gy)
}

// QueryManagerRoles queries the "manager_roles" edge of the Gym entity.
func (gy *Gym) QueryManagerRoles() *ManagerRoleQuery {
	return NewGymClient(gy.config).QueryManagerRoles(gy)
}

// QueryPaymentRequisite queries the "payment_requisite" edge of the Gym entity.
func (gy *Gym) QueryPaymentRequisite() *PaymentRequisiteQuery {
	return NewGymClient(gy.config).QueryPaymentRequisite(gy)
}

// Update returns a builder for updating this Gym.
// Note that you need to call Gym.Unwrap() before calling this method if this Gym
// was returned from a transaction, and the transaction was committed or rolled back.
func (gy *Gym) Update() *GymUpdateOne {
	return NewGymClient(gy.config).UpdateOne(gy)
}

// Unwrap unwraps the Gym entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gy *Gym) Unwrap() *Gym {
	_tx, ok := gy.config.driver.(*txDriver)
	if !ok {
		panic("ent: Gym is not a transactional entity")
	}
	gy.config.driver = _tx.drv
	return gy
}

// String implements the fmt.Stringer.
func (gy *Gym) String() string {
	var builder strings.Builder
	builder.WriteString("Gym(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gy.ID))
	builder.WriteString("name=")
	builder.WriteString(gy.Name)
	builder.WriteString(", ")
	builder.WriteString("currency_id=")
	builder.WriteString(fmt.Sprintf("%v", gy.CurrencyID))
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(gy.Phone)
	builder.WriteString(", ")
	builder.WriteString("mail=")
	builder.WriteString(gy.Mail)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(gy.Address)
	builder.WriteString(", ")
	builder.WriteString("web_site=")
	builder.WriteString(gy.WebSite)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(gy.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(gy.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(gy.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Gyms is a parsable slice of Gym.
type Gyms []*Gym
