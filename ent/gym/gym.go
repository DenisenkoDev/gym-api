// Code generated by ent, DO NOT EDIT.

package gym

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the gym type in the database.
	Label = "gym"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCurrencyID holds the string denoting the currency_id field in the database.
	FieldCurrencyID = "currency_id"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldMail holds the string denoting the mail field in the database.
	FieldMail = "mail"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldWebSite holds the string denoting the web_site field in the database.
	FieldWebSite = "web_site"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeVisitors holds the string denoting the visitors edge name in mutations.
	EdgeVisitors = "visitors"
	// EdgeManagers holds the string denoting the managers edge name in mutations.
	EdgeManagers = "managers"
	// EdgeAbonementType holds the string denoting the abonement_type edge name in mutations.
	EdgeAbonementType = "abonement_type"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeAbonements holds the string denoting the abonements edge name in mutations.
	EdgeAbonements = "abonements"
	// EdgeUserRoles holds the string denoting the user_roles edge name in mutations.
	EdgeUserRoles = "user_roles"
	// EdgeManagerRoles holds the string denoting the manager_roles edge name in mutations.
	EdgeManagerRoles = "manager_roles"
	// EdgePaymentRequisite holds the string denoting the payment_requisite edge name in mutations.
	EdgePaymentRequisite = "payment_requisite"
	// Table holds the table name of the gym in the database.
	Table = "gyms"
	// VisitorsTable is the table that holds the visitors relation/edge. The primary key declared below.
	VisitorsTable = "gym_visitors"
	// VisitorsInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	VisitorsInverseTable = "users"
	// ManagersTable is the table that holds the managers relation/edge. The primary key declared below.
	ManagersTable = "gym_managers"
	// ManagersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ManagersInverseTable = "users"
	// AbonementTypeTable is the table that holds the abonement_type relation/edge.
	AbonementTypeTable = "abonement_types"
	// AbonementTypeInverseTable is the table name for the AbonementType entity.
	// It exists in this package in order to avoid circular dependency with the "abonementtype" package.
	AbonementTypeInverseTable = "abonement_types"
	// AbonementTypeColumn is the table column denoting the abonement_type relation/edge.
	AbonementTypeColumn = "abonement_type_gym"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "gyms"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_owned_gyms"
	// AbonementsTable is the table that holds the abonements relation/edge.
	AbonementsTable = "abonements"
	// AbonementsInverseTable is the table name for the Abonement entity.
	// It exists in this package in order to avoid circular dependency with the "abonement" package.
	AbonementsInverseTable = "abonements"
	// AbonementsColumn is the table column denoting the abonements relation/edge.
	AbonementsColumn = "abonement_gym"
	// UserRolesTable is the table that holds the user_roles relation/edge.
	UserRolesTable = "user_roles"
	// UserRolesInverseTable is the table name for the UserRole entity.
	// It exists in this package in order to avoid circular dependency with the "userrole" package.
	UserRolesInverseTable = "user_roles"
	// UserRolesColumn is the table column denoting the user_roles relation/edge.
	UserRolesColumn = "user_role_gym"
	// ManagerRolesTable is the table that holds the manager_roles relation/edge.
	ManagerRolesTable = "manager_roles"
	// ManagerRolesInverseTable is the table name for the ManagerRole entity.
	// It exists in this package in order to avoid circular dependency with the "managerrole" package.
	ManagerRolesInverseTable = "manager_roles"
	// ManagerRolesColumn is the table column denoting the manager_roles relation/edge.
	ManagerRolesColumn = "manager_role_gym"
	// PaymentRequisiteTable is the table that holds the payment_requisite relation/edge.
	PaymentRequisiteTable = "gyms"
	// PaymentRequisiteInverseTable is the table name for the PaymentRequisite entity.
	// It exists in this package in order to avoid circular dependency with the "paymentrequisite" package.
	PaymentRequisiteInverseTable = "payment_requisites"
	// PaymentRequisiteColumn is the table column denoting the payment_requisite relation/edge.
	PaymentRequisiteColumn = "payment_requisite_gym"
)

// Columns holds all SQL columns for gym fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCurrencyID,
	FieldPhone,
	FieldMail,
	FieldAddress,
	FieldWebSite,
	FieldDescription,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "gyms"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"payment_requisite_gym",
	"user_owned_gyms",
}

var (
	// VisitorsPrimaryKey and VisitorsColumn2 are the table columns denoting the
	// primary key for the visitors relation (M2M).
	VisitorsPrimaryKey = []string{"gym_id", "user_id"}
	// ManagersPrimaryKey and ManagersColumn2 are the table columns denoting the
	// primary key for the managers relation (M2M).
	ManagersPrimaryKey = []string{"gym_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCurrencyID holds the default value on creation for the "currency_id" field.
	DefaultCurrencyID int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Gym queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCurrencyID orders the results by the currency_id field.
func ByCurrencyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrencyID, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByMail orders the results by the mail field.
func ByMail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMail, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByWebSite orders the results by the web_site field.
func ByWebSite(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebSite, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByVisitorsCount orders the results by visitors count.
func ByVisitorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVisitorsStep(), opts...)
	}
}

// ByVisitors orders the results by visitors terms.
func ByVisitors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVisitorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByManagersCount orders the results by managers count.
func ByManagersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newManagersStep(), opts...)
	}
}

// ByManagers orders the results by managers terms.
func ByManagers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newManagersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAbonementTypeCount orders the results by abonement_type count.
func ByAbonementTypeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAbonementTypeStep(), opts...)
	}
}

// ByAbonementType orders the results by abonement_type terms.
func ByAbonementType(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAbonementTypeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByAbonementsCount orders the results by abonements count.
func ByAbonementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAbonementsStep(), opts...)
	}
}

// ByAbonements orders the results by abonements terms.
func ByAbonements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAbonementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserRolesCount orders the results by user_roles count.
func ByUserRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserRolesStep(), opts...)
	}
}

// ByUserRoles orders the results by user_roles terms.
func ByUserRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByManagerRolesCount orders the results by manager_roles count.
func ByManagerRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newManagerRolesStep(), opts...)
	}
}

// ByManagerRoles orders the results by manager_roles terms.
func ByManagerRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newManagerRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPaymentRequisiteField orders the results by payment_requisite field.
func ByPaymentRequisiteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaymentRequisiteStep(), sql.OrderByField(field, opts...))
	}
}
func newVisitorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VisitorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, VisitorsTable, VisitorsPrimaryKey...),
	)
}
func newManagersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ManagersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ManagersTable, ManagersPrimaryKey...),
	)
}
func newAbonementTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AbonementTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, AbonementTypeTable, AbonementTypeColumn),
	)
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newAbonementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AbonementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, AbonementsTable, AbonementsColumn),
	)
}
func newUserRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserRolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, UserRolesTable, UserRolesColumn),
	)
}
func newManagerRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ManagerRolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ManagerRolesTable, ManagerRolesColumn),
	)
}
func newPaymentRequisiteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaymentRequisiteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, PaymentRequisiteTable, PaymentRequisiteColumn),
	)
}
