// Code generated by ent, DO NOT EDIT.

package gym

import (
	"gym-api/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Gym {
	return predicate.Gym(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Gym {
	return predicate.Gym(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Gym {
	return predicate.Gym(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Gym {
	return predicate.Gym(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Gym {
	return predicate.Gym(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Gym {
	return predicate.Gym(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Gym {
	return predicate.Gym(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Gym {
	return predicate.Gym(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Gym {
	return predicate.Gym(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Gym {
	return predicate.Gym(sql.FieldEQ(FieldName, v))
}

// CurrencyID applies equality check predicate on the "currency_id" field. It's identical to CurrencyIDEQ.
func CurrencyID(v int) predicate.Gym {
	return predicate.Gym(sql.FieldEQ(FieldCurrencyID, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Gym {
	return predicate.Gym(sql.FieldEQ(FieldPhone, v))
}

// Mail applies equality check predicate on the "mail" field. It's identical to MailEQ.
func Mail(v string) predicate.Gym {
	return predicate.Gym(sql.FieldEQ(FieldMail, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Gym {
	return predicate.Gym(sql.FieldEQ(FieldAddress, v))
}

// WebSite applies equality check predicate on the "web_site" field. It's identical to WebSiteEQ.
func WebSite(v string) predicate.Gym {
	return predicate.Gym(sql.FieldEQ(FieldWebSite, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Gym {
	return predicate.Gym(sql.FieldEQ(FieldDescription, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Gym {
	return predicate.Gym(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Gym {
	return predicate.Gym(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Gym {
	return predicate.Gym(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Gym {
	return predicate.Gym(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Gym {
	return predicate.Gym(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Gym {
	return predicate.Gym(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Gym {
	return predicate.Gym(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Gym {
	return predicate.Gym(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Gym {
	return predicate.Gym(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Gym {
	return predicate.Gym(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Gym {
	return predicate.Gym(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Gym {
	return predicate.Gym(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Gym {
	return predicate.Gym(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Gym {
	return predicate.Gym(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Gym {
	return predicate.Gym(sql.FieldContainsFold(FieldName, v))
}

// CurrencyIDEQ applies the EQ predicate on the "currency_id" field.
func CurrencyIDEQ(v int) predicate.Gym {
	return predicate.Gym(sql.FieldEQ(FieldCurrencyID, v))
}

// CurrencyIDNEQ applies the NEQ predicate on the "currency_id" field.
func CurrencyIDNEQ(v int) predicate.Gym {
	return predicate.Gym(sql.FieldNEQ(FieldCurrencyID, v))
}

// CurrencyIDIn applies the In predicate on the "currency_id" field.
func CurrencyIDIn(vs ...int) predicate.Gym {
	return predicate.Gym(sql.FieldIn(FieldCurrencyID, vs...))
}

// CurrencyIDNotIn applies the NotIn predicate on the "currency_id" field.
func CurrencyIDNotIn(vs ...int) predicate.Gym {
	return predicate.Gym(sql.FieldNotIn(FieldCurrencyID, vs...))
}

// CurrencyIDGT applies the GT predicate on the "currency_id" field.
func CurrencyIDGT(v int) predicate.Gym {
	return predicate.Gym(sql.FieldGT(FieldCurrencyID, v))
}

// CurrencyIDGTE applies the GTE predicate on the "currency_id" field.
func CurrencyIDGTE(v int) predicate.Gym {
	return predicate.Gym(sql.FieldGTE(FieldCurrencyID, v))
}

// CurrencyIDLT applies the LT predicate on the "currency_id" field.
func CurrencyIDLT(v int) predicate.Gym {
	return predicate.Gym(sql.FieldLT(FieldCurrencyID, v))
}

// CurrencyIDLTE applies the LTE predicate on the "currency_id" field.
func CurrencyIDLTE(v int) predicate.Gym {
	return predicate.Gym(sql.FieldLTE(FieldCurrencyID, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Gym {
	return predicate.Gym(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Gym {
	return predicate.Gym(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Gym {
	return predicate.Gym(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Gym {
	return predicate.Gym(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Gym {
	return predicate.Gym(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Gym {
	return predicate.Gym(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Gym {
	return predicate.Gym(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Gym {
	return predicate.Gym(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Gym {
	return predicate.Gym(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Gym {
	return predicate.Gym(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Gym {
	return predicate.Gym(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Gym {
	return predicate.Gym(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Gym {
	return predicate.Gym(sql.FieldContainsFold(FieldPhone, v))
}

// MailEQ applies the EQ predicate on the "mail" field.
func MailEQ(v string) predicate.Gym {
	return predicate.Gym(sql.FieldEQ(FieldMail, v))
}

// MailNEQ applies the NEQ predicate on the "mail" field.
func MailNEQ(v string) predicate.Gym {
	return predicate.Gym(sql.FieldNEQ(FieldMail, v))
}

// MailIn applies the In predicate on the "mail" field.
func MailIn(vs ...string) predicate.Gym {
	return predicate.Gym(sql.FieldIn(FieldMail, vs...))
}

// MailNotIn applies the NotIn predicate on the "mail" field.
func MailNotIn(vs ...string) predicate.Gym {
	return predicate.Gym(sql.FieldNotIn(FieldMail, vs...))
}

// MailGT applies the GT predicate on the "mail" field.
func MailGT(v string) predicate.Gym {
	return predicate.Gym(sql.FieldGT(FieldMail, v))
}

// MailGTE applies the GTE predicate on the "mail" field.
func MailGTE(v string) predicate.Gym {
	return predicate.Gym(sql.FieldGTE(FieldMail, v))
}

// MailLT applies the LT predicate on the "mail" field.
func MailLT(v string) predicate.Gym {
	return predicate.Gym(sql.FieldLT(FieldMail, v))
}

// MailLTE applies the LTE predicate on the "mail" field.
func MailLTE(v string) predicate.Gym {
	return predicate.Gym(sql.FieldLTE(FieldMail, v))
}

// MailContains applies the Contains predicate on the "mail" field.
func MailContains(v string) predicate.Gym {
	return predicate.Gym(sql.FieldContains(FieldMail, v))
}

// MailHasPrefix applies the HasPrefix predicate on the "mail" field.
func MailHasPrefix(v string) predicate.Gym {
	return predicate.Gym(sql.FieldHasPrefix(FieldMail, v))
}

// MailHasSuffix applies the HasSuffix predicate on the "mail" field.
func MailHasSuffix(v string) predicate.Gym {
	return predicate.Gym(sql.FieldHasSuffix(FieldMail, v))
}

// MailEqualFold applies the EqualFold predicate on the "mail" field.
func MailEqualFold(v string) predicate.Gym {
	return predicate.Gym(sql.FieldEqualFold(FieldMail, v))
}

// MailContainsFold applies the ContainsFold predicate on the "mail" field.
func MailContainsFold(v string) predicate.Gym {
	return predicate.Gym(sql.FieldContainsFold(FieldMail, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Gym {
	return predicate.Gym(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Gym {
	return predicate.Gym(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Gym {
	return predicate.Gym(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Gym {
	return predicate.Gym(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Gym {
	return predicate.Gym(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Gym {
	return predicate.Gym(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Gym {
	return predicate.Gym(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Gym {
	return predicate.Gym(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Gym {
	return predicate.Gym(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Gym {
	return predicate.Gym(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Gym {
	return predicate.Gym(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.Gym {
	return predicate.Gym(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.Gym {
	return predicate.Gym(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Gym {
	return predicate.Gym(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Gym {
	return predicate.Gym(sql.FieldContainsFold(FieldAddress, v))
}

// WebSiteEQ applies the EQ predicate on the "web_site" field.
func WebSiteEQ(v string) predicate.Gym {
	return predicate.Gym(sql.FieldEQ(FieldWebSite, v))
}

// WebSiteNEQ applies the NEQ predicate on the "web_site" field.
func WebSiteNEQ(v string) predicate.Gym {
	return predicate.Gym(sql.FieldNEQ(FieldWebSite, v))
}

// WebSiteIn applies the In predicate on the "web_site" field.
func WebSiteIn(vs ...string) predicate.Gym {
	return predicate.Gym(sql.FieldIn(FieldWebSite, vs...))
}

// WebSiteNotIn applies the NotIn predicate on the "web_site" field.
func WebSiteNotIn(vs ...string) predicate.Gym {
	return predicate.Gym(sql.FieldNotIn(FieldWebSite, vs...))
}

// WebSiteGT applies the GT predicate on the "web_site" field.
func WebSiteGT(v string) predicate.Gym {
	return predicate.Gym(sql.FieldGT(FieldWebSite, v))
}

// WebSiteGTE applies the GTE predicate on the "web_site" field.
func WebSiteGTE(v string) predicate.Gym {
	return predicate.Gym(sql.FieldGTE(FieldWebSite, v))
}

// WebSiteLT applies the LT predicate on the "web_site" field.
func WebSiteLT(v string) predicate.Gym {
	return predicate.Gym(sql.FieldLT(FieldWebSite, v))
}

// WebSiteLTE applies the LTE predicate on the "web_site" field.
func WebSiteLTE(v string) predicate.Gym {
	return predicate.Gym(sql.FieldLTE(FieldWebSite, v))
}

// WebSiteContains applies the Contains predicate on the "web_site" field.
func WebSiteContains(v string) predicate.Gym {
	return predicate.Gym(sql.FieldContains(FieldWebSite, v))
}

// WebSiteHasPrefix applies the HasPrefix predicate on the "web_site" field.
func WebSiteHasPrefix(v string) predicate.Gym {
	return predicate.Gym(sql.FieldHasPrefix(FieldWebSite, v))
}

// WebSiteHasSuffix applies the HasSuffix predicate on the "web_site" field.
func WebSiteHasSuffix(v string) predicate.Gym {
	return predicate.Gym(sql.FieldHasSuffix(FieldWebSite, v))
}

// WebSiteIsNil applies the IsNil predicate on the "web_site" field.
func WebSiteIsNil() predicate.Gym {
	return predicate.Gym(sql.FieldIsNull(FieldWebSite))
}

// WebSiteNotNil applies the NotNil predicate on the "web_site" field.
func WebSiteNotNil() predicate.Gym {
	return predicate.Gym(sql.FieldNotNull(FieldWebSite))
}

// WebSiteEqualFold applies the EqualFold predicate on the "web_site" field.
func WebSiteEqualFold(v string) predicate.Gym {
	return predicate.Gym(sql.FieldEqualFold(FieldWebSite, v))
}

// WebSiteContainsFold applies the ContainsFold predicate on the "web_site" field.
func WebSiteContainsFold(v string) predicate.Gym {
	return predicate.Gym(sql.FieldContainsFold(FieldWebSite, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Gym {
	return predicate.Gym(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Gym {
	return predicate.Gym(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Gym {
	return predicate.Gym(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Gym {
	return predicate.Gym(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Gym {
	return predicate.Gym(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Gym {
	return predicate.Gym(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Gym {
	return predicate.Gym(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Gym {
	return predicate.Gym(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Gym {
	return predicate.Gym(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Gym {
	return predicate.Gym(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Gym {
	return predicate.Gym(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Gym {
	return predicate.Gym(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Gym {
	return predicate.Gym(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Gym {
	return predicate.Gym(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Gym {
	return predicate.Gym(sql.FieldContainsFold(FieldDescription, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Gym {
	return predicate.Gym(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Gym {
	return predicate.Gym(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Gym {
	return predicate.Gym(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Gym {
	return predicate.Gym(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Gym {
	return predicate.Gym(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Gym {
	return predicate.Gym(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Gym {
	return predicate.Gym(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Gym {
	return predicate.Gym(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Gym {
	return predicate.Gym(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Gym {
	return predicate.Gym(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Gym {
	return predicate.Gym(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Gym {
	return predicate.Gym(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Gym {
	return predicate.Gym(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Gym {
	return predicate.Gym(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Gym {
	return predicate.Gym(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Gym {
	return predicate.Gym(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Gym {
	return predicate.Gym(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Gym {
	return predicate.Gym(sql.FieldNotNull(FieldUpdatedAt))
}

// HasVisitors applies the HasEdge predicate on the "visitors" edge.
func HasVisitors() predicate.Gym {
	return predicate.Gym(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, VisitorsTable, VisitorsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVisitorsWith applies the HasEdge predicate on the "visitors" edge with a given conditions (other predicates).
func HasVisitorsWith(preds ...predicate.User) predicate.Gym {
	return predicate.Gym(func(s *sql.Selector) {
		step := newVisitorsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasManagers applies the HasEdge predicate on the "managers" edge.
func HasManagers() predicate.Gym {
	return predicate.Gym(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ManagersTable, ManagersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasManagersWith applies the HasEdge predicate on the "managers" edge with a given conditions (other predicates).
func HasManagersWith(preds ...predicate.User) predicate.Gym {
	return predicate.Gym(func(s *sql.Selector) {
		step := newManagersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAbonementType applies the HasEdge predicate on the "abonement_type" edge.
func HasAbonementType() predicate.Gym {
	return predicate.Gym(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, AbonementTypeTable, AbonementTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAbonementTypeWith applies the HasEdge predicate on the "abonement_type" edge with a given conditions (other predicates).
func HasAbonementTypeWith(preds ...predicate.AbonementType) predicate.Gym {
	return predicate.Gym(func(s *sql.Selector) {
		step := newAbonementTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Gym {
	return predicate.Gym(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Gym {
	return predicate.Gym(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAbonements applies the HasEdge predicate on the "abonements" edge.
func HasAbonements() predicate.Gym {
	return predicate.Gym(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, AbonementsTable, AbonementsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAbonementsWith applies the HasEdge predicate on the "abonements" edge with a given conditions (other predicates).
func HasAbonementsWith(preds ...predicate.Abonement) predicate.Gym {
	return predicate.Gym(func(s *sql.Selector) {
		step := newAbonementsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserRoles applies the HasEdge predicate on the "user_roles" edge.
func HasUserRoles() predicate.Gym {
	return predicate.Gym(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UserRolesTable, UserRolesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserRolesWith applies the HasEdge predicate on the "user_roles" edge with a given conditions (other predicates).
func HasUserRolesWith(preds ...predicate.UserRole) predicate.Gym {
	return predicate.Gym(func(s *sql.Selector) {
		step := newUserRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasManagerRoles applies the HasEdge predicate on the "manager_roles" edge.
func HasManagerRoles() predicate.Gym {
	return predicate.Gym(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ManagerRolesTable, ManagerRolesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasManagerRolesWith applies the HasEdge predicate on the "manager_roles" edge with a given conditions (other predicates).
func HasManagerRolesWith(preds ...predicate.ManagerRole) predicate.Gym {
	return predicate.Gym(func(s *sql.Selector) {
		step := newManagerRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPaymentRequisite applies the HasEdge predicate on the "payment_requisite" edge.
func HasPaymentRequisite() predicate.Gym {
	return predicate.Gym(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, PaymentRequisiteTable, PaymentRequisiteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentRequisiteWith applies the HasEdge predicate on the "payment_requisite" edge with a given conditions (other predicates).
func HasPaymentRequisiteWith(preds ...predicate.PaymentRequisite) predicate.Gym {
	return predicate.Gym(func(s *sql.Selector) {
		step := newPaymentRequisiteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Gym) predicate.Gym {
	return predicate.Gym(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Gym) predicate.Gym {
	return predicate.Gym(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Gym) predicate.Gym {
	return predicate.Gym(sql.NotPredicates(p))
}
