// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gym-api/ent/abonement"
	"gym-api/ent/abonementtype"
	"gym-api/ent/gym"
	"gym-api/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Abonement is the model entity for the Abonement schema.
type Abonement struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// DurationMonths holds the value of the "duration_months" field.
	DurationMonths int `json:"duration_months,omitempty"`
	// ExpirationDate holds the value of the "expiration_date" field.
	ExpirationDate time.Time `json:"expiration_date,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// PaidUntil holds the value of the "paid_until" field.
	PaidUntil time.Time `json:"paid_until,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// IsPaid holds the value of the "is_paid" field.
	IsPaid bool `json:"is_paid,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AbonementQuery when eager-loading is set.
	Edges                    AbonementEdges `json:"edges"`
	abonement_coach          *int
	abonement_gym            *int
	abonement_type_abonement *int
	user_abonements          *int
	selectValues             sql.SelectValues
}

// AbonementEdges holds the relations/edges for other nodes in the graph.
type AbonementEdges struct {
	// Payments holds the value of the payments edge.
	Payments []*Payment `json:"payments,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Coach holds the value of the coach edge.
	Coach *User `json:"coach,omitempty"`
	// Gym holds the value of the gym edge.
	Gym *Gym `json:"gym,omitempty"`
	// Type holds the value of the type edge.
	Type *AbonementType `json:"type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// PaymentsOrErr returns the Payments value or an error if the edge
// was not loaded in eager-loading.
func (e AbonementEdges) PaymentsOrErr() ([]*Payment, error) {
	if e.loadedTypes[0] {
		return e.Payments, nil
	}
	return nil, &NotLoadedError{edge: "payments"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AbonementEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CoachOrErr returns the Coach value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AbonementEdges) CoachOrErr() (*User, error) {
	if e.Coach != nil {
		return e.Coach, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "coach"}
}

// GymOrErr returns the Gym value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AbonementEdges) GymOrErr() (*Gym, error) {
	if e.Gym != nil {
		return e.Gym, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: gym.Label}
	}
	return nil, &NotLoadedError{edge: "gym"}
}

// TypeOrErr returns the Type value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AbonementEdges) TypeOrErr() (*AbonementType, error) {
	if e.Type != nil {
		return e.Type, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: abonementtype.Label}
	}
	return nil, &NotLoadedError{edge: "type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Abonement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case abonement.FieldIsActive, abonement.FieldIsPaid:
			values[i] = new(sql.NullBool)
		case abonement.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case abonement.FieldID, abonement.FieldDurationMonths:
			values[i] = new(sql.NullInt64)
		case abonement.FieldName:
			values[i] = new(sql.NullString)
		case abonement.FieldExpirationDate, abonement.FieldCreatedAt, abonement.FieldUpdatedAt, abonement.FieldPaidUntil:
			values[i] = new(sql.NullTime)
		case abonement.ForeignKeys[0]: // abonement_coach
			values[i] = new(sql.NullInt64)
		case abonement.ForeignKeys[1]: // abonement_gym
			values[i] = new(sql.NullInt64)
		case abonement.ForeignKeys[2]: // abonement_type_abonement
			values[i] = new(sql.NullInt64)
		case abonement.ForeignKeys[3]: // user_abonements
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Abonement fields.
func (a *Abonement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case abonement.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case abonement.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case abonement.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				a.Price = value.Float64
			}
		case abonement.FieldDurationMonths:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_months", values[i])
			} else if value.Valid {
				a.DurationMonths = int(value.Int64)
			}
		case abonement.FieldExpirationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiration_date", values[i])
			} else if value.Valid {
				a.ExpirationDate = value.Time
			}
		case abonement.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case abonement.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case abonement.FieldPaidUntil:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field paid_until", values[i])
			} else if value.Valid {
				a.PaidUntil = value.Time
			}
		case abonement.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				a.IsActive = value.Bool
			}
		case abonement.FieldIsPaid:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_paid", values[i])
			} else if value.Valid {
				a.IsPaid = value.Bool
			}
		case abonement.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field abonement_coach", value)
			} else if value.Valid {
				a.abonement_coach = new(int)
				*a.abonement_coach = int(value.Int64)
			}
		case abonement.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field abonement_gym", value)
			} else if value.Valid {
				a.abonement_gym = new(int)
				*a.abonement_gym = int(value.Int64)
			}
		case abonement.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field abonement_type_abonement", value)
			} else if value.Valid {
				a.abonement_type_abonement = new(int)
				*a.abonement_type_abonement = int(value.Int64)
			}
		case abonement.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_abonements", value)
			} else if value.Valid {
				a.user_abonements = new(int)
				*a.user_abonements = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Abonement.
// This includes values selected through modifiers, order, etc.
func (a *Abonement) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryPayments queries the "payments" edge of the Abonement entity.
func (a *Abonement) QueryPayments() *PaymentQuery {
	return NewAbonementClient(a.config).QueryPayments(a)
}

// QueryUser queries the "user" edge of the Abonement entity.
func (a *Abonement) QueryUser() *UserQuery {
	return NewAbonementClient(a.config).QueryUser(a)
}

// QueryCoach queries the "coach" edge of the Abonement entity.
func (a *Abonement) QueryCoach() *UserQuery {
	return NewAbonementClient(a.config).QueryCoach(a)
}

// QueryGym queries the "gym" edge of the Abonement entity.
func (a *Abonement) QueryGym() *GymQuery {
	return NewAbonementClient(a.config).QueryGym(a)
}

// QueryType queries the "type" edge of the Abonement entity.
func (a *Abonement) QueryType() *AbonementTypeQuery {
	return NewAbonementClient(a.config).QueryType(a)
}

// Update returns a builder for updating this Abonement.
// Note that you need to call Abonement.Unwrap() before calling this method if this Abonement
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Abonement) Update() *AbonementUpdateOne {
	return NewAbonementClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Abonement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Abonement) Unwrap() *Abonement {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Abonement is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Abonement) String() string {
	var builder strings.Builder
	builder.WriteString("Abonement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", a.Price))
	builder.WriteString(", ")
	builder.WriteString("duration_months=")
	builder.WriteString(fmt.Sprintf("%v", a.DurationMonths))
	builder.WriteString(", ")
	builder.WriteString("expiration_date=")
	builder.WriteString(a.ExpirationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("paid_until=")
	builder.WriteString(a.PaidUntil.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", a.IsActive))
	builder.WriteString(", ")
	builder.WriteString("is_paid=")
	builder.WriteString(fmt.Sprintf("%v", a.IsPaid))
	builder.WriteByte(')')
	return builder.String()
}

// Abonements is a parsable slice of Abonement.
type Abonements []*Abonement
