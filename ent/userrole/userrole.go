// Code generated by ent, DO NOT EDIT.

package userrole

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userrole type in the database.
	Label = "user_role"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserRole holds the string denoting the user_role field in the database.
	FieldUserRole = "user_role"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldIsClose holds the string denoting the is_close field in the database.
	FieldIsClose = "is_close"
	// EdgeGym holds the string denoting the gym edge name in mutations.
	EdgeGym = "gym"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the userrole in the database.
	Table = "user_roles"
	// GymTable is the table that holds the gym relation/edge.
	GymTable = "user_roles"
	// GymInverseTable is the table name for the Gym entity.
	// It exists in this package in order to avoid circular dependency with the "gym" package.
	GymInverseTable = "gyms"
	// GymColumn is the table column denoting the gym relation/edge.
	GymColumn = "user_role_gym"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_roles"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_role_user"
)

// Columns holds all SQL columns for userrole fields.
var Columns = []string{
	FieldID,
	FieldUserRole,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldIsClose,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_roles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_role_gym",
	"user_role_user",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultIsClose holds the default value on creation for the "is_close" field.
	DefaultIsClose bool
)

// UserRole defines the type for the "user_role" enum field.
type UserRole string

// UserRole values.
const (
	UserRoleVisitor UserRole = "visitor"
	UserRoleManager UserRole = "manager"
	UserRoleOwner   UserRole = "owner"
)

func (ur UserRole) String() string {
	return string(ur)
}

// UserRoleValidator is a validator for the "user_role" field enum values. It is called by the builders before save.
func UserRoleValidator(ur UserRole) error {
	switch ur {
	case UserRoleVisitor, UserRoleManager, UserRoleOwner:
		return nil
	default:
		return fmt.Errorf("userrole: invalid enum value for user_role field: %q", ur)
	}
}

// OrderOption defines the ordering options for the UserRole queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserRole orders the results by the user_role field.
func ByUserRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserRole, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByIsClose orders the results by the is_close field.
func ByIsClose(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsClose, opts...).ToFunc()
}

// ByGymField orders the results by gym field.
func ByGymField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGymStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newGymStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GymInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, GymTable, GymColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
