// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gym-api/ent/abonement"
	"gym-api/ent/abonementtype"
	"gym-api/ent/gym"
	"gym-api/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AbonementTypeUpdate is the builder for updating AbonementType entities.
type AbonementTypeUpdate struct {
	config
	hooks    []Hook
	mutation *AbonementTypeMutation
}

// Where appends a list predicates to the AbonementTypeUpdate builder.
func (atu *AbonementTypeUpdate) Where(ps ...predicate.AbonementType) *AbonementTypeUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetName sets the "name" field.
func (atu *AbonementTypeUpdate) SetName(s string) *AbonementTypeUpdate {
	atu.mutation.SetName(s)
	return atu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (atu *AbonementTypeUpdate) SetNillableName(s *string) *AbonementTypeUpdate {
	if s != nil {
		atu.SetName(*s)
	}
	return atu
}

// SetCreatedAt sets the "created_at" field.
func (atu *AbonementTypeUpdate) SetCreatedAt(t time.Time) *AbonementTypeUpdate {
	atu.mutation.SetCreatedAt(t)
	return atu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atu *AbonementTypeUpdate) SetNillableCreatedAt(t *time.Time) *AbonementTypeUpdate {
	if t != nil {
		atu.SetCreatedAt(*t)
	}
	return atu
}

// SetGymID sets the "gym" edge to the Gym entity by ID.
func (atu *AbonementTypeUpdate) SetGymID(id int) *AbonementTypeUpdate {
	atu.mutation.SetGymID(id)
	return atu
}

// SetGym sets the "gym" edge to the Gym entity.
func (atu *AbonementTypeUpdate) SetGym(g *Gym) *AbonementTypeUpdate {
	return atu.SetGymID(g.ID)
}

// AddAbonementIDs adds the "abonement" edge to the Abonement entity by IDs.
func (atu *AbonementTypeUpdate) AddAbonementIDs(ids ...int) *AbonementTypeUpdate {
	atu.mutation.AddAbonementIDs(ids...)
	return atu
}

// AddAbonement adds the "abonement" edges to the Abonement entity.
func (atu *AbonementTypeUpdate) AddAbonement(a ...*Abonement) *AbonementTypeUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atu.AddAbonementIDs(ids...)
}

// Mutation returns the AbonementTypeMutation object of the builder.
func (atu *AbonementTypeUpdate) Mutation() *AbonementTypeMutation {
	return atu.mutation
}

// ClearGym clears the "gym" edge to the Gym entity.
func (atu *AbonementTypeUpdate) ClearGym() *AbonementTypeUpdate {
	atu.mutation.ClearGym()
	return atu
}

// ClearAbonement clears all "abonement" edges to the Abonement entity.
func (atu *AbonementTypeUpdate) ClearAbonement() *AbonementTypeUpdate {
	atu.mutation.ClearAbonement()
	return atu
}

// RemoveAbonementIDs removes the "abonement" edge to Abonement entities by IDs.
func (atu *AbonementTypeUpdate) RemoveAbonementIDs(ids ...int) *AbonementTypeUpdate {
	atu.mutation.RemoveAbonementIDs(ids...)
	return atu
}

// RemoveAbonement removes "abonement" edges to Abonement entities.
func (atu *AbonementTypeUpdate) RemoveAbonement(a ...*Abonement) *AbonementTypeUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atu.RemoveAbonementIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *AbonementTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, atu.sqlSave, atu.mutation, atu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atu *AbonementTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *AbonementTypeUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *AbonementTypeUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atu *AbonementTypeUpdate) check() error {
	if atu.mutation.GymCleared() && len(atu.mutation.GymIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AbonementType.gym"`)
	}
	return nil
}

func (atu *AbonementTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := atu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(abonementtype.Table, abonementtype.Columns, sqlgraph.NewFieldSpec(abonementtype.FieldID, field.TypeInt))
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.Name(); ok {
		_spec.SetField(abonementtype.FieldName, field.TypeString, value)
	}
	if value, ok := atu.mutation.CreatedAt(); ok {
		_spec.SetField(abonementtype.FieldCreatedAt, field.TypeTime, value)
	}
	if atu.mutation.GymCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abonementtype.GymTable,
			Columns: []string{abonementtype.GymColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.GymIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abonementtype.GymTable,
			Columns: []string{abonementtype.GymColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.AbonementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   abonementtype.AbonementTable,
			Columns: []string{abonementtype.AbonementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.RemovedAbonementIDs(); len(nodes) > 0 && !atu.mutation.AbonementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   abonementtype.AbonementTable,
			Columns: []string{abonementtype.AbonementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.AbonementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   abonementtype.AbonementTable,
			Columns: []string{abonementtype.AbonementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abonementtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atu.mutation.done = true
	return n, nil
}

// AbonementTypeUpdateOne is the builder for updating a single AbonementType entity.
type AbonementTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AbonementTypeMutation
}

// SetName sets the "name" field.
func (atuo *AbonementTypeUpdateOne) SetName(s string) *AbonementTypeUpdateOne {
	atuo.mutation.SetName(s)
	return atuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (atuo *AbonementTypeUpdateOne) SetNillableName(s *string) *AbonementTypeUpdateOne {
	if s != nil {
		atuo.SetName(*s)
	}
	return atuo
}

// SetCreatedAt sets the "created_at" field.
func (atuo *AbonementTypeUpdateOne) SetCreatedAt(t time.Time) *AbonementTypeUpdateOne {
	atuo.mutation.SetCreatedAt(t)
	return atuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atuo *AbonementTypeUpdateOne) SetNillableCreatedAt(t *time.Time) *AbonementTypeUpdateOne {
	if t != nil {
		atuo.SetCreatedAt(*t)
	}
	return atuo
}

// SetGymID sets the "gym" edge to the Gym entity by ID.
func (atuo *AbonementTypeUpdateOne) SetGymID(id int) *AbonementTypeUpdateOne {
	atuo.mutation.SetGymID(id)
	return atuo
}

// SetGym sets the "gym" edge to the Gym entity.
func (atuo *AbonementTypeUpdateOne) SetGym(g *Gym) *AbonementTypeUpdateOne {
	return atuo.SetGymID(g.ID)
}

// AddAbonementIDs adds the "abonement" edge to the Abonement entity by IDs.
func (atuo *AbonementTypeUpdateOne) AddAbonementIDs(ids ...int) *AbonementTypeUpdateOne {
	atuo.mutation.AddAbonementIDs(ids...)
	return atuo
}

// AddAbonement adds the "abonement" edges to the Abonement entity.
func (atuo *AbonementTypeUpdateOne) AddAbonement(a ...*Abonement) *AbonementTypeUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atuo.AddAbonementIDs(ids...)
}

// Mutation returns the AbonementTypeMutation object of the builder.
func (atuo *AbonementTypeUpdateOne) Mutation() *AbonementTypeMutation {
	return atuo.mutation
}

// ClearGym clears the "gym" edge to the Gym entity.
func (atuo *AbonementTypeUpdateOne) ClearGym() *AbonementTypeUpdateOne {
	atuo.mutation.ClearGym()
	return atuo
}

// ClearAbonement clears all "abonement" edges to the Abonement entity.
func (atuo *AbonementTypeUpdateOne) ClearAbonement() *AbonementTypeUpdateOne {
	atuo.mutation.ClearAbonement()
	return atuo
}

// RemoveAbonementIDs removes the "abonement" edge to Abonement entities by IDs.
func (atuo *AbonementTypeUpdateOne) RemoveAbonementIDs(ids ...int) *AbonementTypeUpdateOne {
	atuo.mutation.RemoveAbonementIDs(ids...)
	return atuo
}

// RemoveAbonement removes "abonement" edges to Abonement entities.
func (atuo *AbonementTypeUpdateOne) RemoveAbonement(a ...*Abonement) *AbonementTypeUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atuo.RemoveAbonementIDs(ids...)
}

// Where appends a list predicates to the AbonementTypeUpdate builder.
func (atuo *AbonementTypeUpdateOne) Where(ps ...predicate.AbonementType) *AbonementTypeUpdateOne {
	atuo.mutation.Where(ps...)
	return atuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *AbonementTypeUpdateOne) Select(field string, fields ...string) *AbonementTypeUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated AbonementType entity.
func (atuo *AbonementTypeUpdateOne) Save(ctx context.Context) (*AbonementType, error) {
	return withHooks(ctx, atuo.sqlSave, atuo.mutation, atuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *AbonementTypeUpdateOne) SaveX(ctx context.Context) *AbonementType {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *AbonementTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *AbonementTypeUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atuo *AbonementTypeUpdateOne) check() error {
	if atuo.mutation.GymCleared() && len(atuo.mutation.GymIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AbonementType.gym"`)
	}
	return nil
}

func (atuo *AbonementTypeUpdateOne) sqlSave(ctx context.Context) (_node *AbonementType, err error) {
	if err := atuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(abonementtype.Table, abonementtype.Columns, sqlgraph.NewFieldSpec(abonementtype.FieldID, field.TypeInt))
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AbonementType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, abonementtype.FieldID)
		for _, f := range fields {
			if !abonementtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != abonementtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.Name(); ok {
		_spec.SetField(abonementtype.FieldName, field.TypeString, value)
	}
	if value, ok := atuo.mutation.CreatedAt(); ok {
		_spec.SetField(abonementtype.FieldCreatedAt, field.TypeTime, value)
	}
	if atuo.mutation.GymCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abonementtype.GymTable,
			Columns: []string{abonementtype.GymColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.GymIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abonementtype.GymTable,
			Columns: []string{abonementtype.GymColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.AbonementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   abonementtype.AbonementTable,
			Columns: []string{abonementtype.AbonementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.RemovedAbonementIDs(); len(nodes) > 0 && !atuo.mutation.AbonementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   abonementtype.AbonementTable,
			Columns: []string{abonementtype.AbonementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.AbonementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   abonementtype.AbonementTable,
			Columns: []string{abonementtype.AbonementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AbonementType{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abonementtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atuo.mutation.done = true
	return _node, nil
}
