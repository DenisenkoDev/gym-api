// Code generated by ent, DO NOT EDIT.

package paymentrequisite

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the paymentrequisite type in the database.
	Label = "payment_requisite"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBankKard1 holds the string denoting the bank_kard_1 field in the database.
	FieldBankKard1 = "bank_kard_1"
	// FieldBankKard2 holds the string denoting the bank_kard_2 field in the database.
	FieldBankKard2 = "bank_kard_2"
	// FieldBankKard3 holds the string denoting the bank_kard_3 field in the database.
	FieldBankKard3 = "bank_kard_3"
	// FieldBankKard4 holds the string denoting the bank_kard_4 field in the database.
	FieldBankKard4 = "bank_kard_4"
	// FieldBankKard5 holds the string denoting the bank_kard_5 field in the database.
	FieldBankKard5 = "bank_kard_5"
	// FieldNameBankKard1 holds the string denoting the name_bank_kard_1 field in the database.
	FieldNameBankKard1 = "name_bank_kard_1"
	// FieldNameBankKard2 holds the string denoting the name_bank_kard_2 field in the database.
	FieldNameBankKard2 = "name_bank_kard_2"
	// FieldNameBankKard3 holds the string denoting the name_bank_kard_3 field in the database.
	FieldNameBankKard3 = "name_bank_kard_3"
	// FieldNameBankKard4 holds the string denoting the name_bank_kard_4 field in the database.
	FieldNameBankKard4 = "name_bank_kard_4"
	// FieldNameBankKard5 holds the string denoting the name_bank_kard_5 field in the database.
	FieldNameBankKard5 = "name_bank_kard_5"
	// FieldNameBank holds the string denoting the name_bank field in the database.
	FieldNameBank = "name_bank"
	// FieldIban holds the string denoting the iban field in the database.
	FieldIban = "iban"
	// FieldEdrpou holds the string denoting the edrpou field in the database.
	FieldEdrpou = "edrpou"
	// FieldReceiverName holds the string denoting the receiver_name field in the database.
	FieldReceiverName = "receiver_name"
	// FieldPaymentPurpose holds the string denoting the payment_purpose field in the database.
	FieldPaymentPurpose = "payment_purpose"
	// FieldMfo holds the string denoting the mfo field in the database.
	FieldMfo = "mfo"
	// FieldAccountNumber holds the string denoting the account_number field in the database.
	FieldAccountNumber = "account_number"
	// EdgeGym holds the string denoting the gym edge name in mutations.
	EdgeGym = "gym"
	// Table holds the table name of the paymentrequisite in the database.
	Table = "payment_requisites"
	// GymTable is the table that holds the gym relation/edge.
	GymTable = "gyms"
	// GymInverseTable is the table name for the Gym entity.
	// It exists in this package in order to avoid circular dependency with the "gym" package.
	GymInverseTable = "gyms"
	// GymColumn is the table column denoting the gym relation/edge.
	GymColumn = "payment_requisite_gym"
)

// Columns holds all SQL columns for paymentrequisite fields.
var Columns = []string{
	FieldID,
	FieldBankKard1,
	FieldBankKard2,
	FieldBankKard3,
	FieldBankKard4,
	FieldBankKard5,
	FieldNameBankKard1,
	FieldNameBankKard2,
	FieldNameBankKard3,
	FieldNameBankKard4,
	FieldNameBankKard5,
	FieldNameBank,
	FieldIban,
	FieldEdrpou,
	FieldReceiverName,
	FieldPaymentPurpose,
	FieldMfo,
	FieldAccountNumber,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PaymentRequisite queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBankKard1 orders the results by the bank_kard_1 field.
func ByBankKard1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBankKard1, opts...).ToFunc()
}

// ByBankKard2 orders the results by the bank_kard_2 field.
func ByBankKard2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBankKard2, opts...).ToFunc()
}

// ByBankKard3 orders the results by the bank_kard_3 field.
func ByBankKard3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBankKard3, opts...).ToFunc()
}

// ByBankKard4 orders the results by the bank_kard_4 field.
func ByBankKard4(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBankKard4, opts...).ToFunc()
}

// ByBankKard5 orders the results by the bank_kard_5 field.
func ByBankKard5(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBankKard5, opts...).ToFunc()
}

// ByNameBankKard1 orders the results by the name_bank_kard_1 field.
func ByNameBankKard1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameBankKard1, opts...).ToFunc()
}

// ByNameBankKard2 orders the results by the name_bank_kard_2 field.
func ByNameBankKard2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameBankKard2, opts...).ToFunc()
}

// ByNameBankKard3 orders the results by the name_bank_kard_3 field.
func ByNameBankKard3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameBankKard3, opts...).ToFunc()
}

// ByNameBankKard4 orders the results by the name_bank_kard_4 field.
func ByNameBankKard4(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameBankKard4, opts...).ToFunc()
}

// ByNameBankKard5 orders the results by the name_bank_kard_5 field.
func ByNameBankKard5(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameBankKard5, opts...).ToFunc()
}

// ByNameBank orders the results by the name_bank field.
func ByNameBank(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameBank, opts...).ToFunc()
}

// ByIban orders the results by the iban field.
func ByIban(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIban, opts...).ToFunc()
}

// ByEdrpou orders the results by the edrpou field.
func ByEdrpou(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEdrpou, opts...).ToFunc()
}

// ByReceiverName orders the results by the receiver_name field.
func ByReceiverName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceiverName, opts...).ToFunc()
}

// ByPaymentPurpose orders the results by the payment_purpose field.
func ByPaymentPurpose(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentPurpose, opts...).ToFunc()
}

// ByMfo orders the results by the mfo field.
func ByMfo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMfo, opts...).ToFunc()
}

// ByAccountNumber orders the results by the account_number field.
func ByAccountNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountNumber, opts...).ToFunc()
}

// ByGymField orders the results by gym field.
func ByGymField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGymStep(), sql.OrderByField(field, opts...))
	}
}
func newGymStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GymInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, GymTable, GymColumn),
	)
}
