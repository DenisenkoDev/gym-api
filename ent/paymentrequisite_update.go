// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gym-api/ent/gym"
	"gym-api/ent/paymentrequisite"
	"gym-api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentRequisiteUpdate is the builder for updating PaymentRequisite entities.
type PaymentRequisiteUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentRequisiteMutation
}

// Where appends a list predicates to the PaymentRequisiteUpdate builder.
func (pru *PaymentRequisiteUpdate) Where(ps ...predicate.PaymentRequisite) *PaymentRequisiteUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetBankKard1 sets the "bank_kard_1" field.
func (pru *PaymentRequisiteUpdate) SetBankKard1(s string) *PaymentRequisiteUpdate {
	pru.mutation.SetBankKard1(s)
	return pru
}

// SetNillableBankKard1 sets the "bank_kard_1" field if the given value is not nil.
func (pru *PaymentRequisiteUpdate) SetNillableBankKard1(s *string) *PaymentRequisiteUpdate {
	if s != nil {
		pru.SetBankKard1(*s)
	}
	return pru
}

// ClearBankKard1 clears the value of the "bank_kard_1" field.
func (pru *PaymentRequisiteUpdate) ClearBankKard1() *PaymentRequisiteUpdate {
	pru.mutation.ClearBankKard1()
	return pru
}

// SetBankKard2 sets the "bank_kard_2" field.
func (pru *PaymentRequisiteUpdate) SetBankKard2(s string) *PaymentRequisiteUpdate {
	pru.mutation.SetBankKard2(s)
	return pru
}

// SetNillableBankKard2 sets the "bank_kard_2" field if the given value is not nil.
func (pru *PaymentRequisiteUpdate) SetNillableBankKard2(s *string) *PaymentRequisiteUpdate {
	if s != nil {
		pru.SetBankKard2(*s)
	}
	return pru
}

// ClearBankKard2 clears the value of the "bank_kard_2" field.
func (pru *PaymentRequisiteUpdate) ClearBankKard2() *PaymentRequisiteUpdate {
	pru.mutation.ClearBankKard2()
	return pru
}

// SetBankKard3 sets the "bank_kard_3" field.
func (pru *PaymentRequisiteUpdate) SetBankKard3(s string) *PaymentRequisiteUpdate {
	pru.mutation.SetBankKard3(s)
	return pru
}

// SetNillableBankKard3 sets the "bank_kard_3" field if the given value is not nil.
func (pru *PaymentRequisiteUpdate) SetNillableBankKard3(s *string) *PaymentRequisiteUpdate {
	if s != nil {
		pru.SetBankKard3(*s)
	}
	return pru
}

// ClearBankKard3 clears the value of the "bank_kard_3" field.
func (pru *PaymentRequisiteUpdate) ClearBankKard3() *PaymentRequisiteUpdate {
	pru.mutation.ClearBankKard3()
	return pru
}

// SetBankKard4 sets the "bank_kard_4" field.
func (pru *PaymentRequisiteUpdate) SetBankKard4(s string) *PaymentRequisiteUpdate {
	pru.mutation.SetBankKard4(s)
	return pru
}

// SetNillableBankKard4 sets the "bank_kard_4" field if the given value is not nil.
func (pru *PaymentRequisiteUpdate) SetNillableBankKard4(s *string) *PaymentRequisiteUpdate {
	if s != nil {
		pru.SetBankKard4(*s)
	}
	return pru
}

// ClearBankKard4 clears the value of the "bank_kard_4" field.
func (pru *PaymentRequisiteUpdate) ClearBankKard4() *PaymentRequisiteUpdate {
	pru.mutation.ClearBankKard4()
	return pru
}

// SetBankKard5 sets the "bank_kard_5" field.
func (pru *PaymentRequisiteUpdate) SetBankKard5(s string) *PaymentRequisiteUpdate {
	pru.mutation.SetBankKard5(s)
	return pru
}

// SetNillableBankKard5 sets the "bank_kard_5" field if the given value is not nil.
func (pru *PaymentRequisiteUpdate) SetNillableBankKard5(s *string) *PaymentRequisiteUpdate {
	if s != nil {
		pru.SetBankKard5(*s)
	}
	return pru
}

// ClearBankKard5 clears the value of the "bank_kard_5" field.
func (pru *PaymentRequisiteUpdate) ClearBankKard5() *PaymentRequisiteUpdate {
	pru.mutation.ClearBankKard5()
	return pru
}

// SetNameBankKard1 sets the "name_bank_kard_1" field.
func (pru *PaymentRequisiteUpdate) SetNameBankKard1(s string) *PaymentRequisiteUpdate {
	pru.mutation.SetNameBankKard1(s)
	return pru
}

// SetNillableNameBankKard1 sets the "name_bank_kard_1" field if the given value is not nil.
func (pru *PaymentRequisiteUpdate) SetNillableNameBankKard1(s *string) *PaymentRequisiteUpdate {
	if s != nil {
		pru.SetNameBankKard1(*s)
	}
	return pru
}

// ClearNameBankKard1 clears the value of the "name_bank_kard_1" field.
func (pru *PaymentRequisiteUpdate) ClearNameBankKard1() *PaymentRequisiteUpdate {
	pru.mutation.ClearNameBankKard1()
	return pru
}

// SetNameBankKard2 sets the "name_bank_kard_2" field.
func (pru *PaymentRequisiteUpdate) SetNameBankKard2(s string) *PaymentRequisiteUpdate {
	pru.mutation.SetNameBankKard2(s)
	return pru
}

// SetNillableNameBankKard2 sets the "name_bank_kard_2" field if the given value is not nil.
func (pru *PaymentRequisiteUpdate) SetNillableNameBankKard2(s *string) *PaymentRequisiteUpdate {
	if s != nil {
		pru.SetNameBankKard2(*s)
	}
	return pru
}

// ClearNameBankKard2 clears the value of the "name_bank_kard_2" field.
func (pru *PaymentRequisiteUpdate) ClearNameBankKard2() *PaymentRequisiteUpdate {
	pru.mutation.ClearNameBankKard2()
	return pru
}

// SetNameBankKard3 sets the "name_bank_kard_3" field.
func (pru *PaymentRequisiteUpdate) SetNameBankKard3(s string) *PaymentRequisiteUpdate {
	pru.mutation.SetNameBankKard3(s)
	return pru
}

// SetNillableNameBankKard3 sets the "name_bank_kard_3" field if the given value is not nil.
func (pru *PaymentRequisiteUpdate) SetNillableNameBankKard3(s *string) *PaymentRequisiteUpdate {
	if s != nil {
		pru.SetNameBankKard3(*s)
	}
	return pru
}

// ClearNameBankKard3 clears the value of the "name_bank_kard_3" field.
func (pru *PaymentRequisiteUpdate) ClearNameBankKard3() *PaymentRequisiteUpdate {
	pru.mutation.ClearNameBankKard3()
	return pru
}

// SetNameBankKard4 sets the "name_bank_kard_4" field.
func (pru *PaymentRequisiteUpdate) SetNameBankKard4(s string) *PaymentRequisiteUpdate {
	pru.mutation.SetNameBankKard4(s)
	return pru
}

// SetNillableNameBankKard4 sets the "name_bank_kard_4" field if the given value is not nil.
func (pru *PaymentRequisiteUpdate) SetNillableNameBankKard4(s *string) *PaymentRequisiteUpdate {
	if s != nil {
		pru.SetNameBankKard4(*s)
	}
	return pru
}

// ClearNameBankKard4 clears the value of the "name_bank_kard_4" field.
func (pru *PaymentRequisiteUpdate) ClearNameBankKard4() *PaymentRequisiteUpdate {
	pru.mutation.ClearNameBankKard4()
	return pru
}

// SetNameBankKard5 sets the "name_bank_kard_5" field.
func (pru *PaymentRequisiteUpdate) SetNameBankKard5(s string) *PaymentRequisiteUpdate {
	pru.mutation.SetNameBankKard5(s)
	return pru
}

// SetNillableNameBankKard5 sets the "name_bank_kard_5" field if the given value is not nil.
func (pru *PaymentRequisiteUpdate) SetNillableNameBankKard5(s *string) *PaymentRequisiteUpdate {
	if s != nil {
		pru.SetNameBankKard5(*s)
	}
	return pru
}

// ClearNameBankKard5 clears the value of the "name_bank_kard_5" field.
func (pru *PaymentRequisiteUpdate) ClearNameBankKard5() *PaymentRequisiteUpdate {
	pru.mutation.ClearNameBankKard5()
	return pru
}

// SetNameBank sets the "name_bank" field.
func (pru *PaymentRequisiteUpdate) SetNameBank(s string) *PaymentRequisiteUpdate {
	pru.mutation.SetNameBank(s)
	return pru
}

// SetNillableNameBank sets the "name_bank" field if the given value is not nil.
func (pru *PaymentRequisiteUpdate) SetNillableNameBank(s *string) *PaymentRequisiteUpdate {
	if s != nil {
		pru.SetNameBank(*s)
	}
	return pru
}

// ClearNameBank clears the value of the "name_bank" field.
func (pru *PaymentRequisiteUpdate) ClearNameBank() *PaymentRequisiteUpdate {
	pru.mutation.ClearNameBank()
	return pru
}

// SetIban sets the "iban" field.
func (pru *PaymentRequisiteUpdate) SetIban(s string) *PaymentRequisiteUpdate {
	pru.mutation.SetIban(s)
	return pru
}

// SetNillableIban sets the "iban" field if the given value is not nil.
func (pru *PaymentRequisiteUpdate) SetNillableIban(s *string) *PaymentRequisiteUpdate {
	if s != nil {
		pru.SetIban(*s)
	}
	return pru
}

// ClearIban clears the value of the "iban" field.
func (pru *PaymentRequisiteUpdate) ClearIban() *PaymentRequisiteUpdate {
	pru.mutation.ClearIban()
	return pru
}

// SetEdrpou sets the "edrpou" field.
func (pru *PaymentRequisiteUpdate) SetEdrpou(s string) *PaymentRequisiteUpdate {
	pru.mutation.SetEdrpou(s)
	return pru
}

// SetNillableEdrpou sets the "edrpou" field if the given value is not nil.
func (pru *PaymentRequisiteUpdate) SetNillableEdrpou(s *string) *PaymentRequisiteUpdate {
	if s != nil {
		pru.SetEdrpou(*s)
	}
	return pru
}

// ClearEdrpou clears the value of the "edrpou" field.
func (pru *PaymentRequisiteUpdate) ClearEdrpou() *PaymentRequisiteUpdate {
	pru.mutation.ClearEdrpou()
	return pru
}

// SetReceiverName sets the "receiver_name" field.
func (pru *PaymentRequisiteUpdate) SetReceiverName(s string) *PaymentRequisiteUpdate {
	pru.mutation.SetReceiverName(s)
	return pru
}

// SetNillableReceiverName sets the "receiver_name" field if the given value is not nil.
func (pru *PaymentRequisiteUpdate) SetNillableReceiverName(s *string) *PaymentRequisiteUpdate {
	if s != nil {
		pru.SetReceiverName(*s)
	}
	return pru
}

// ClearReceiverName clears the value of the "receiver_name" field.
func (pru *PaymentRequisiteUpdate) ClearReceiverName() *PaymentRequisiteUpdate {
	pru.mutation.ClearReceiverName()
	return pru
}

// SetPaymentPurpose sets the "payment_purpose" field.
func (pru *PaymentRequisiteUpdate) SetPaymentPurpose(s string) *PaymentRequisiteUpdate {
	pru.mutation.SetPaymentPurpose(s)
	return pru
}

// SetNillablePaymentPurpose sets the "payment_purpose" field if the given value is not nil.
func (pru *PaymentRequisiteUpdate) SetNillablePaymentPurpose(s *string) *PaymentRequisiteUpdate {
	if s != nil {
		pru.SetPaymentPurpose(*s)
	}
	return pru
}

// ClearPaymentPurpose clears the value of the "payment_purpose" field.
func (pru *PaymentRequisiteUpdate) ClearPaymentPurpose() *PaymentRequisiteUpdate {
	pru.mutation.ClearPaymentPurpose()
	return pru
}

// SetMfo sets the "mfo" field.
func (pru *PaymentRequisiteUpdate) SetMfo(s string) *PaymentRequisiteUpdate {
	pru.mutation.SetMfo(s)
	return pru
}

// SetNillableMfo sets the "mfo" field if the given value is not nil.
func (pru *PaymentRequisiteUpdate) SetNillableMfo(s *string) *PaymentRequisiteUpdate {
	if s != nil {
		pru.SetMfo(*s)
	}
	return pru
}

// ClearMfo clears the value of the "mfo" field.
func (pru *PaymentRequisiteUpdate) ClearMfo() *PaymentRequisiteUpdate {
	pru.mutation.ClearMfo()
	return pru
}

// SetAccountNumber sets the "account_number" field.
func (pru *PaymentRequisiteUpdate) SetAccountNumber(s string) *PaymentRequisiteUpdate {
	pru.mutation.SetAccountNumber(s)
	return pru
}

// SetNillableAccountNumber sets the "account_number" field if the given value is not nil.
func (pru *PaymentRequisiteUpdate) SetNillableAccountNumber(s *string) *PaymentRequisiteUpdate {
	if s != nil {
		pru.SetAccountNumber(*s)
	}
	return pru
}

// ClearAccountNumber clears the value of the "account_number" field.
func (pru *PaymentRequisiteUpdate) ClearAccountNumber() *PaymentRequisiteUpdate {
	pru.mutation.ClearAccountNumber()
	return pru
}

// SetGymID sets the "gym" edge to the Gym entity by ID.
func (pru *PaymentRequisiteUpdate) SetGymID(id int) *PaymentRequisiteUpdate {
	pru.mutation.SetGymID(id)
	return pru
}

// SetGym sets the "gym" edge to the Gym entity.
func (pru *PaymentRequisiteUpdate) SetGym(g *Gym) *PaymentRequisiteUpdate {
	return pru.SetGymID(g.ID)
}

// Mutation returns the PaymentRequisiteMutation object of the builder.
func (pru *PaymentRequisiteUpdate) Mutation() *PaymentRequisiteMutation {
	return pru.mutation
}

// ClearGym clears the "gym" edge to the Gym entity.
func (pru *PaymentRequisiteUpdate) ClearGym() *PaymentRequisiteUpdate {
	pru.mutation.ClearGym()
	return pru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PaymentRequisiteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PaymentRequisiteUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PaymentRequisiteUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PaymentRequisiteUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pru *PaymentRequisiteUpdate) check() error {
	if pru.mutation.GymCleared() && len(pru.mutation.GymIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PaymentRequisite.gym"`)
	}
	return nil
}

func (pru *PaymentRequisiteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentrequisite.Table, paymentrequisite.Columns, sqlgraph.NewFieldSpec(paymentrequisite.FieldID, field.TypeInt))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.BankKard1(); ok {
		_spec.SetField(paymentrequisite.FieldBankKard1, field.TypeString, value)
	}
	if pru.mutation.BankKard1Cleared() {
		_spec.ClearField(paymentrequisite.FieldBankKard1, field.TypeString)
	}
	if value, ok := pru.mutation.BankKard2(); ok {
		_spec.SetField(paymentrequisite.FieldBankKard2, field.TypeString, value)
	}
	if pru.mutation.BankKard2Cleared() {
		_spec.ClearField(paymentrequisite.FieldBankKard2, field.TypeString)
	}
	if value, ok := pru.mutation.BankKard3(); ok {
		_spec.SetField(paymentrequisite.FieldBankKard3, field.TypeString, value)
	}
	if pru.mutation.BankKard3Cleared() {
		_spec.ClearField(paymentrequisite.FieldBankKard3, field.TypeString)
	}
	if value, ok := pru.mutation.BankKard4(); ok {
		_spec.SetField(paymentrequisite.FieldBankKard4, field.TypeString, value)
	}
	if pru.mutation.BankKard4Cleared() {
		_spec.ClearField(paymentrequisite.FieldBankKard4, field.TypeString)
	}
	if value, ok := pru.mutation.BankKard5(); ok {
		_spec.SetField(paymentrequisite.FieldBankKard5, field.TypeString, value)
	}
	if pru.mutation.BankKard5Cleared() {
		_spec.ClearField(paymentrequisite.FieldBankKard5, field.TypeString)
	}
	if value, ok := pru.mutation.NameBankKard1(); ok {
		_spec.SetField(paymentrequisite.FieldNameBankKard1, field.TypeString, value)
	}
	if pru.mutation.NameBankKard1Cleared() {
		_spec.ClearField(paymentrequisite.FieldNameBankKard1, field.TypeString)
	}
	if value, ok := pru.mutation.NameBankKard2(); ok {
		_spec.SetField(paymentrequisite.FieldNameBankKard2, field.TypeString, value)
	}
	if pru.mutation.NameBankKard2Cleared() {
		_spec.ClearField(paymentrequisite.FieldNameBankKard2, field.TypeString)
	}
	if value, ok := pru.mutation.NameBankKard3(); ok {
		_spec.SetField(paymentrequisite.FieldNameBankKard3, field.TypeString, value)
	}
	if pru.mutation.NameBankKard3Cleared() {
		_spec.ClearField(paymentrequisite.FieldNameBankKard3, field.TypeString)
	}
	if value, ok := pru.mutation.NameBankKard4(); ok {
		_spec.SetField(paymentrequisite.FieldNameBankKard4, field.TypeString, value)
	}
	if pru.mutation.NameBankKard4Cleared() {
		_spec.ClearField(paymentrequisite.FieldNameBankKard4, field.TypeString)
	}
	if value, ok := pru.mutation.NameBankKard5(); ok {
		_spec.SetField(paymentrequisite.FieldNameBankKard5, field.TypeString, value)
	}
	if pru.mutation.NameBankKard5Cleared() {
		_spec.ClearField(paymentrequisite.FieldNameBankKard5, field.TypeString)
	}
	if value, ok := pru.mutation.NameBank(); ok {
		_spec.SetField(paymentrequisite.FieldNameBank, field.TypeString, value)
	}
	if pru.mutation.NameBankCleared() {
		_spec.ClearField(paymentrequisite.FieldNameBank, field.TypeString)
	}
	if value, ok := pru.mutation.Iban(); ok {
		_spec.SetField(paymentrequisite.FieldIban, field.TypeString, value)
	}
	if pru.mutation.IbanCleared() {
		_spec.ClearField(paymentrequisite.FieldIban, field.TypeString)
	}
	if value, ok := pru.mutation.Edrpou(); ok {
		_spec.SetField(paymentrequisite.FieldEdrpou, field.TypeString, value)
	}
	if pru.mutation.EdrpouCleared() {
		_spec.ClearField(paymentrequisite.FieldEdrpou, field.TypeString)
	}
	if value, ok := pru.mutation.ReceiverName(); ok {
		_spec.SetField(paymentrequisite.FieldReceiverName, field.TypeString, value)
	}
	if pru.mutation.ReceiverNameCleared() {
		_spec.ClearField(paymentrequisite.FieldReceiverName, field.TypeString)
	}
	if value, ok := pru.mutation.PaymentPurpose(); ok {
		_spec.SetField(paymentrequisite.FieldPaymentPurpose, field.TypeString, value)
	}
	if pru.mutation.PaymentPurposeCleared() {
		_spec.ClearField(paymentrequisite.FieldPaymentPurpose, field.TypeString)
	}
	if value, ok := pru.mutation.Mfo(); ok {
		_spec.SetField(paymentrequisite.FieldMfo, field.TypeString, value)
	}
	if pru.mutation.MfoCleared() {
		_spec.ClearField(paymentrequisite.FieldMfo, field.TypeString)
	}
	if value, ok := pru.mutation.AccountNumber(); ok {
		_spec.SetField(paymentrequisite.FieldAccountNumber, field.TypeString, value)
	}
	if pru.mutation.AccountNumberCleared() {
		_spec.ClearField(paymentrequisite.FieldAccountNumber, field.TypeString)
	}
	if pru.mutation.GymCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   paymentrequisite.GymTable,
			Columns: []string{paymentrequisite.GymColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.GymIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   paymentrequisite.GymTable,
			Columns: []string{paymentrequisite.GymColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentrequisite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// PaymentRequisiteUpdateOne is the builder for updating a single PaymentRequisite entity.
type PaymentRequisiteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentRequisiteMutation
}

// SetBankKard1 sets the "bank_kard_1" field.
func (pruo *PaymentRequisiteUpdateOne) SetBankKard1(s string) *PaymentRequisiteUpdateOne {
	pruo.mutation.SetBankKard1(s)
	return pruo
}

// SetNillableBankKard1 sets the "bank_kard_1" field if the given value is not nil.
func (pruo *PaymentRequisiteUpdateOne) SetNillableBankKard1(s *string) *PaymentRequisiteUpdateOne {
	if s != nil {
		pruo.SetBankKard1(*s)
	}
	return pruo
}

// ClearBankKard1 clears the value of the "bank_kard_1" field.
func (pruo *PaymentRequisiteUpdateOne) ClearBankKard1() *PaymentRequisiteUpdateOne {
	pruo.mutation.ClearBankKard1()
	return pruo
}

// SetBankKard2 sets the "bank_kard_2" field.
func (pruo *PaymentRequisiteUpdateOne) SetBankKard2(s string) *PaymentRequisiteUpdateOne {
	pruo.mutation.SetBankKard2(s)
	return pruo
}

// SetNillableBankKard2 sets the "bank_kard_2" field if the given value is not nil.
func (pruo *PaymentRequisiteUpdateOne) SetNillableBankKard2(s *string) *PaymentRequisiteUpdateOne {
	if s != nil {
		pruo.SetBankKard2(*s)
	}
	return pruo
}

// ClearBankKard2 clears the value of the "bank_kard_2" field.
func (pruo *PaymentRequisiteUpdateOne) ClearBankKard2() *PaymentRequisiteUpdateOne {
	pruo.mutation.ClearBankKard2()
	return pruo
}

// SetBankKard3 sets the "bank_kard_3" field.
func (pruo *PaymentRequisiteUpdateOne) SetBankKard3(s string) *PaymentRequisiteUpdateOne {
	pruo.mutation.SetBankKard3(s)
	return pruo
}

// SetNillableBankKard3 sets the "bank_kard_3" field if the given value is not nil.
func (pruo *PaymentRequisiteUpdateOne) SetNillableBankKard3(s *string) *PaymentRequisiteUpdateOne {
	if s != nil {
		pruo.SetBankKard3(*s)
	}
	return pruo
}

// ClearBankKard3 clears the value of the "bank_kard_3" field.
func (pruo *PaymentRequisiteUpdateOne) ClearBankKard3() *PaymentRequisiteUpdateOne {
	pruo.mutation.ClearBankKard3()
	return pruo
}

// SetBankKard4 sets the "bank_kard_4" field.
func (pruo *PaymentRequisiteUpdateOne) SetBankKard4(s string) *PaymentRequisiteUpdateOne {
	pruo.mutation.SetBankKard4(s)
	return pruo
}

// SetNillableBankKard4 sets the "bank_kard_4" field if the given value is not nil.
func (pruo *PaymentRequisiteUpdateOne) SetNillableBankKard4(s *string) *PaymentRequisiteUpdateOne {
	if s != nil {
		pruo.SetBankKard4(*s)
	}
	return pruo
}

// ClearBankKard4 clears the value of the "bank_kard_4" field.
func (pruo *PaymentRequisiteUpdateOne) ClearBankKard4() *PaymentRequisiteUpdateOne {
	pruo.mutation.ClearBankKard4()
	return pruo
}

// SetBankKard5 sets the "bank_kard_5" field.
func (pruo *PaymentRequisiteUpdateOne) SetBankKard5(s string) *PaymentRequisiteUpdateOne {
	pruo.mutation.SetBankKard5(s)
	return pruo
}

// SetNillableBankKard5 sets the "bank_kard_5" field if the given value is not nil.
func (pruo *PaymentRequisiteUpdateOne) SetNillableBankKard5(s *string) *PaymentRequisiteUpdateOne {
	if s != nil {
		pruo.SetBankKard5(*s)
	}
	return pruo
}

// ClearBankKard5 clears the value of the "bank_kard_5" field.
func (pruo *PaymentRequisiteUpdateOne) ClearBankKard5() *PaymentRequisiteUpdateOne {
	pruo.mutation.ClearBankKard5()
	return pruo
}

// SetNameBankKard1 sets the "name_bank_kard_1" field.
func (pruo *PaymentRequisiteUpdateOne) SetNameBankKard1(s string) *PaymentRequisiteUpdateOne {
	pruo.mutation.SetNameBankKard1(s)
	return pruo
}

// SetNillableNameBankKard1 sets the "name_bank_kard_1" field if the given value is not nil.
func (pruo *PaymentRequisiteUpdateOne) SetNillableNameBankKard1(s *string) *PaymentRequisiteUpdateOne {
	if s != nil {
		pruo.SetNameBankKard1(*s)
	}
	return pruo
}

// ClearNameBankKard1 clears the value of the "name_bank_kard_1" field.
func (pruo *PaymentRequisiteUpdateOne) ClearNameBankKard1() *PaymentRequisiteUpdateOne {
	pruo.mutation.ClearNameBankKard1()
	return pruo
}

// SetNameBankKard2 sets the "name_bank_kard_2" field.
func (pruo *PaymentRequisiteUpdateOne) SetNameBankKard2(s string) *PaymentRequisiteUpdateOne {
	pruo.mutation.SetNameBankKard2(s)
	return pruo
}

// SetNillableNameBankKard2 sets the "name_bank_kard_2" field if the given value is not nil.
func (pruo *PaymentRequisiteUpdateOne) SetNillableNameBankKard2(s *string) *PaymentRequisiteUpdateOne {
	if s != nil {
		pruo.SetNameBankKard2(*s)
	}
	return pruo
}

// ClearNameBankKard2 clears the value of the "name_bank_kard_2" field.
func (pruo *PaymentRequisiteUpdateOne) ClearNameBankKard2() *PaymentRequisiteUpdateOne {
	pruo.mutation.ClearNameBankKard2()
	return pruo
}

// SetNameBankKard3 sets the "name_bank_kard_3" field.
func (pruo *PaymentRequisiteUpdateOne) SetNameBankKard3(s string) *PaymentRequisiteUpdateOne {
	pruo.mutation.SetNameBankKard3(s)
	return pruo
}

// SetNillableNameBankKard3 sets the "name_bank_kard_3" field if the given value is not nil.
func (pruo *PaymentRequisiteUpdateOne) SetNillableNameBankKard3(s *string) *PaymentRequisiteUpdateOne {
	if s != nil {
		pruo.SetNameBankKard3(*s)
	}
	return pruo
}

// ClearNameBankKard3 clears the value of the "name_bank_kard_3" field.
func (pruo *PaymentRequisiteUpdateOne) ClearNameBankKard3() *PaymentRequisiteUpdateOne {
	pruo.mutation.ClearNameBankKard3()
	return pruo
}

// SetNameBankKard4 sets the "name_bank_kard_4" field.
func (pruo *PaymentRequisiteUpdateOne) SetNameBankKard4(s string) *PaymentRequisiteUpdateOne {
	pruo.mutation.SetNameBankKard4(s)
	return pruo
}

// SetNillableNameBankKard4 sets the "name_bank_kard_4" field if the given value is not nil.
func (pruo *PaymentRequisiteUpdateOne) SetNillableNameBankKard4(s *string) *PaymentRequisiteUpdateOne {
	if s != nil {
		pruo.SetNameBankKard4(*s)
	}
	return pruo
}

// ClearNameBankKard4 clears the value of the "name_bank_kard_4" field.
func (pruo *PaymentRequisiteUpdateOne) ClearNameBankKard4() *PaymentRequisiteUpdateOne {
	pruo.mutation.ClearNameBankKard4()
	return pruo
}

// SetNameBankKard5 sets the "name_bank_kard_5" field.
func (pruo *PaymentRequisiteUpdateOne) SetNameBankKard5(s string) *PaymentRequisiteUpdateOne {
	pruo.mutation.SetNameBankKard5(s)
	return pruo
}

// SetNillableNameBankKard5 sets the "name_bank_kard_5" field if the given value is not nil.
func (pruo *PaymentRequisiteUpdateOne) SetNillableNameBankKard5(s *string) *PaymentRequisiteUpdateOne {
	if s != nil {
		pruo.SetNameBankKard5(*s)
	}
	return pruo
}

// ClearNameBankKard5 clears the value of the "name_bank_kard_5" field.
func (pruo *PaymentRequisiteUpdateOne) ClearNameBankKard5() *PaymentRequisiteUpdateOne {
	pruo.mutation.ClearNameBankKard5()
	return pruo
}

// SetNameBank sets the "name_bank" field.
func (pruo *PaymentRequisiteUpdateOne) SetNameBank(s string) *PaymentRequisiteUpdateOne {
	pruo.mutation.SetNameBank(s)
	return pruo
}

// SetNillableNameBank sets the "name_bank" field if the given value is not nil.
func (pruo *PaymentRequisiteUpdateOne) SetNillableNameBank(s *string) *PaymentRequisiteUpdateOne {
	if s != nil {
		pruo.SetNameBank(*s)
	}
	return pruo
}

// ClearNameBank clears the value of the "name_bank" field.
func (pruo *PaymentRequisiteUpdateOne) ClearNameBank() *PaymentRequisiteUpdateOne {
	pruo.mutation.ClearNameBank()
	return pruo
}

// SetIban sets the "iban" field.
func (pruo *PaymentRequisiteUpdateOne) SetIban(s string) *PaymentRequisiteUpdateOne {
	pruo.mutation.SetIban(s)
	return pruo
}

// SetNillableIban sets the "iban" field if the given value is not nil.
func (pruo *PaymentRequisiteUpdateOne) SetNillableIban(s *string) *PaymentRequisiteUpdateOne {
	if s != nil {
		pruo.SetIban(*s)
	}
	return pruo
}

// ClearIban clears the value of the "iban" field.
func (pruo *PaymentRequisiteUpdateOne) ClearIban() *PaymentRequisiteUpdateOne {
	pruo.mutation.ClearIban()
	return pruo
}

// SetEdrpou sets the "edrpou" field.
func (pruo *PaymentRequisiteUpdateOne) SetEdrpou(s string) *PaymentRequisiteUpdateOne {
	pruo.mutation.SetEdrpou(s)
	return pruo
}

// SetNillableEdrpou sets the "edrpou" field if the given value is not nil.
func (pruo *PaymentRequisiteUpdateOne) SetNillableEdrpou(s *string) *PaymentRequisiteUpdateOne {
	if s != nil {
		pruo.SetEdrpou(*s)
	}
	return pruo
}

// ClearEdrpou clears the value of the "edrpou" field.
func (pruo *PaymentRequisiteUpdateOne) ClearEdrpou() *PaymentRequisiteUpdateOne {
	pruo.mutation.ClearEdrpou()
	return pruo
}

// SetReceiverName sets the "receiver_name" field.
func (pruo *PaymentRequisiteUpdateOne) SetReceiverName(s string) *PaymentRequisiteUpdateOne {
	pruo.mutation.SetReceiverName(s)
	return pruo
}

// SetNillableReceiverName sets the "receiver_name" field if the given value is not nil.
func (pruo *PaymentRequisiteUpdateOne) SetNillableReceiverName(s *string) *PaymentRequisiteUpdateOne {
	if s != nil {
		pruo.SetReceiverName(*s)
	}
	return pruo
}

// ClearReceiverName clears the value of the "receiver_name" field.
func (pruo *PaymentRequisiteUpdateOne) ClearReceiverName() *PaymentRequisiteUpdateOne {
	pruo.mutation.ClearReceiverName()
	return pruo
}

// SetPaymentPurpose sets the "payment_purpose" field.
func (pruo *PaymentRequisiteUpdateOne) SetPaymentPurpose(s string) *PaymentRequisiteUpdateOne {
	pruo.mutation.SetPaymentPurpose(s)
	return pruo
}

// SetNillablePaymentPurpose sets the "payment_purpose" field if the given value is not nil.
func (pruo *PaymentRequisiteUpdateOne) SetNillablePaymentPurpose(s *string) *PaymentRequisiteUpdateOne {
	if s != nil {
		pruo.SetPaymentPurpose(*s)
	}
	return pruo
}

// ClearPaymentPurpose clears the value of the "payment_purpose" field.
func (pruo *PaymentRequisiteUpdateOne) ClearPaymentPurpose() *PaymentRequisiteUpdateOne {
	pruo.mutation.ClearPaymentPurpose()
	return pruo
}

// SetMfo sets the "mfo" field.
func (pruo *PaymentRequisiteUpdateOne) SetMfo(s string) *PaymentRequisiteUpdateOne {
	pruo.mutation.SetMfo(s)
	return pruo
}

// SetNillableMfo sets the "mfo" field if the given value is not nil.
func (pruo *PaymentRequisiteUpdateOne) SetNillableMfo(s *string) *PaymentRequisiteUpdateOne {
	if s != nil {
		pruo.SetMfo(*s)
	}
	return pruo
}

// ClearMfo clears the value of the "mfo" field.
func (pruo *PaymentRequisiteUpdateOne) ClearMfo() *PaymentRequisiteUpdateOne {
	pruo.mutation.ClearMfo()
	return pruo
}

// SetAccountNumber sets the "account_number" field.
func (pruo *PaymentRequisiteUpdateOne) SetAccountNumber(s string) *PaymentRequisiteUpdateOne {
	pruo.mutation.SetAccountNumber(s)
	return pruo
}

// SetNillableAccountNumber sets the "account_number" field if the given value is not nil.
func (pruo *PaymentRequisiteUpdateOne) SetNillableAccountNumber(s *string) *PaymentRequisiteUpdateOne {
	if s != nil {
		pruo.SetAccountNumber(*s)
	}
	return pruo
}

// ClearAccountNumber clears the value of the "account_number" field.
func (pruo *PaymentRequisiteUpdateOne) ClearAccountNumber() *PaymentRequisiteUpdateOne {
	pruo.mutation.ClearAccountNumber()
	return pruo
}

// SetGymID sets the "gym" edge to the Gym entity by ID.
func (pruo *PaymentRequisiteUpdateOne) SetGymID(id int) *PaymentRequisiteUpdateOne {
	pruo.mutation.SetGymID(id)
	return pruo
}

// SetGym sets the "gym" edge to the Gym entity.
func (pruo *PaymentRequisiteUpdateOne) SetGym(g *Gym) *PaymentRequisiteUpdateOne {
	return pruo.SetGymID(g.ID)
}

// Mutation returns the PaymentRequisiteMutation object of the builder.
func (pruo *PaymentRequisiteUpdateOne) Mutation() *PaymentRequisiteMutation {
	return pruo.mutation
}

// ClearGym clears the "gym" edge to the Gym entity.
func (pruo *PaymentRequisiteUpdateOne) ClearGym() *PaymentRequisiteUpdateOne {
	pruo.mutation.ClearGym()
	return pruo
}

// Where appends a list predicates to the PaymentRequisiteUpdate builder.
func (pruo *PaymentRequisiteUpdateOne) Where(ps ...predicate.PaymentRequisite) *PaymentRequisiteUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PaymentRequisiteUpdateOne) Select(field string, fields ...string) *PaymentRequisiteUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PaymentRequisite entity.
func (pruo *PaymentRequisiteUpdateOne) Save(ctx context.Context) (*PaymentRequisite, error) {
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PaymentRequisiteUpdateOne) SaveX(ctx context.Context) *PaymentRequisite {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PaymentRequisiteUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PaymentRequisiteUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pruo *PaymentRequisiteUpdateOne) check() error {
	if pruo.mutation.GymCleared() && len(pruo.mutation.GymIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PaymentRequisite.gym"`)
	}
	return nil
}

func (pruo *PaymentRequisiteUpdateOne) sqlSave(ctx context.Context) (_node *PaymentRequisite, err error) {
	if err := pruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymentrequisite.Table, paymentrequisite.Columns, sqlgraph.NewFieldSpec(paymentrequisite.FieldID, field.TypeInt))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentRequisite.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentrequisite.FieldID)
		for _, f := range fields {
			if !paymentrequisite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentrequisite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.BankKard1(); ok {
		_spec.SetField(paymentrequisite.FieldBankKard1, field.TypeString, value)
	}
	if pruo.mutation.BankKard1Cleared() {
		_spec.ClearField(paymentrequisite.FieldBankKard1, field.TypeString)
	}
	if value, ok := pruo.mutation.BankKard2(); ok {
		_spec.SetField(paymentrequisite.FieldBankKard2, field.TypeString, value)
	}
	if pruo.mutation.BankKard2Cleared() {
		_spec.ClearField(paymentrequisite.FieldBankKard2, field.TypeString)
	}
	if value, ok := pruo.mutation.BankKard3(); ok {
		_spec.SetField(paymentrequisite.FieldBankKard3, field.TypeString, value)
	}
	if pruo.mutation.BankKard3Cleared() {
		_spec.ClearField(paymentrequisite.FieldBankKard3, field.TypeString)
	}
	if value, ok := pruo.mutation.BankKard4(); ok {
		_spec.SetField(paymentrequisite.FieldBankKard4, field.TypeString, value)
	}
	if pruo.mutation.BankKard4Cleared() {
		_spec.ClearField(paymentrequisite.FieldBankKard4, field.TypeString)
	}
	if value, ok := pruo.mutation.BankKard5(); ok {
		_spec.SetField(paymentrequisite.FieldBankKard5, field.TypeString, value)
	}
	if pruo.mutation.BankKard5Cleared() {
		_spec.ClearField(paymentrequisite.FieldBankKard5, field.TypeString)
	}
	if value, ok := pruo.mutation.NameBankKard1(); ok {
		_spec.SetField(paymentrequisite.FieldNameBankKard1, field.TypeString, value)
	}
	if pruo.mutation.NameBankKard1Cleared() {
		_spec.ClearField(paymentrequisite.FieldNameBankKard1, field.TypeString)
	}
	if value, ok := pruo.mutation.NameBankKard2(); ok {
		_spec.SetField(paymentrequisite.FieldNameBankKard2, field.TypeString, value)
	}
	if pruo.mutation.NameBankKard2Cleared() {
		_spec.ClearField(paymentrequisite.FieldNameBankKard2, field.TypeString)
	}
	if value, ok := pruo.mutation.NameBankKard3(); ok {
		_spec.SetField(paymentrequisite.FieldNameBankKard3, field.TypeString, value)
	}
	if pruo.mutation.NameBankKard3Cleared() {
		_spec.ClearField(paymentrequisite.FieldNameBankKard3, field.TypeString)
	}
	if value, ok := pruo.mutation.NameBankKard4(); ok {
		_spec.SetField(paymentrequisite.FieldNameBankKard4, field.TypeString, value)
	}
	if pruo.mutation.NameBankKard4Cleared() {
		_spec.ClearField(paymentrequisite.FieldNameBankKard4, field.TypeString)
	}
	if value, ok := pruo.mutation.NameBankKard5(); ok {
		_spec.SetField(paymentrequisite.FieldNameBankKard5, field.TypeString, value)
	}
	if pruo.mutation.NameBankKard5Cleared() {
		_spec.ClearField(paymentrequisite.FieldNameBankKard5, field.TypeString)
	}
	if value, ok := pruo.mutation.NameBank(); ok {
		_spec.SetField(paymentrequisite.FieldNameBank, field.TypeString, value)
	}
	if pruo.mutation.NameBankCleared() {
		_spec.ClearField(paymentrequisite.FieldNameBank, field.TypeString)
	}
	if value, ok := pruo.mutation.Iban(); ok {
		_spec.SetField(paymentrequisite.FieldIban, field.TypeString, value)
	}
	if pruo.mutation.IbanCleared() {
		_spec.ClearField(paymentrequisite.FieldIban, field.TypeString)
	}
	if value, ok := pruo.mutation.Edrpou(); ok {
		_spec.SetField(paymentrequisite.FieldEdrpou, field.TypeString, value)
	}
	if pruo.mutation.EdrpouCleared() {
		_spec.ClearField(paymentrequisite.FieldEdrpou, field.TypeString)
	}
	if value, ok := pruo.mutation.ReceiverName(); ok {
		_spec.SetField(paymentrequisite.FieldReceiverName, field.TypeString, value)
	}
	if pruo.mutation.ReceiverNameCleared() {
		_spec.ClearField(paymentrequisite.FieldReceiverName, field.TypeString)
	}
	if value, ok := pruo.mutation.PaymentPurpose(); ok {
		_spec.SetField(paymentrequisite.FieldPaymentPurpose, field.TypeString, value)
	}
	if pruo.mutation.PaymentPurposeCleared() {
		_spec.ClearField(paymentrequisite.FieldPaymentPurpose, field.TypeString)
	}
	if value, ok := pruo.mutation.Mfo(); ok {
		_spec.SetField(paymentrequisite.FieldMfo, field.TypeString, value)
	}
	if pruo.mutation.MfoCleared() {
		_spec.ClearField(paymentrequisite.FieldMfo, field.TypeString)
	}
	if value, ok := pruo.mutation.AccountNumber(); ok {
		_spec.SetField(paymentrequisite.FieldAccountNumber, field.TypeString, value)
	}
	if pruo.mutation.AccountNumberCleared() {
		_spec.ClearField(paymentrequisite.FieldAccountNumber, field.TypeString)
	}
	if pruo.mutation.GymCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   paymentrequisite.GymTable,
			Columns: []string{paymentrequisite.GymColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.GymIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   paymentrequisite.GymTable,
			Columns: []string{paymentrequisite.GymColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaymentRequisite{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentrequisite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
