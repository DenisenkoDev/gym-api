// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gym-api/ent/abonement"
	"gym-api/ent/abonementtype"
	"gym-api/ent/gym"
	"gym-api/ent/payment"
	"gym-api/ent/predicate"
	"gym-api/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AbonementUpdate is the builder for updating Abonement entities.
type AbonementUpdate struct {
	config
	hooks    []Hook
	mutation *AbonementMutation
}

// Where appends a list predicates to the AbonementUpdate builder.
func (au *AbonementUpdate) Where(ps ...predicate.Abonement) *AbonementUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *AbonementUpdate) SetName(s string) *AbonementUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AbonementUpdate) SetNillableName(s *string) *AbonementUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetPrice sets the "price" field.
func (au *AbonementUpdate) SetPrice(f float64) *AbonementUpdate {
	au.mutation.ResetPrice()
	au.mutation.SetPrice(f)
	return au
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (au *AbonementUpdate) SetNillablePrice(f *float64) *AbonementUpdate {
	if f != nil {
		au.SetPrice(*f)
	}
	return au
}

// AddPrice adds f to the "price" field.
func (au *AbonementUpdate) AddPrice(f float64) *AbonementUpdate {
	au.mutation.AddPrice(f)
	return au
}

// SetDurationMonths sets the "duration_months" field.
func (au *AbonementUpdate) SetDurationMonths(i int) *AbonementUpdate {
	au.mutation.ResetDurationMonths()
	au.mutation.SetDurationMonths(i)
	return au
}

// SetNillableDurationMonths sets the "duration_months" field if the given value is not nil.
func (au *AbonementUpdate) SetNillableDurationMonths(i *int) *AbonementUpdate {
	if i != nil {
		au.SetDurationMonths(*i)
	}
	return au
}

// AddDurationMonths adds i to the "duration_months" field.
func (au *AbonementUpdate) AddDurationMonths(i int) *AbonementUpdate {
	au.mutation.AddDurationMonths(i)
	return au
}

// SetExpirationDate sets the "expiration_date" field.
func (au *AbonementUpdate) SetExpirationDate(t time.Time) *AbonementUpdate {
	au.mutation.SetExpirationDate(t)
	return au
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (au *AbonementUpdate) SetNillableExpirationDate(t *time.Time) *AbonementUpdate {
	if t != nil {
		au.SetExpirationDate(*t)
	}
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AbonementUpdate) SetCreatedAt(t time.Time) *AbonementUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AbonementUpdate) SetNillableCreatedAt(t *time.Time) *AbonementUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AbonementUpdate) SetUpdatedAt(t time.Time) *AbonementUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (au *AbonementUpdate) SetNillableUpdatedAt(t *time.Time) *AbonementUpdate {
	if t != nil {
		au.SetUpdatedAt(*t)
	}
	return au
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (au *AbonementUpdate) ClearUpdatedAt() *AbonementUpdate {
	au.mutation.ClearUpdatedAt()
	return au
}

// SetPaidUntil sets the "paid_until" field.
func (au *AbonementUpdate) SetPaidUntil(t time.Time) *AbonementUpdate {
	au.mutation.SetPaidUntil(t)
	return au
}

// SetNillablePaidUntil sets the "paid_until" field if the given value is not nil.
func (au *AbonementUpdate) SetNillablePaidUntil(t *time.Time) *AbonementUpdate {
	if t != nil {
		au.SetPaidUntil(*t)
	}
	return au
}

// ClearPaidUntil clears the value of the "paid_until" field.
func (au *AbonementUpdate) ClearPaidUntil() *AbonementUpdate {
	au.mutation.ClearPaidUntil()
	return au
}

// SetIsActive sets the "is_active" field.
func (au *AbonementUpdate) SetIsActive(b bool) *AbonementUpdate {
	au.mutation.SetIsActive(b)
	return au
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (au *AbonementUpdate) SetNillableIsActive(b *bool) *AbonementUpdate {
	if b != nil {
		au.SetIsActive(*b)
	}
	return au
}

// SetIsPaid sets the "is_paid" field.
func (au *AbonementUpdate) SetIsPaid(b bool) *AbonementUpdate {
	au.mutation.SetIsPaid(b)
	return au
}

// SetNillableIsPaid sets the "is_paid" field if the given value is not nil.
func (au *AbonementUpdate) SetNillableIsPaid(b *bool) *AbonementUpdate {
	if b != nil {
		au.SetIsPaid(*b)
	}
	return au
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by IDs.
func (au *AbonementUpdate) AddPaymentIDs(ids ...int) *AbonementUpdate {
	au.mutation.AddPaymentIDs(ids...)
	return au
}

// AddPayments adds the "payments" edges to the Payment entity.
func (au *AbonementUpdate) AddPayments(p ...*Payment) *AbonementUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddPaymentIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (au *AbonementUpdate) SetUserID(id int) *AbonementUpdate {
	au.mutation.SetUserID(id)
	return au
}

// SetUser sets the "user" edge to the User entity.
func (au *AbonementUpdate) SetUser(u *User) *AbonementUpdate {
	return au.SetUserID(u.ID)
}

// SetCoachID sets the "coach" edge to the User entity by ID.
func (au *AbonementUpdate) SetCoachID(id int) *AbonementUpdate {
	au.mutation.SetCoachID(id)
	return au
}

// SetNillableCoachID sets the "coach" edge to the User entity by ID if the given value is not nil.
func (au *AbonementUpdate) SetNillableCoachID(id *int) *AbonementUpdate {
	if id != nil {
		au = au.SetCoachID(*id)
	}
	return au
}

// SetCoach sets the "coach" edge to the User entity.
func (au *AbonementUpdate) SetCoach(u *User) *AbonementUpdate {
	return au.SetCoachID(u.ID)
}

// SetGymID sets the "gym" edge to the Gym entity by ID.
func (au *AbonementUpdate) SetGymID(id int) *AbonementUpdate {
	au.mutation.SetGymID(id)
	return au
}

// SetGym sets the "gym" edge to the Gym entity.
func (au *AbonementUpdate) SetGym(g *Gym) *AbonementUpdate {
	return au.SetGymID(g.ID)
}

// SetTypeID sets the "type" edge to the AbonementType entity by ID.
func (au *AbonementUpdate) SetTypeID(id int) *AbonementUpdate {
	au.mutation.SetTypeID(id)
	return au
}

// SetType sets the "type" edge to the AbonementType entity.
func (au *AbonementUpdate) SetType(a *AbonementType) *AbonementUpdate {
	return au.SetTypeID(a.ID)
}

// Mutation returns the AbonementMutation object of the builder.
func (au *AbonementUpdate) Mutation() *AbonementMutation {
	return au.mutation
}

// ClearPayments clears all "payments" edges to the Payment entity.
func (au *AbonementUpdate) ClearPayments() *AbonementUpdate {
	au.mutation.ClearPayments()
	return au
}

// RemovePaymentIDs removes the "payments" edge to Payment entities by IDs.
func (au *AbonementUpdate) RemovePaymentIDs(ids ...int) *AbonementUpdate {
	au.mutation.RemovePaymentIDs(ids...)
	return au
}

// RemovePayments removes "payments" edges to Payment entities.
func (au *AbonementUpdate) RemovePayments(p ...*Payment) *AbonementUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemovePaymentIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (au *AbonementUpdate) ClearUser() *AbonementUpdate {
	au.mutation.ClearUser()
	return au
}

// ClearCoach clears the "coach" edge to the User entity.
func (au *AbonementUpdate) ClearCoach() *AbonementUpdate {
	au.mutation.ClearCoach()
	return au
}

// ClearGym clears the "gym" edge to the Gym entity.
func (au *AbonementUpdate) ClearGym() *AbonementUpdate {
	au.mutation.ClearGym()
	return au
}

// ClearType clears the "type" edge to the AbonementType entity.
func (au *AbonementUpdate) ClearType() *AbonementUpdate {
	au.mutation.ClearType()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AbonementUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AbonementUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AbonementUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AbonementUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AbonementUpdate) check() error {
	if v, ok := au.mutation.Price(); ok {
		if err := abonement.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Abonement.price": %w`, err)}
		}
	}
	if v, ok := au.mutation.DurationMonths(); ok {
		if err := abonement.DurationMonthsValidator(v); err != nil {
			return &ValidationError{Name: "duration_months", err: fmt.Errorf(`ent: validator failed for field "Abonement.duration_months": %w`, err)}
		}
	}
	if au.mutation.UserCleared() && len(au.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Abonement.user"`)
	}
	if au.mutation.GymCleared() && len(au.mutation.GymIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Abonement.gym"`)
	}
	if au.mutation.TypeCleared() && len(au.mutation.TypeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Abonement.type"`)
	}
	return nil
}

func (au *AbonementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(abonement.Table, abonement.Columns, sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(abonement.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Price(); ok {
		_spec.SetField(abonement.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedPrice(); ok {
		_spec.AddField(abonement.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.DurationMonths(); ok {
		_spec.SetField(abonement.FieldDurationMonths, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedDurationMonths(); ok {
		_spec.AddField(abonement.FieldDurationMonths, field.TypeInt, value)
	}
	if value, ok := au.mutation.ExpirationDate(); ok {
		_spec.SetField(abonement.FieldExpirationDate, field.TypeTime, value)
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(abonement.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(abonement.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.UpdatedAtCleared() {
		_spec.ClearField(abonement.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := au.mutation.PaidUntil(); ok {
		_spec.SetField(abonement.FieldPaidUntil, field.TypeTime, value)
	}
	if au.mutation.PaidUntilCleared() {
		_spec.ClearField(abonement.FieldPaidUntil, field.TypeTime)
	}
	if value, ok := au.mutation.IsActive(); ok {
		_spec.SetField(abonement.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := au.mutation.IsPaid(); ok {
		_spec.SetField(abonement.FieldIsPaid, field.TypeBool, value)
	}
	if au.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abonement.PaymentsTable,
			Columns: []string{abonement.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !au.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abonement.PaymentsTable,
			Columns: []string{abonement.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abonement.PaymentsTable,
			Columns: []string{abonement.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   abonement.UserTable,
			Columns: []string{abonement.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   abonement.UserTable,
			Columns: []string{abonement.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CoachCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abonement.CoachTable,
			Columns: []string{abonement.CoachColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CoachIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abonement.CoachTable,
			Columns: []string{abonement.CoachColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.GymCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abonement.GymTable,
			Columns: []string{abonement.GymColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.GymIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abonement.GymTable,
			Columns: []string{abonement.GymColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.TypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   abonement.TypeTable,
			Columns: []string{abonement.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonementtype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   abonement.TypeTable,
			Columns: []string{abonement.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonementtype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abonement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AbonementUpdateOne is the builder for updating a single Abonement entity.
type AbonementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AbonementMutation
}

// SetName sets the "name" field.
func (auo *AbonementUpdateOne) SetName(s string) *AbonementUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AbonementUpdateOne) SetNillableName(s *string) *AbonementUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetPrice sets the "price" field.
func (auo *AbonementUpdateOne) SetPrice(f float64) *AbonementUpdateOne {
	auo.mutation.ResetPrice()
	auo.mutation.SetPrice(f)
	return auo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (auo *AbonementUpdateOne) SetNillablePrice(f *float64) *AbonementUpdateOne {
	if f != nil {
		auo.SetPrice(*f)
	}
	return auo
}

// AddPrice adds f to the "price" field.
func (auo *AbonementUpdateOne) AddPrice(f float64) *AbonementUpdateOne {
	auo.mutation.AddPrice(f)
	return auo
}

// SetDurationMonths sets the "duration_months" field.
func (auo *AbonementUpdateOne) SetDurationMonths(i int) *AbonementUpdateOne {
	auo.mutation.ResetDurationMonths()
	auo.mutation.SetDurationMonths(i)
	return auo
}

// SetNillableDurationMonths sets the "duration_months" field if the given value is not nil.
func (auo *AbonementUpdateOne) SetNillableDurationMonths(i *int) *AbonementUpdateOne {
	if i != nil {
		auo.SetDurationMonths(*i)
	}
	return auo
}

// AddDurationMonths adds i to the "duration_months" field.
func (auo *AbonementUpdateOne) AddDurationMonths(i int) *AbonementUpdateOne {
	auo.mutation.AddDurationMonths(i)
	return auo
}

// SetExpirationDate sets the "expiration_date" field.
func (auo *AbonementUpdateOne) SetExpirationDate(t time.Time) *AbonementUpdateOne {
	auo.mutation.SetExpirationDate(t)
	return auo
}

// SetNillableExpirationDate sets the "expiration_date" field if the given value is not nil.
func (auo *AbonementUpdateOne) SetNillableExpirationDate(t *time.Time) *AbonementUpdateOne {
	if t != nil {
		auo.SetExpirationDate(*t)
	}
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *AbonementUpdateOne) SetCreatedAt(t time.Time) *AbonementUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AbonementUpdateOne) SetNillableCreatedAt(t *time.Time) *AbonementUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AbonementUpdateOne) SetUpdatedAt(t time.Time) *AbonementUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auo *AbonementUpdateOne) SetNillableUpdatedAt(t *time.Time) *AbonementUpdateOne {
	if t != nil {
		auo.SetUpdatedAt(*t)
	}
	return auo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auo *AbonementUpdateOne) ClearUpdatedAt() *AbonementUpdateOne {
	auo.mutation.ClearUpdatedAt()
	return auo
}

// SetPaidUntil sets the "paid_until" field.
func (auo *AbonementUpdateOne) SetPaidUntil(t time.Time) *AbonementUpdateOne {
	auo.mutation.SetPaidUntil(t)
	return auo
}

// SetNillablePaidUntil sets the "paid_until" field if the given value is not nil.
func (auo *AbonementUpdateOne) SetNillablePaidUntil(t *time.Time) *AbonementUpdateOne {
	if t != nil {
		auo.SetPaidUntil(*t)
	}
	return auo
}

// ClearPaidUntil clears the value of the "paid_until" field.
func (auo *AbonementUpdateOne) ClearPaidUntil() *AbonementUpdateOne {
	auo.mutation.ClearPaidUntil()
	return auo
}

// SetIsActive sets the "is_active" field.
func (auo *AbonementUpdateOne) SetIsActive(b bool) *AbonementUpdateOne {
	auo.mutation.SetIsActive(b)
	return auo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (auo *AbonementUpdateOne) SetNillableIsActive(b *bool) *AbonementUpdateOne {
	if b != nil {
		auo.SetIsActive(*b)
	}
	return auo
}

// SetIsPaid sets the "is_paid" field.
func (auo *AbonementUpdateOne) SetIsPaid(b bool) *AbonementUpdateOne {
	auo.mutation.SetIsPaid(b)
	return auo
}

// SetNillableIsPaid sets the "is_paid" field if the given value is not nil.
func (auo *AbonementUpdateOne) SetNillableIsPaid(b *bool) *AbonementUpdateOne {
	if b != nil {
		auo.SetIsPaid(*b)
	}
	return auo
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by IDs.
func (auo *AbonementUpdateOne) AddPaymentIDs(ids ...int) *AbonementUpdateOne {
	auo.mutation.AddPaymentIDs(ids...)
	return auo
}

// AddPayments adds the "payments" edges to the Payment entity.
func (auo *AbonementUpdateOne) AddPayments(p ...*Payment) *AbonementUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddPaymentIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (auo *AbonementUpdateOne) SetUserID(id int) *AbonementUpdateOne {
	auo.mutation.SetUserID(id)
	return auo
}

// SetUser sets the "user" edge to the User entity.
func (auo *AbonementUpdateOne) SetUser(u *User) *AbonementUpdateOne {
	return auo.SetUserID(u.ID)
}

// SetCoachID sets the "coach" edge to the User entity by ID.
func (auo *AbonementUpdateOne) SetCoachID(id int) *AbonementUpdateOne {
	auo.mutation.SetCoachID(id)
	return auo
}

// SetNillableCoachID sets the "coach" edge to the User entity by ID if the given value is not nil.
func (auo *AbonementUpdateOne) SetNillableCoachID(id *int) *AbonementUpdateOne {
	if id != nil {
		auo = auo.SetCoachID(*id)
	}
	return auo
}

// SetCoach sets the "coach" edge to the User entity.
func (auo *AbonementUpdateOne) SetCoach(u *User) *AbonementUpdateOne {
	return auo.SetCoachID(u.ID)
}

// SetGymID sets the "gym" edge to the Gym entity by ID.
func (auo *AbonementUpdateOne) SetGymID(id int) *AbonementUpdateOne {
	auo.mutation.SetGymID(id)
	return auo
}

// SetGym sets the "gym" edge to the Gym entity.
func (auo *AbonementUpdateOne) SetGym(g *Gym) *AbonementUpdateOne {
	return auo.SetGymID(g.ID)
}

// SetTypeID sets the "type" edge to the AbonementType entity by ID.
func (auo *AbonementUpdateOne) SetTypeID(id int) *AbonementUpdateOne {
	auo.mutation.SetTypeID(id)
	return auo
}

// SetType sets the "type" edge to the AbonementType entity.
func (auo *AbonementUpdateOne) SetType(a *AbonementType) *AbonementUpdateOne {
	return auo.SetTypeID(a.ID)
}

// Mutation returns the AbonementMutation object of the builder.
func (auo *AbonementUpdateOne) Mutation() *AbonementMutation {
	return auo.mutation
}

// ClearPayments clears all "payments" edges to the Payment entity.
func (auo *AbonementUpdateOne) ClearPayments() *AbonementUpdateOne {
	auo.mutation.ClearPayments()
	return auo
}

// RemovePaymentIDs removes the "payments" edge to Payment entities by IDs.
func (auo *AbonementUpdateOne) RemovePaymentIDs(ids ...int) *AbonementUpdateOne {
	auo.mutation.RemovePaymentIDs(ids...)
	return auo
}

// RemovePayments removes "payments" edges to Payment entities.
func (auo *AbonementUpdateOne) RemovePayments(p ...*Payment) *AbonementUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemovePaymentIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (auo *AbonementUpdateOne) ClearUser() *AbonementUpdateOne {
	auo.mutation.ClearUser()
	return auo
}

// ClearCoach clears the "coach" edge to the User entity.
func (auo *AbonementUpdateOne) ClearCoach() *AbonementUpdateOne {
	auo.mutation.ClearCoach()
	return auo
}

// ClearGym clears the "gym" edge to the Gym entity.
func (auo *AbonementUpdateOne) ClearGym() *AbonementUpdateOne {
	auo.mutation.ClearGym()
	return auo
}

// ClearType clears the "type" edge to the AbonementType entity.
func (auo *AbonementUpdateOne) ClearType() *AbonementUpdateOne {
	auo.mutation.ClearType()
	return auo
}

// Where appends a list predicates to the AbonementUpdate builder.
func (auo *AbonementUpdateOne) Where(ps ...predicate.Abonement) *AbonementUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AbonementUpdateOne) Select(field string, fields ...string) *AbonementUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Abonement entity.
func (auo *AbonementUpdateOne) Save(ctx context.Context) (*Abonement, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AbonementUpdateOne) SaveX(ctx context.Context) *Abonement {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AbonementUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AbonementUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AbonementUpdateOne) check() error {
	if v, ok := auo.mutation.Price(); ok {
		if err := abonement.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Abonement.price": %w`, err)}
		}
	}
	if v, ok := auo.mutation.DurationMonths(); ok {
		if err := abonement.DurationMonthsValidator(v); err != nil {
			return &ValidationError{Name: "duration_months", err: fmt.Errorf(`ent: validator failed for field "Abonement.duration_months": %w`, err)}
		}
	}
	if auo.mutation.UserCleared() && len(auo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Abonement.user"`)
	}
	if auo.mutation.GymCleared() && len(auo.mutation.GymIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Abonement.gym"`)
	}
	if auo.mutation.TypeCleared() && len(auo.mutation.TypeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Abonement.type"`)
	}
	return nil
}

func (auo *AbonementUpdateOne) sqlSave(ctx context.Context) (_node *Abonement, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(abonement.Table, abonement.Columns, sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Abonement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, abonement.FieldID)
		for _, f := range fields {
			if !abonement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != abonement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(abonement.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Price(); ok {
		_spec.SetField(abonement.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedPrice(); ok {
		_spec.AddField(abonement.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.DurationMonths(); ok {
		_spec.SetField(abonement.FieldDurationMonths, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedDurationMonths(); ok {
		_spec.AddField(abonement.FieldDurationMonths, field.TypeInt, value)
	}
	if value, ok := auo.mutation.ExpirationDate(); ok {
		_spec.SetField(abonement.FieldExpirationDate, field.TypeTime, value)
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(abonement.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(abonement.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.UpdatedAtCleared() {
		_spec.ClearField(abonement.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.PaidUntil(); ok {
		_spec.SetField(abonement.FieldPaidUntil, field.TypeTime, value)
	}
	if auo.mutation.PaidUntilCleared() {
		_spec.ClearField(abonement.FieldPaidUntil, field.TypeTime)
	}
	if value, ok := auo.mutation.IsActive(); ok {
		_spec.SetField(abonement.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := auo.mutation.IsPaid(); ok {
		_spec.SetField(abonement.FieldIsPaid, field.TypeBool, value)
	}
	if auo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abonement.PaymentsTable,
			Columns: []string{abonement.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !auo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abonement.PaymentsTable,
			Columns: []string{abonement.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   abonement.PaymentsTable,
			Columns: []string{abonement.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   abonement.UserTable,
			Columns: []string{abonement.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   abonement.UserTable,
			Columns: []string{abonement.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CoachCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abonement.CoachTable,
			Columns: []string{abonement.CoachColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CoachIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abonement.CoachTable,
			Columns: []string{abonement.CoachColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.GymCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abonement.GymTable,
			Columns: []string{abonement.GymColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.GymIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   abonement.GymTable,
			Columns: []string{abonement.GymColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.TypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   abonement.TypeTable,
			Columns: []string{abonement.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonementtype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   abonement.TypeTable,
			Columns: []string{abonement.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonementtype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Abonement{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{abonement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
