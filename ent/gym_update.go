// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gym-api/ent/abonement"
	"gym-api/ent/abonementtype"
	"gym-api/ent/gym"
	"gym-api/ent/managerrole"
	"gym-api/ent/paymentrequisite"
	"gym-api/ent/predicate"
	"gym-api/ent/user"
	"gym-api/ent/userrole"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GymUpdate is the builder for updating Gym entities.
type GymUpdate struct {
	config
	hooks    []Hook
	mutation *GymMutation
}

// Where appends a list predicates to the GymUpdate builder.
func (gu *GymUpdate) Where(ps ...predicate.Gym) *GymUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetName sets the "name" field.
func (gu *GymUpdate) SetName(s string) *GymUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gu *GymUpdate) SetNillableName(s *string) *GymUpdate {
	if s != nil {
		gu.SetName(*s)
	}
	return gu
}

// SetCurrencyID sets the "currency_id" field.
func (gu *GymUpdate) SetCurrencyID(i int) *GymUpdate {
	gu.mutation.ResetCurrencyID()
	gu.mutation.SetCurrencyID(i)
	return gu
}

// SetNillableCurrencyID sets the "currency_id" field if the given value is not nil.
func (gu *GymUpdate) SetNillableCurrencyID(i *int) *GymUpdate {
	if i != nil {
		gu.SetCurrencyID(*i)
	}
	return gu
}

// AddCurrencyID adds i to the "currency_id" field.
func (gu *GymUpdate) AddCurrencyID(i int) *GymUpdate {
	gu.mutation.AddCurrencyID(i)
	return gu
}

// SetPhone sets the "phone" field.
func (gu *GymUpdate) SetPhone(s string) *GymUpdate {
	gu.mutation.SetPhone(s)
	return gu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (gu *GymUpdate) SetNillablePhone(s *string) *GymUpdate {
	if s != nil {
		gu.SetPhone(*s)
	}
	return gu
}

// SetMail sets the "mail" field.
func (gu *GymUpdate) SetMail(s string) *GymUpdate {
	gu.mutation.SetMail(s)
	return gu
}

// SetNillableMail sets the "mail" field if the given value is not nil.
func (gu *GymUpdate) SetNillableMail(s *string) *GymUpdate {
	if s != nil {
		gu.SetMail(*s)
	}
	return gu
}

// SetAddress sets the "address" field.
func (gu *GymUpdate) SetAddress(s string) *GymUpdate {
	gu.mutation.SetAddress(s)
	return gu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (gu *GymUpdate) SetNillableAddress(s *string) *GymUpdate {
	if s != nil {
		gu.SetAddress(*s)
	}
	return gu
}

// ClearAddress clears the value of the "address" field.
func (gu *GymUpdate) ClearAddress() *GymUpdate {
	gu.mutation.ClearAddress()
	return gu
}

// SetWebSite sets the "web_site" field.
func (gu *GymUpdate) SetWebSite(s string) *GymUpdate {
	gu.mutation.SetWebSite(s)
	return gu
}

// SetNillableWebSite sets the "web_site" field if the given value is not nil.
func (gu *GymUpdate) SetNillableWebSite(s *string) *GymUpdate {
	if s != nil {
		gu.SetWebSite(*s)
	}
	return gu
}

// ClearWebSite clears the value of the "web_site" field.
func (gu *GymUpdate) ClearWebSite() *GymUpdate {
	gu.mutation.ClearWebSite()
	return gu
}

// SetDescription sets the "description" field.
func (gu *GymUpdate) SetDescription(s string) *GymUpdate {
	gu.mutation.SetDescription(s)
	return gu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (gu *GymUpdate) SetNillableDescription(s *string) *GymUpdate {
	if s != nil {
		gu.SetDescription(*s)
	}
	return gu
}

// ClearDescription clears the value of the "description" field.
func (gu *GymUpdate) ClearDescription() *GymUpdate {
	gu.mutation.ClearDescription()
	return gu
}

// SetCreatedAt sets the "created_at" field.
func (gu *GymUpdate) SetCreatedAt(t time.Time) *GymUpdate {
	gu.mutation.SetCreatedAt(t)
	return gu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gu *GymUpdate) SetNillableCreatedAt(t *time.Time) *GymUpdate {
	if t != nil {
		gu.SetCreatedAt(*t)
	}
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GymUpdate) SetUpdatedAt(t time.Time) *GymUpdate {
	gu.mutation.SetUpdatedAt(t)
	return gu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gu *GymUpdate) SetNillableUpdatedAt(t *time.Time) *GymUpdate {
	if t != nil {
		gu.SetUpdatedAt(*t)
	}
	return gu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (gu *GymUpdate) ClearUpdatedAt() *GymUpdate {
	gu.mutation.ClearUpdatedAt()
	return gu
}

// AddVisitorIDs adds the "visitors" edge to the User entity by IDs.
func (gu *GymUpdate) AddVisitorIDs(ids ...int) *GymUpdate {
	gu.mutation.AddVisitorIDs(ids...)
	return gu
}

// AddVisitors adds the "visitors" edges to the User entity.
func (gu *GymUpdate) AddVisitors(u ...*User) *GymUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.AddVisitorIDs(ids...)
}

// AddManagerIDs adds the "managers" edge to the User entity by IDs.
func (gu *GymUpdate) AddManagerIDs(ids ...int) *GymUpdate {
	gu.mutation.AddManagerIDs(ids...)
	return gu
}

// AddManagers adds the "managers" edges to the User entity.
func (gu *GymUpdate) AddManagers(u ...*User) *GymUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.AddManagerIDs(ids...)
}

// AddAbonementTypeIDs adds the "abonement_type" edge to the AbonementType entity by IDs.
func (gu *GymUpdate) AddAbonementTypeIDs(ids ...int) *GymUpdate {
	gu.mutation.AddAbonementTypeIDs(ids...)
	return gu
}

// AddAbonementType adds the "abonement_type" edges to the AbonementType entity.
func (gu *GymUpdate) AddAbonementType(a ...*AbonementType) *GymUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return gu.AddAbonementTypeIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (gu *GymUpdate) SetOwnerID(id int) *GymUpdate {
	gu.mutation.SetOwnerID(id)
	return gu
}

// SetOwner sets the "owner" edge to the User entity.
func (gu *GymUpdate) SetOwner(u *User) *GymUpdate {
	return gu.SetOwnerID(u.ID)
}

// AddAbonementIDs adds the "abonements" edge to the Abonement entity by IDs.
func (gu *GymUpdate) AddAbonementIDs(ids ...int) *GymUpdate {
	gu.mutation.AddAbonementIDs(ids...)
	return gu
}

// AddAbonements adds the "abonements" edges to the Abonement entity.
func (gu *GymUpdate) AddAbonements(a ...*Abonement) *GymUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return gu.AddAbonementIDs(ids...)
}

// AddUserRoleIDs adds the "user_roles" edge to the UserRole entity by IDs.
func (gu *GymUpdate) AddUserRoleIDs(ids ...int) *GymUpdate {
	gu.mutation.AddUserRoleIDs(ids...)
	return gu
}

// AddUserRoles adds the "user_roles" edges to the UserRole entity.
func (gu *GymUpdate) AddUserRoles(u ...*UserRole) *GymUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.AddUserRoleIDs(ids...)
}

// AddManagerRoleIDs adds the "manager_roles" edge to the ManagerRole entity by IDs.
func (gu *GymUpdate) AddManagerRoleIDs(ids ...int) *GymUpdate {
	gu.mutation.AddManagerRoleIDs(ids...)
	return gu
}

// AddManagerRoles adds the "manager_roles" edges to the ManagerRole entity.
func (gu *GymUpdate) AddManagerRoles(m ...*ManagerRole) *GymUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return gu.AddManagerRoleIDs(ids...)
}

// SetPaymentRequisiteID sets the "payment_requisite" edge to the PaymentRequisite entity by ID.
func (gu *GymUpdate) SetPaymentRequisiteID(id int) *GymUpdate {
	gu.mutation.SetPaymentRequisiteID(id)
	return gu
}

// SetNillablePaymentRequisiteID sets the "payment_requisite" edge to the PaymentRequisite entity by ID if the given value is not nil.
func (gu *GymUpdate) SetNillablePaymentRequisiteID(id *int) *GymUpdate {
	if id != nil {
		gu = gu.SetPaymentRequisiteID(*id)
	}
	return gu
}

// SetPaymentRequisite sets the "payment_requisite" edge to the PaymentRequisite entity.
func (gu *GymUpdate) SetPaymentRequisite(p *PaymentRequisite) *GymUpdate {
	return gu.SetPaymentRequisiteID(p.ID)
}

// Mutation returns the GymMutation object of the builder.
func (gu *GymUpdate) Mutation() *GymMutation {
	return gu.mutation
}

// ClearVisitors clears all "visitors" edges to the User entity.
func (gu *GymUpdate) ClearVisitors() *GymUpdate {
	gu.mutation.ClearVisitors()
	return gu
}

// RemoveVisitorIDs removes the "visitors" edge to User entities by IDs.
func (gu *GymUpdate) RemoveVisitorIDs(ids ...int) *GymUpdate {
	gu.mutation.RemoveVisitorIDs(ids...)
	return gu
}

// RemoveVisitors removes "visitors" edges to User entities.
func (gu *GymUpdate) RemoveVisitors(u ...*User) *GymUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.RemoveVisitorIDs(ids...)
}

// ClearManagers clears all "managers" edges to the User entity.
func (gu *GymUpdate) ClearManagers() *GymUpdate {
	gu.mutation.ClearManagers()
	return gu
}

// RemoveManagerIDs removes the "managers" edge to User entities by IDs.
func (gu *GymUpdate) RemoveManagerIDs(ids ...int) *GymUpdate {
	gu.mutation.RemoveManagerIDs(ids...)
	return gu
}

// RemoveManagers removes "managers" edges to User entities.
func (gu *GymUpdate) RemoveManagers(u ...*User) *GymUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.RemoveManagerIDs(ids...)
}

// ClearAbonementType clears all "abonement_type" edges to the AbonementType entity.
func (gu *GymUpdate) ClearAbonementType() *GymUpdate {
	gu.mutation.ClearAbonementType()
	return gu
}

// RemoveAbonementTypeIDs removes the "abonement_type" edge to AbonementType entities by IDs.
func (gu *GymUpdate) RemoveAbonementTypeIDs(ids ...int) *GymUpdate {
	gu.mutation.RemoveAbonementTypeIDs(ids...)
	return gu
}

// RemoveAbonementType removes "abonement_type" edges to AbonementType entities.
func (gu *GymUpdate) RemoveAbonementType(a ...*AbonementType) *GymUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return gu.RemoveAbonementTypeIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (gu *GymUpdate) ClearOwner() *GymUpdate {
	gu.mutation.ClearOwner()
	return gu
}

// ClearAbonements clears all "abonements" edges to the Abonement entity.
func (gu *GymUpdate) ClearAbonements() *GymUpdate {
	gu.mutation.ClearAbonements()
	return gu
}

// RemoveAbonementIDs removes the "abonements" edge to Abonement entities by IDs.
func (gu *GymUpdate) RemoveAbonementIDs(ids ...int) *GymUpdate {
	gu.mutation.RemoveAbonementIDs(ids...)
	return gu
}

// RemoveAbonements removes "abonements" edges to Abonement entities.
func (gu *GymUpdate) RemoveAbonements(a ...*Abonement) *GymUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return gu.RemoveAbonementIDs(ids...)
}

// ClearUserRoles clears all "user_roles" edges to the UserRole entity.
func (gu *GymUpdate) ClearUserRoles() *GymUpdate {
	gu.mutation.ClearUserRoles()
	return gu
}

// RemoveUserRoleIDs removes the "user_roles" edge to UserRole entities by IDs.
func (gu *GymUpdate) RemoveUserRoleIDs(ids ...int) *GymUpdate {
	gu.mutation.RemoveUserRoleIDs(ids...)
	return gu
}

// RemoveUserRoles removes "user_roles" edges to UserRole entities.
func (gu *GymUpdate) RemoveUserRoles(u ...*UserRole) *GymUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.RemoveUserRoleIDs(ids...)
}

// ClearManagerRoles clears all "manager_roles" edges to the ManagerRole entity.
func (gu *GymUpdate) ClearManagerRoles() *GymUpdate {
	gu.mutation.ClearManagerRoles()
	return gu
}

// RemoveManagerRoleIDs removes the "manager_roles" edge to ManagerRole entities by IDs.
func (gu *GymUpdate) RemoveManagerRoleIDs(ids ...int) *GymUpdate {
	gu.mutation.RemoveManagerRoleIDs(ids...)
	return gu
}

// RemoveManagerRoles removes "manager_roles" edges to ManagerRole entities.
func (gu *GymUpdate) RemoveManagerRoles(m ...*ManagerRole) *GymUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return gu.RemoveManagerRoleIDs(ids...)
}

// ClearPaymentRequisite clears the "payment_requisite" edge to the PaymentRequisite entity.
func (gu *GymUpdate) ClearPaymentRequisite() *GymUpdate {
	gu.mutation.ClearPaymentRequisite()
	return gu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GymUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GymUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GymUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GymUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GymUpdate) check() error {
	if gu.mutation.OwnerCleared() && len(gu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Gym.owner"`)
	}
	return nil
}

func (gu *GymUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(gym.Table, gym.Columns, sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.SetField(gym.FieldName, field.TypeString, value)
	}
	if value, ok := gu.mutation.CurrencyID(); ok {
		_spec.SetField(gym.FieldCurrencyID, field.TypeInt, value)
	}
	if value, ok := gu.mutation.AddedCurrencyID(); ok {
		_spec.AddField(gym.FieldCurrencyID, field.TypeInt, value)
	}
	if value, ok := gu.mutation.Phone(); ok {
		_spec.SetField(gym.FieldPhone, field.TypeString, value)
	}
	if value, ok := gu.mutation.Mail(); ok {
		_spec.SetField(gym.FieldMail, field.TypeString, value)
	}
	if value, ok := gu.mutation.Address(); ok {
		_spec.SetField(gym.FieldAddress, field.TypeString, value)
	}
	if gu.mutation.AddressCleared() {
		_spec.ClearField(gym.FieldAddress, field.TypeString)
	}
	if value, ok := gu.mutation.WebSite(); ok {
		_spec.SetField(gym.FieldWebSite, field.TypeString, value)
	}
	if gu.mutation.WebSiteCleared() {
		_spec.ClearField(gym.FieldWebSite, field.TypeString)
	}
	if value, ok := gu.mutation.Description(); ok {
		_spec.SetField(gym.FieldDescription, field.TypeString, value)
	}
	if gu.mutation.DescriptionCleared() {
		_spec.ClearField(gym.FieldDescription, field.TypeString)
	}
	if value, ok := gu.mutation.CreatedAt(); ok {
		_spec.SetField(gym.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.SetField(gym.FieldUpdatedAt, field.TypeTime, value)
	}
	if gu.mutation.UpdatedAtCleared() {
		_spec.ClearField(gym.FieldUpdatedAt, field.TypeTime)
	}
	if gu.mutation.VisitorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gym.VisitorsTable,
			Columns: gym.VisitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedVisitorsIDs(); len(nodes) > 0 && !gu.mutation.VisitorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gym.VisitorsTable,
			Columns: gym.VisitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.VisitorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gym.VisitorsTable,
			Columns: gym.VisitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.ManagersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gym.ManagersTable,
			Columns: gym.ManagersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedManagersIDs(); len(nodes) > 0 && !gu.mutation.ManagersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gym.ManagersTable,
			Columns: gym.ManagersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ManagersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gym.ManagersTable,
			Columns: gym.ManagersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.AbonementTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.AbonementTypeTable,
			Columns: []string{gym.AbonementTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonementtype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedAbonementTypeIDs(); len(nodes) > 0 && !gu.mutation.AbonementTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.AbonementTypeTable,
			Columns: []string{gym.AbonementTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonementtype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.AbonementTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.AbonementTypeTable,
			Columns: []string{gym.AbonementTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonementtype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gym.OwnerTable,
			Columns: []string{gym.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gym.OwnerTable,
			Columns: []string{gym.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.AbonementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.AbonementsTable,
			Columns: []string{gym.AbonementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedAbonementsIDs(); len(nodes) > 0 && !gu.mutation.AbonementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.AbonementsTable,
			Columns: []string{gym.AbonementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.AbonementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.AbonementsTable,
			Columns: []string{gym.AbonementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.UserRolesTable,
			Columns: []string{gym.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedUserRolesIDs(); len(nodes) > 0 && !gu.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.UserRolesTable,
			Columns: []string{gym.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.UserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.UserRolesTable,
			Columns: []string{gym.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.ManagerRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.ManagerRolesTable,
			Columns: []string{gym.ManagerRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(managerrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedManagerRolesIDs(); len(nodes) > 0 && !gu.mutation.ManagerRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.ManagerRolesTable,
			Columns: []string{gym.ManagerRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(managerrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ManagerRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.ManagerRolesTable,
			Columns: []string{gym.ManagerRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(managerrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.PaymentRequisiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   gym.PaymentRequisiteTable,
			Columns: []string{gym.PaymentRequisiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentrequisite.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.PaymentRequisiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   gym.PaymentRequisiteTable,
			Columns: []string{gym.PaymentRequisiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentrequisite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gym.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GymUpdateOne is the builder for updating a single Gym entity.
type GymUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GymMutation
}

// SetName sets the "name" field.
func (guo *GymUpdateOne) SetName(s string) *GymUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (guo *GymUpdateOne) SetNillableName(s *string) *GymUpdateOne {
	if s != nil {
		guo.SetName(*s)
	}
	return guo
}

// SetCurrencyID sets the "currency_id" field.
func (guo *GymUpdateOne) SetCurrencyID(i int) *GymUpdateOne {
	guo.mutation.ResetCurrencyID()
	guo.mutation.SetCurrencyID(i)
	return guo
}

// SetNillableCurrencyID sets the "currency_id" field if the given value is not nil.
func (guo *GymUpdateOne) SetNillableCurrencyID(i *int) *GymUpdateOne {
	if i != nil {
		guo.SetCurrencyID(*i)
	}
	return guo
}

// AddCurrencyID adds i to the "currency_id" field.
func (guo *GymUpdateOne) AddCurrencyID(i int) *GymUpdateOne {
	guo.mutation.AddCurrencyID(i)
	return guo
}

// SetPhone sets the "phone" field.
func (guo *GymUpdateOne) SetPhone(s string) *GymUpdateOne {
	guo.mutation.SetPhone(s)
	return guo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (guo *GymUpdateOne) SetNillablePhone(s *string) *GymUpdateOne {
	if s != nil {
		guo.SetPhone(*s)
	}
	return guo
}

// SetMail sets the "mail" field.
func (guo *GymUpdateOne) SetMail(s string) *GymUpdateOne {
	guo.mutation.SetMail(s)
	return guo
}

// SetNillableMail sets the "mail" field if the given value is not nil.
func (guo *GymUpdateOne) SetNillableMail(s *string) *GymUpdateOne {
	if s != nil {
		guo.SetMail(*s)
	}
	return guo
}

// SetAddress sets the "address" field.
func (guo *GymUpdateOne) SetAddress(s string) *GymUpdateOne {
	guo.mutation.SetAddress(s)
	return guo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (guo *GymUpdateOne) SetNillableAddress(s *string) *GymUpdateOne {
	if s != nil {
		guo.SetAddress(*s)
	}
	return guo
}

// ClearAddress clears the value of the "address" field.
func (guo *GymUpdateOne) ClearAddress() *GymUpdateOne {
	guo.mutation.ClearAddress()
	return guo
}

// SetWebSite sets the "web_site" field.
func (guo *GymUpdateOne) SetWebSite(s string) *GymUpdateOne {
	guo.mutation.SetWebSite(s)
	return guo
}

// SetNillableWebSite sets the "web_site" field if the given value is not nil.
func (guo *GymUpdateOne) SetNillableWebSite(s *string) *GymUpdateOne {
	if s != nil {
		guo.SetWebSite(*s)
	}
	return guo
}

// ClearWebSite clears the value of the "web_site" field.
func (guo *GymUpdateOne) ClearWebSite() *GymUpdateOne {
	guo.mutation.ClearWebSite()
	return guo
}

// SetDescription sets the "description" field.
func (guo *GymUpdateOne) SetDescription(s string) *GymUpdateOne {
	guo.mutation.SetDescription(s)
	return guo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (guo *GymUpdateOne) SetNillableDescription(s *string) *GymUpdateOne {
	if s != nil {
		guo.SetDescription(*s)
	}
	return guo
}

// ClearDescription clears the value of the "description" field.
func (guo *GymUpdateOne) ClearDescription() *GymUpdateOne {
	guo.mutation.ClearDescription()
	return guo
}

// SetCreatedAt sets the "created_at" field.
func (guo *GymUpdateOne) SetCreatedAt(t time.Time) *GymUpdateOne {
	guo.mutation.SetCreatedAt(t)
	return guo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (guo *GymUpdateOne) SetNillableCreatedAt(t *time.Time) *GymUpdateOne {
	if t != nil {
		guo.SetCreatedAt(*t)
	}
	return guo
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GymUpdateOne) SetUpdatedAt(t time.Time) *GymUpdateOne {
	guo.mutation.SetUpdatedAt(t)
	return guo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (guo *GymUpdateOne) SetNillableUpdatedAt(t *time.Time) *GymUpdateOne {
	if t != nil {
		guo.SetUpdatedAt(*t)
	}
	return guo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (guo *GymUpdateOne) ClearUpdatedAt() *GymUpdateOne {
	guo.mutation.ClearUpdatedAt()
	return guo
}

// AddVisitorIDs adds the "visitors" edge to the User entity by IDs.
func (guo *GymUpdateOne) AddVisitorIDs(ids ...int) *GymUpdateOne {
	guo.mutation.AddVisitorIDs(ids...)
	return guo
}

// AddVisitors adds the "visitors" edges to the User entity.
func (guo *GymUpdateOne) AddVisitors(u ...*User) *GymUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.AddVisitorIDs(ids...)
}

// AddManagerIDs adds the "managers" edge to the User entity by IDs.
func (guo *GymUpdateOne) AddManagerIDs(ids ...int) *GymUpdateOne {
	guo.mutation.AddManagerIDs(ids...)
	return guo
}

// AddManagers adds the "managers" edges to the User entity.
func (guo *GymUpdateOne) AddManagers(u ...*User) *GymUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.AddManagerIDs(ids...)
}

// AddAbonementTypeIDs adds the "abonement_type" edge to the AbonementType entity by IDs.
func (guo *GymUpdateOne) AddAbonementTypeIDs(ids ...int) *GymUpdateOne {
	guo.mutation.AddAbonementTypeIDs(ids...)
	return guo
}

// AddAbonementType adds the "abonement_type" edges to the AbonementType entity.
func (guo *GymUpdateOne) AddAbonementType(a ...*AbonementType) *GymUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return guo.AddAbonementTypeIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (guo *GymUpdateOne) SetOwnerID(id int) *GymUpdateOne {
	guo.mutation.SetOwnerID(id)
	return guo
}

// SetOwner sets the "owner" edge to the User entity.
func (guo *GymUpdateOne) SetOwner(u *User) *GymUpdateOne {
	return guo.SetOwnerID(u.ID)
}

// AddAbonementIDs adds the "abonements" edge to the Abonement entity by IDs.
func (guo *GymUpdateOne) AddAbonementIDs(ids ...int) *GymUpdateOne {
	guo.mutation.AddAbonementIDs(ids...)
	return guo
}

// AddAbonements adds the "abonements" edges to the Abonement entity.
func (guo *GymUpdateOne) AddAbonements(a ...*Abonement) *GymUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return guo.AddAbonementIDs(ids...)
}

// AddUserRoleIDs adds the "user_roles" edge to the UserRole entity by IDs.
func (guo *GymUpdateOne) AddUserRoleIDs(ids ...int) *GymUpdateOne {
	guo.mutation.AddUserRoleIDs(ids...)
	return guo
}

// AddUserRoles adds the "user_roles" edges to the UserRole entity.
func (guo *GymUpdateOne) AddUserRoles(u ...*UserRole) *GymUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.AddUserRoleIDs(ids...)
}

// AddManagerRoleIDs adds the "manager_roles" edge to the ManagerRole entity by IDs.
func (guo *GymUpdateOne) AddManagerRoleIDs(ids ...int) *GymUpdateOne {
	guo.mutation.AddManagerRoleIDs(ids...)
	return guo
}

// AddManagerRoles adds the "manager_roles" edges to the ManagerRole entity.
func (guo *GymUpdateOne) AddManagerRoles(m ...*ManagerRole) *GymUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return guo.AddManagerRoleIDs(ids...)
}

// SetPaymentRequisiteID sets the "payment_requisite" edge to the PaymentRequisite entity by ID.
func (guo *GymUpdateOne) SetPaymentRequisiteID(id int) *GymUpdateOne {
	guo.mutation.SetPaymentRequisiteID(id)
	return guo
}

// SetNillablePaymentRequisiteID sets the "payment_requisite" edge to the PaymentRequisite entity by ID if the given value is not nil.
func (guo *GymUpdateOne) SetNillablePaymentRequisiteID(id *int) *GymUpdateOne {
	if id != nil {
		guo = guo.SetPaymentRequisiteID(*id)
	}
	return guo
}

// SetPaymentRequisite sets the "payment_requisite" edge to the PaymentRequisite entity.
func (guo *GymUpdateOne) SetPaymentRequisite(p *PaymentRequisite) *GymUpdateOne {
	return guo.SetPaymentRequisiteID(p.ID)
}

// Mutation returns the GymMutation object of the builder.
func (guo *GymUpdateOne) Mutation() *GymMutation {
	return guo.mutation
}

// ClearVisitors clears all "visitors" edges to the User entity.
func (guo *GymUpdateOne) ClearVisitors() *GymUpdateOne {
	guo.mutation.ClearVisitors()
	return guo
}

// RemoveVisitorIDs removes the "visitors" edge to User entities by IDs.
func (guo *GymUpdateOne) RemoveVisitorIDs(ids ...int) *GymUpdateOne {
	guo.mutation.RemoveVisitorIDs(ids...)
	return guo
}

// RemoveVisitors removes "visitors" edges to User entities.
func (guo *GymUpdateOne) RemoveVisitors(u ...*User) *GymUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.RemoveVisitorIDs(ids...)
}

// ClearManagers clears all "managers" edges to the User entity.
func (guo *GymUpdateOne) ClearManagers() *GymUpdateOne {
	guo.mutation.ClearManagers()
	return guo
}

// RemoveManagerIDs removes the "managers" edge to User entities by IDs.
func (guo *GymUpdateOne) RemoveManagerIDs(ids ...int) *GymUpdateOne {
	guo.mutation.RemoveManagerIDs(ids...)
	return guo
}

// RemoveManagers removes "managers" edges to User entities.
func (guo *GymUpdateOne) RemoveManagers(u ...*User) *GymUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.RemoveManagerIDs(ids...)
}

// ClearAbonementType clears all "abonement_type" edges to the AbonementType entity.
func (guo *GymUpdateOne) ClearAbonementType() *GymUpdateOne {
	guo.mutation.ClearAbonementType()
	return guo
}

// RemoveAbonementTypeIDs removes the "abonement_type" edge to AbonementType entities by IDs.
func (guo *GymUpdateOne) RemoveAbonementTypeIDs(ids ...int) *GymUpdateOne {
	guo.mutation.RemoveAbonementTypeIDs(ids...)
	return guo
}

// RemoveAbonementType removes "abonement_type" edges to AbonementType entities.
func (guo *GymUpdateOne) RemoveAbonementType(a ...*AbonementType) *GymUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return guo.RemoveAbonementTypeIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (guo *GymUpdateOne) ClearOwner() *GymUpdateOne {
	guo.mutation.ClearOwner()
	return guo
}

// ClearAbonements clears all "abonements" edges to the Abonement entity.
func (guo *GymUpdateOne) ClearAbonements() *GymUpdateOne {
	guo.mutation.ClearAbonements()
	return guo
}

// RemoveAbonementIDs removes the "abonements" edge to Abonement entities by IDs.
func (guo *GymUpdateOne) RemoveAbonementIDs(ids ...int) *GymUpdateOne {
	guo.mutation.RemoveAbonementIDs(ids...)
	return guo
}

// RemoveAbonements removes "abonements" edges to Abonement entities.
func (guo *GymUpdateOne) RemoveAbonements(a ...*Abonement) *GymUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return guo.RemoveAbonementIDs(ids...)
}

// ClearUserRoles clears all "user_roles" edges to the UserRole entity.
func (guo *GymUpdateOne) ClearUserRoles() *GymUpdateOne {
	guo.mutation.ClearUserRoles()
	return guo
}

// RemoveUserRoleIDs removes the "user_roles" edge to UserRole entities by IDs.
func (guo *GymUpdateOne) RemoveUserRoleIDs(ids ...int) *GymUpdateOne {
	guo.mutation.RemoveUserRoleIDs(ids...)
	return guo
}

// RemoveUserRoles removes "user_roles" edges to UserRole entities.
func (guo *GymUpdateOne) RemoveUserRoles(u ...*UserRole) *GymUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.RemoveUserRoleIDs(ids...)
}

// ClearManagerRoles clears all "manager_roles" edges to the ManagerRole entity.
func (guo *GymUpdateOne) ClearManagerRoles() *GymUpdateOne {
	guo.mutation.ClearManagerRoles()
	return guo
}

// RemoveManagerRoleIDs removes the "manager_roles" edge to ManagerRole entities by IDs.
func (guo *GymUpdateOne) RemoveManagerRoleIDs(ids ...int) *GymUpdateOne {
	guo.mutation.RemoveManagerRoleIDs(ids...)
	return guo
}

// RemoveManagerRoles removes "manager_roles" edges to ManagerRole entities.
func (guo *GymUpdateOne) RemoveManagerRoles(m ...*ManagerRole) *GymUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return guo.RemoveManagerRoleIDs(ids...)
}

// ClearPaymentRequisite clears the "payment_requisite" edge to the PaymentRequisite entity.
func (guo *GymUpdateOne) ClearPaymentRequisite() *GymUpdateOne {
	guo.mutation.ClearPaymentRequisite()
	return guo
}

// Where appends a list predicates to the GymUpdate builder.
func (guo *GymUpdateOne) Where(ps ...predicate.Gym) *GymUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GymUpdateOne) Select(field string, fields ...string) *GymUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Gym entity.
func (guo *GymUpdateOne) Save(ctx context.Context) (*Gym, error) {
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GymUpdateOne) SaveX(ctx context.Context) *Gym {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GymUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GymUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GymUpdateOne) check() error {
	if guo.mutation.OwnerCleared() && len(guo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Gym.owner"`)
	}
	return nil
}

func (guo *GymUpdateOne) sqlSave(ctx context.Context) (_node *Gym, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(gym.Table, gym.Columns, sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Gym.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gym.FieldID)
		for _, f := range fields {
			if !gym.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gym.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.SetField(gym.FieldName, field.TypeString, value)
	}
	if value, ok := guo.mutation.CurrencyID(); ok {
		_spec.SetField(gym.FieldCurrencyID, field.TypeInt, value)
	}
	if value, ok := guo.mutation.AddedCurrencyID(); ok {
		_spec.AddField(gym.FieldCurrencyID, field.TypeInt, value)
	}
	if value, ok := guo.mutation.Phone(); ok {
		_spec.SetField(gym.FieldPhone, field.TypeString, value)
	}
	if value, ok := guo.mutation.Mail(); ok {
		_spec.SetField(gym.FieldMail, field.TypeString, value)
	}
	if value, ok := guo.mutation.Address(); ok {
		_spec.SetField(gym.FieldAddress, field.TypeString, value)
	}
	if guo.mutation.AddressCleared() {
		_spec.ClearField(gym.FieldAddress, field.TypeString)
	}
	if value, ok := guo.mutation.WebSite(); ok {
		_spec.SetField(gym.FieldWebSite, field.TypeString, value)
	}
	if guo.mutation.WebSiteCleared() {
		_spec.ClearField(gym.FieldWebSite, field.TypeString)
	}
	if value, ok := guo.mutation.Description(); ok {
		_spec.SetField(gym.FieldDescription, field.TypeString, value)
	}
	if guo.mutation.DescriptionCleared() {
		_spec.ClearField(gym.FieldDescription, field.TypeString)
	}
	if value, ok := guo.mutation.CreatedAt(); ok {
		_spec.SetField(gym.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.SetField(gym.FieldUpdatedAt, field.TypeTime, value)
	}
	if guo.mutation.UpdatedAtCleared() {
		_spec.ClearField(gym.FieldUpdatedAt, field.TypeTime)
	}
	if guo.mutation.VisitorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gym.VisitorsTable,
			Columns: gym.VisitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedVisitorsIDs(); len(nodes) > 0 && !guo.mutation.VisitorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gym.VisitorsTable,
			Columns: gym.VisitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.VisitorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gym.VisitorsTable,
			Columns: gym.VisitorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.ManagersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gym.ManagersTable,
			Columns: gym.ManagersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedManagersIDs(); len(nodes) > 0 && !guo.mutation.ManagersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gym.ManagersTable,
			Columns: gym.ManagersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ManagersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   gym.ManagersTable,
			Columns: gym.ManagersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.AbonementTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.AbonementTypeTable,
			Columns: []string{gym.AbonementTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonementtype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedAbonementTypeIDs(); len(nodes) > 0 && !guo.mutation.AbonementTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.AbonementTypeTable,
			Columns: []string{gym.AbonementTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonementtype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.AbonementTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.AbonementTypeTable,
			Columns: []string{gym.AbonementTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonementtype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gym.OwnerTable,
			Columns: []string{gym.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gym.OwnerTable,
			Columns: []string{gym.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.AbonementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.AbonementsTable,
			Columns: []string{gym.AbonementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedAbonementsIDs(); len(nodes) > 0 && !guo.mutation.AbonementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.AbonementsTable,
			Columns: []string{gym.AbonementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.AbonementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.AbonementsTable,
			Columns: []string{gym.AbonementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.UserRolesTable,
			Columns: []string{gym.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedUserRolesIDs(); len(nodes) > 0 && !guo.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.UserRolesTable,
			Columns: []string{gym.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.UserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.UserRolesTable,
			Columns: []string{gym.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.ManagerRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.ManagerRolesTable,
			Columns: []string{gym.ManagerRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(managerrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedManagerRolesIDs(); len(nodes) > 0 && !guo.mutation.ManagerRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.ManagerRolesTable,
			Columns: []string{gym.ManagerRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(managerrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ManagerRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   gym.ManagerRolesTable,
			Columns: []string{gym.ManagerRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(managerrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.PaymentRequisiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   gym.PaymentRequisiteTable,
			Columns: []string{gym.PaymentRequisiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentrequisite.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.PaymentRequisiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   gym.PaymentRequisiteTable,
			Columns: []string{gym.PaymentRequisiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentrequisite.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Gym{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gym.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
