// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gym-api/ent/abonement"
	"gym-api/ent/payment"
	"gym-api/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaymentUpdate is the builder for updating Payment entities.
type PaymentUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentMutation
}

// Where appends a list predicates to the PaymentUpdate builder.
func (pu *PaymentUpdate) Where(ps ...predicate.Payment) *PaymentUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetAmount sets the "amount" field.
func (pu *PaymentUpdate) SetAmount(f float64) *PaymentUpdate {
	pu.mutation.ResetAmount()
	pu.mutation.SetAmount(f)
	return pu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableAmount(f *float64) *PaymentUpdate {
	if f != nil {
		pu.SetAmount(*f)
	}
	return pu
}

// AddAmount adds f to the "amount" field.
func (pu *PaymentUpdate) AddAmount(f float64) *PaymentUpdate {
	pu.mutation.AddAmount(f)
	return pu
}

// SetLinkPhoto sets the "link_photo" field.
func (pu *PaymentUpdate) SetLinkPhoto(s string) *PaymentUpdate {
	pu.mutation.SetLinkPhoto(s)
	return pu
}

// SetNillableLinkPhoto sets the "link_photo" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableLinkPhoto(s *string) *PaymentUpdate {
	if s != nil {
		pu.SetLinkPhoto(*s)
	}
	return pu
}

// ClearLinkPhoto clears the value of the "link_photo" field.
func (pu *PaymentUpdate) ClearLinkPhoto() *PaymentUpdate {
	pu.mutation.ClearLinkPhoto()
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PaymentUpdate) SetCreatedAt(t time.Time) *PaymentUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableCreatedAt(t *time.Time) *PaymentUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetConfirmedAt sets the "confirmed_at" field.
func (pu *PaymentUpdate) SetConfirmedAt(t time.Time) *PaymentUpdate {
	pu.mutation.SetConfirmedAt(t)
	return pu
}

// SetNillableConfirmedAt sets the "confirmed_at" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableConfirmedAt(t *time.Time) *PaymentUpdate {
	if t != nil {
		pu.SetConfirmedAt(*t)
	}
	return pu
}

// ClearConfirmedAt clears the value of the "confirmed_at" field.
func (pu *PaymentUpdate) ClearConfirmedAt() *PaymentUpdate {
	pu.mutation.ClearConfirmedAt()
	return pu
}

// SetIsConfirmed sets the "is_confirmed" field.
func (pu *PaymentUpdate) SetIsConfirmed(b bool) *PaymentUpdate {
	pu.mutation.SetIsConfirmed(b)
	return pu
}

// SetNillableIsConfirmed sets the "is_confirmed" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableIsConfirmed(b *bool) *PaymentUpdate {
	if b != nil {
		pu.SetIsConfirmed(*b)
	}
	return pu
}

// SetAbonementID sets the "abonement" edge to the Abonement entity by ID.
func (pu *PaymentUpdate) SetAbonementID(id int) *PaymentUpdate {
	pu.mutation.SetAbonementID(id)
	return pu
}

// SetAbonement sets the "abonement" edge to the Abonement entity.
func (pu *PaymentUpdate) SetAbonement(a *Abonement) *PaymentUpdate {
	return pu.SetAbonementID(a.ID)
}

// Mutation returns the PaymentMutation object of the builder.
func (pu *PaymentUpdate) Mutation() *PaymentMutation {
	return pu.mutation
}

// ClearAbonement clears the "abonement" edge to the Abonement entity.
func (pu *PaymentUpdate) ClearAbonement() *PaymentUpdate {
	pu.mutation.ClearAbonement()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PaymentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PaymentUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PaymentUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PaymentUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PaymentUpdate) check() error {
	if pu.mutation.AbonementCleared() && len(pu.mutation.AbonementIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Payment.abonement"`)
	}
	return nil
}

func (pu *PaymentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(payment.Table, payment.Columns, sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Amount(); ok {
		_spec.SetField(payment.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedAmount(); ok {
		_spec.AddField(payment.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.LinkPhoto(); ok {
		_spec.SetField(payment.FieldLinkPhoto, field.TypeString, value)
	}
	if pu.mutation.LinkPhotoCleared() {
		_spec.ClearField(payment.FieldLinkPhoto, field.TypeString)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(payment.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.ConfirmedAt(); ok {
		_spec.SetField(payment.FieldConfirmedAt, field.TypeTime, value)
	}
	if pu.mutation.ConfirmedAtCleared() {
		_spec.ClearField(payment.FieldConfirmedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.IsConfirmed(); ok {
		_spec.SetField(payment.FieldIsConfirmed, field.TypeBool, value)
	}
	if pu.mutation.AbonementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   payment.AbonementTable,
			Columns: []string{payment.AbonementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AbonementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   payment.AbonementTable,
			Columns: []string{payment.AbonementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PaymentUpdateOne is the builder for updating a single Payment entity.
type PaymentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentMutation
}

// SetAmount sets the "amount" field.
func (puo *PaymentUpdateOne) SetAmount(f float64) *PaymentUpdateOne {
	puo.mutation.ResetAmount()
	puo.mutation.SetAmount(f)
	return puo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableAmount(f *float64) *PaymentUpdateOne {
	if f != nil {
		puo.SetAmount(*f)
	}
	return puo
}

// AddAmount adds f to the "amount" field.
func (puo *PaymentUpdateOne) AddAmount(f float64) *PaymentUpdateOne {
	puo.mutation.AddAmount(f)
	return puo
}

// SetLinkPhoto sets the "link_photo" field.
func (puo *PaymentUpdateOne) SetLinkPhoto(s string) *PaymentUpdateOne {
	puo.mutation.SetLinkPhoto(s)
	return puo
}

// SetNillableLinkPhoto sets the "link_photo" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableLinkPhoto(s *string) *PaymentUpdateOne {
	if s != nil {
		puo.SetLinkPhoto(*s)
	}
	return puo
}

// ClearLinkPhoto clears the value of the "link_photo" field.
func (puo *PaymentUpdateOne) ClearLinkPhoto() *PaymentUpdateOne {
	puo.mutation.ClearLinkPhoto()
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PaymentUpdateOne) SetCreatedAt(t time.Time) *PaymentUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableCreatedAt(t *time.Time) *PaymentUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetConfirmedAt sets the "confirmed_at" field.
func (puo *PaymentUpdateOne) SetConfirmedAt(t time.Time) *PaymentUpdateOne {
	puo.mutation.SetConfirmedAt(t)
	return puo
}

// SetNillableConfirmedAt sets the "confirmed_at" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableConfirmedAt(t *time.Time) *PaymentUpdateOne {
	if t != nil {
		puo.SetConfirmedAt(*t)
	}
	return puo
}

// ClearConfirmedAt clears the value of the "confirmed_at" field.
func (puo *PaymentUpdateOne) ClearConfirmedAt() *PaymentUpdateOne {
	puo.mutation.ClearConfirmedAt()
	return puo
}

// SetIsConfirmed sets the "is_confirmed" field.
func (puo *PaymentUpdateOne) SetIsConfirmed(b bool) *PaymentUpdateOne {
	puo.mutation.SetIsConfirmed(b)
	return puo
}

// SetNillableIsConfirmed sets the "is_confirmed" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableIsConfirmed(b *bool) *PaymentUpdateOne {
	if b != nil {
		puo.SetIsConfirmed(*b)
	}
	return puo
}

// SetAbonementID sets the "abonement" edge to the Abonement entity by ID.
func (puo *PaymentUpdateOne) SetAbonementID(id int) *PaymentUpdateOne {
	puo.mutation.SetAbonementID(id)
	return puo
}

// SetAbonement sets the "abonement" edge to the Abonement entity.
func (puo *PaymentUpdateOne) SetAbonement(a *Abonement) *PaymentUpdateOne {
	return puo.SetAbonementID(a.ID)
}

// Mutation returns the PaymentMutation object of the builder.
func (puo *PaymentUpdateOne) Mutation() *PaymentMutation {
	return puo.mutation
}

// ClearAbonement clears the "abonement" edge to the Abonement entity.
func (puo *PaymentUpdateOne) ClearAbonement() *PaymentUpdateOne {
	puo.mutation.ClearAbonement()
	return puo
}

// Where appends a list predicates to the PaymentUpdate builder.
func (puo *PaymentUpdateOne) Where(ps ...predicate.Payment) *PaymentUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PaymentUpdateOne) Select(field string, fields ...string) *PaymentUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Payment entity.
func (puo *PaymentUpdateOne) Save(ctx context.Context) (*Payment, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PaymentUpdateOne) SaveX(ctx context.Context) *Payment {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PaymentUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PaymentUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PaymentUpdateOne) check() error {
	if puo.mutation.AbonementCleared() && len(puo.mutation.AbonementIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Payment.abonement"`)
	}
	return nil
}

func (puo *PaymentUpdateOne) sqlSave(ctx context.Context) (_node *Payment, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(payment.Table, payment.Columns, sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Payment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, payment.FieldID)
		for _, f := range fields {
			if !payment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != payment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Amount(); ok {
		_spec.SetField(payment.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedAmount(); ok {
		_spec.AddField(payment.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.LinkPhoto(); ok {
		_spec.SetField(payment.FieldLinkPhoto, field.TypeString, value)
	}
	if puo.mutation.LinkPhotoCleared() {
		_spec.ClearField(payment.FieldLinkPhoto, field.TypeString)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(payment.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.ConfirmedAt(); ok {
		_spec.SetField(payment.FieldConfirmedAt, field.TypeTime, value)
	}
	if puo.mutation.ConfirmedAtCleared() {
		_spec.ClearField(payment.FieldConfirmedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.IsConfirmed(); ok {
		_spec.SetField(payment.FieldIsConfirmed, field.TypeBool, value)
	}
	if puo.mutation.AbonementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   payment.AbonementTable,
			Columns: []string{payment.AbonementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AbonementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   payment.AbonementTable,
			Columns: []string{payment.AbonementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Payment{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
