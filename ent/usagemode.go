// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gym-api/ent/usagemode"
	"gym-api/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UsageMode is the model entity for the UsageMode schema.
type UsageMode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Mode holds the value of the "mode" field.
	Mode usagemode.Mode `json:"mode,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// PaidActivatedAt holds the value of the "paid_activated_at" field.
	PaidActivatedAt time.Time `json:"paid_activated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UsageModeQuery when eager-loading is set.
	Edges        UsageModeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UsageModeEdges holds the relations/edges for other nodes in the graph.
type UsageModeEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UsageModeEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UsageMode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usagemode.FieldID:
			values[i] = new(sql.NullInt64)
		case usagemode.FieldMode:
			values[i] = new(sql.NullString)
		case usagemode.FieldCreatedAt, usagemode.FieldPaidActivatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UsageMode fields.
func (um *UsageMode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usagemode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			um.ID = int(value.Int64)
		case usagemode.FieldMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mode", values[i])
			} else if value.Valid {
				um.Mode = usagemode.Mode(value.String)
			}
		case usagemode.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				um.CreatedAt = value.Time
			}
		case usagemode.FieldPaidActivatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field paid_activated_at", values[i])
			} else if value.Valid {
				um.PaidActivatedAt = value.Time
			}
		default:
			um.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UsageMode.
// This includes values selected through modifiers, order, etc.
func (um *UsageMode) Value(name string) (ent.Value, error) {
	return um.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UsageMode entity.
func (um *UsageMode) QueryUser() *UserQuery {
	return NewUsageModeClient(um.config).QueryUser(um)
}

// Update returns a builder for updating this UsageMode.
// Note that you need to call UsageMode.Unwrap() before calling this method if this UsageMode
// was returned from a transaction, and the transaction was committed or rolled back.
func (um *UsageMode) Update() *UsageModeUpdateOne {
	return NewUsageModeClient(um.config).UpdateOne(um)
}

// Unwrap unwraps the UsageMode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (um *UsageMode) Unwrap() *UsageMode {
	_tx, ok := um.config.driver.(*txDriver)
	if !ok {
		panic("ent: UsageMode is not a transactional entity")
	}
	um.config.driver = _tx.drv
	return um
}

// String implements the fmt.Stringer.
func (um *UsageMode) String() string {
	var builder strings.Builder
	builder.WriteString("UsageMode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", um.ID))
	builder.WriteString("mode=")
	builder.WriteString(fmt.Sprintf("%v", um.Mode))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(um.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("paid_activated_at=")
	builder.WriteString(um.PaidActivatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UsageModes is a parsable slice of UsageMode.
type UsageModes []*UsageMode
