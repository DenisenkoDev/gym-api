// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gym-api/ent/gym"
	"gym-api/ent/paymentrequisite"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PaymentRequisite is the model entity for the PaymentRequisite schema.
type PaymentRequisite struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BankKard1 holds the value of the "bank_kard_1" field.
	BankKard1 string `json:"bank_kard_1,omitempty"`
	// BankKard2 holds the value of the "bank_kard_2" field.
	BankKard2 string `json:"bank_kard_2,omitempty"`
	// BankKard3 holds the value of the "bank_kard_3" field.
	BankKard3 string `json:"bank_kard_3,omitempty"`
	// BankKard4 holds the value of the "bank_kard_4" field.
	BankKard4 string `json:"bank_kard_4,omitempty"`
	// BankKard5 holds the value of the "bank_kard_5" field.
	BankKard5 string `json:"bank_kard_5,omitempty"`
	// NameBankKard1 holds the value of the "name_bank_kard_1" field.
	NameBankKard1 string `json:"name_bank_kard_1,omitempty"`
	// NameBankKard2 holds the value of the "name_bank_kard_2" field.
	NameBankKard2 string `json:"name_bank_kard_2,omitempty"`
	// NameBankKard3 holds the value of the "name_bank_kard_3" field.
	NameBankKard3 string `json:"name_bank_kard_3,omitempty"`
	// NameBankKard4 holds the value of the "name_bank_kard_4" field.
	NameBankKard4 string `json:"name_bank_kard_4,omitempty"`
	// NameBankKard5 holds the value of the "name_bank_kard_5" field.
	NameBankKard5 string `json:"name_bank_kard_5,omitempty"`
	// NameBank holds the value of the "name_bank" field.
	NameBank string `json:"name_bank,omitempty"`
	// Iban holds the value of the "iban" field.
	Iban string `json:"iban,omitempty"`
	// Edrpou holds the value of the "edrpou" field.
	Edrpou string `json:"edrpou,omitempty"`
	// ReceiverName holds the value of the "receiver_name" field.
	ReceiverName string `json:"receiver_name,omitempty"`
	// PaymentPurpose holds the value of the "payment_purpose" field.
	PaymentPurpose string `json:"payment_purpose,omitempty"`
	// Mfo holds the value of the "mfo" field.
	Mfo string `json:"mfo,omitempty"`
	// AccountNumber holds the value of the "account_number" field.
	AccountNumber string `json:"account_number,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentRequisiteQuery when eager-loading is set.
	Edges        PaymentRequisiteEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PaymentRequisiteEdges holds the relations/edges for other nodes in the graph.
type PaymentRequisiteEdges struct {
	// Gym holds the value of the gym edge.
	Gym *Gym `json:"gym,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GymOrErr returns the Gym value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentRequisiteEdges) GymOrErr() (*Gym, error) {
	if e.Gym != nil {
		return e.Gym, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: gym.Label}
	}
	return nil, &NotLoadedError{edge: "gym"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentRequisite) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymentrequisite.FieldID:
			values[i] = new(sql.NullInt64)
		case paymentrequisite.FieldBankKard1, paymentrequisite.FieldBankKard2, paymentrequisite.FieldBankKard3, paymentrequisite.FieldBankKard4, paymentrequisite.FieldBankKard5, paymentrequisite.FieldNameBankKard1, paymentrequisite.FieldNameBankKard2, paymentrequisite.FieldNameBankKard3, paymentrequisite.FieldNameBankKard4, paymentrequisite.FieldNameBankKard5, paymentrequisite.FieldNameBank, paymentrequisite.FieldIban, paymentrequisite.FieldEdrpou, paymentrequisite.FieldReceiverName, paymentrequisite.FieldPaymentPurpose, paymentrequisite.FieldMfo, paymentrequisite.FieldAccountNumber:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentRequisite fields.
func (pr *PaymentRequisite) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymentrequisite.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case paymentrequisite.FieldBankKard1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank_kard_1", values[i])
			} else if value.Valid {
				pr.BankKard1 = value.String
			}
		case paymentrequisite.FieldBankKard2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank_kard_2", values[i])
			} else if value.Valid {
				pr.BankKard2 = value.String
			}
		case paymentrequisite.FieldBankKard3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank_kard_3", values[i])
			} else if value.Valid {
				pr.BankKard3 = value.String
			}
		case paymentrequisite.FieldBankKard4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank_kard_4", values[i])
			} else if value.Valid {
				pr.BankKard4 = value.String
			}
		case paymentrequisite.FieldBankKard5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank_kard_5", values[i])
			} else if value.Valid {
				pr.BankKard5 = value.String
			}
		case paymentrequisite.FieldNameBankKard1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_bank_kard_1", values[i])
			} else if value.Valid {
				pr.NameBankKard1 = value.String
			}
		case paymentrequisite.FieldNameBankKard2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_bank_kard_2", values[i])
			} else if value.Valid {
				pr.NameBankKard2 = value.String
			}
		case paymentrequisite.FieldNameBankKard3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_bank_kard_3", values[i])
			} else if value.Valid {
				pr.NameBankKard3 = value.String
			}
		case paymentrequisite.FieldNameBankKard4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_bank_kard_4", values[i])
			} else if value.Valid {
				pr.NameBankKard4 = value.String
			}
		case paymentrequisite.FieldNameBankKard5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_bank_kard_5", values[i])
			} else if value.Valid {
				pr.NameBankKard5 = value.String
			}
		case paymentrequisite.FieldNameBank:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_bank", values[i])
			} else if value.Valid {
				pr.NameBank = value.String
			}
		case paymentrequisite.FieldIban:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field iban", values[i])
			} else if value.Valid {
				pr.Iban = value.String
			}
		case paymentrequisite.FieldEdrpou:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field edrpou", values[i])
			} else if value.Valid {
				pr.Edrpou = value.String
			}
		case paymentrequisite.FieldReceiverName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_name", values[i])
			} else if value.Valid {
				pr.ReceiverName = value.String
			}
		case paymentrequisite.FieldPaymentPurpose:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_purpose", values[i])
			} else if value.Valid {
				pr.PaymentPurpose = value.String
			}
		case paymentrequisite.FieldMfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mfo", values[i])
			} else if value.Valid {
				pr.Mfo = value.String
			}
		case paymentrequisite.FieldAccountNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_number", values[i])
			} else if value.Valid {
				pr.AccountNumber = value.String
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaymentRequisite.
// This includes values selected through modifiers, order, etc.
func (pr *PaymentRequisite) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryGym queries the "gym" edge of the PaymentRequisite entity.
func (pr *PaymentRequisite) QueryGym() *GymQuery {
	return NewPaymentRequisiteClient(pr.config).QueryGym(pr)
}

// Update returns a builder for updating this PaymentRequisite.
// Note that you need to call PaymentRequisite.Unwrap() before calling this method if this PaymentRequisite
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *PaymentRequisite) Update() *PaymentRequisiteUpdateOne {
	return NewPaymentRequisiteClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the PaymentRequisite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *PaymentRequisite) Unwrap() *PaymentRequisite {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentRequisite is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *PaymentRequisite) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentRequisite(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("bank_kard_1=")
	builder.WriteString(pr.BankKard1)
	builder.WriteString(", ")
	builder.WriteString("bank_kard_2=")
	builder.WriteString(pr.BankKard2)
	builder.WriteString(", ")
	builder.WriteString("bank_kard_3=")
	builder.WriteString(pr.BankKard3)
	builder.WriteString(", ")
	builder.WriteString("bank_kard_4=")
	builder.WriteString(pr.BankKard4)
	builder.WriteString(", ")
	builder.WriteString("bank_kard_5=")
	builder.WriteString(pr.BankKard5)
	builder.WriteString(", ")
	builder.WriteString("name_bank_kard_1=")
	builder.WriteString(pr.NameBankKard1)
	builder.WriteString(", ")
	builder.WriteString("name_bank_kard_2=")
	builder.WriteString(pr.NameBankKard2)
	builder.WriteString(", ")
	builder.WriteString("name_bank_kard_3=")
	builder.WriteString(pr.NameBankKard3)
	builder.WriteString(", ")
	builder.WriteString("name_bank_kard_4=")
	builder.WriteString(pr.NameBankKard4)
	builder.WriteString(", ")
	builder.WriteString("name_bank_kard_5=")
	builder.WriteString(pr.NameBankKard5)
	builder.WriteString(", ")
	builder.WriteString("name_bank=")
	builder.WriteString(pr.NameBank)
	builder.WriteString(", ")
	builder.WriteString("iban=")
	builder.WriteString(pr.Iban)
	builder.WriteString(", ")
	builder.WriteString("edrpou=")
	builder.WriteString(pr.Edrpou)
	builder.WriteString(", ")
	builder.WriteString("receiver_name=")
	builder.WriteString(pr.ReceiverName)
	builder.WriteString(", ")
	builder.WriteString("payment_purpose=")
	builder.WriteString(pr.PaymentPurpose)
	builder.WriteString(", ")
	builder.WriteString("mfo=")
	builder.WriteString(pr.Mfo)
	builder.WriteString(", ")
	builder.WriteString("account_number=")
	builder.WriteString(pr.AccountNumber)
	builder.WriteByte(')')
	return builder.String()
}

// PaymentRequisites is a parsable slice of PaymentRequisite.
type PaymentRequisites []*PaymentRequisite
