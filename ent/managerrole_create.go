// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gym-api/ent/gym"
	"gym-api/ent/managerrole"
	"gym-api/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ManagerRoleCreate is the builder for creating a ManagerRole entity.
type ManagerRoleCreate struct {
	config
	mutation *ManagerRoleMutation
	hooks    []Hook
}

// SetManagerRole sets the "manager_role" field.
func (mrc *ManagerRoleCreate) SetManagerRole(mr managerrole.ManagerRole) *ManagerRoleCreate {
	mrc.mutation.SetManagerRole(mr)
	return mrc
}

// SetCreatedAt sets the "created_at" field.
func (mrc *ManagerRoleCreate) SetCreatedAt(t time.Time) *ManagerRoleCreate {
	mrc.mutation.SetCreatedAt(t)
	return mrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mrc *ManagerRoleCreate) SetNillableCreatedAt(t *time.Time) *ManagerRoleCreate {
	if t != nil {
		mrc.SetCreatedAt(*t)
	}
	return mrc
}

// SetUpdatedAt sets the "updated_at" field.
func (mrc *ManagerRoleCreate) SetUpdatedAt(t time.Time) *ManagerRoleCreate {
	mrc.mutation.SetUpdatedAt(t)
	return mrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mrc *ManagerRoleCreate) SetNillableUpdatedAt(t *time.Time) *ManagerRoleCreate {
	if t != nil {
		mrc.SetUpdatedAt(*t)
	}
	return mrc
}

// SetIsClose sets the "is_close" field.
func (mrc *ManagerRoleCreate) SetIsClose(b bool) *ManagerRoleCreate {
	mrc.mutation.SetIsClose(b)
	return mrc
}

// SetNillableIsClose sets the "is_close" field if the given value is not nil.
func (mrc *ManagerRoleCreate) SetNillableIsClose(b *bool) *ManagerRoleCreate {
	if b != nil {
		mrc.SetIsClose(*b)
	}
	return mrc
}

// SetGymID sets the "gym" edge to the Gym entity by ID.
func (mrc *ManagerRoleCreate) SetGymID(id int) *ManagerRoleCreate {
	mrc.mutation.SetGymID(id)
	return mrc
}

// SetGym sets the "gym" edge to the Gym entity.
func (mrc *ManagerRoleCreate) SetGym(g *Gym) *ManagerRoleCreate {
	return mrc.SetGymID(g.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mrc *ManagerRoleCreate) SetUserID(id int) *ManagerRoleCreate {
	mrc.mutation.SetUserID(id)
	return mrc
}

// SetUser sets the "user" edge to the User entity.
func (mrc *ManagerRoleCreate) SetUser(u *User) *ManagerRoleCreate {
	return mrc.SetUserID(u.ID)
}

// Mutation returns the ManagerRoleMutation object of the builder.
func (mrc *ManagerRoleCreate) Mutation() *ManagerRoleMutation {
	return mrc.mutation
}

// Save creates the ManagerRole in the database.
func (mrc *ManagerRoleCreate) Save(ctx context.Context) (*ManagerRole, error) {
	mrc.defaults()
	return withHooks(ctx, mrc.sqlSave, mrc.mutation, mrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mrc *ManagerRoleCreate) SaveX(ctx context.Context) *ManagerRole {
	v, err := mrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mrc *ManagerRoleCreate) Exec(ctx context.Context) error {
	_, err := mrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrc *ManagerRoleCreate) ExecX(ctx context.Context) {
	if err := mrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mrc *ManagerRoleCreate) defaults() {
	if _, ok := mrc.mutation.CreatedAt(); !ok {
		v := managerrole.DefaultCreatedAt()
		mrc.mutation.SetCreatedAt(v)
	}
	if _, ok := mrc.mutation.IsClose(); !ok {
		v := managerrole.DefaultIsClose
		mrc.mutation.SetIsClose(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mrc *ManagerRoleCreate) check() error {
	if _, ok := mrc.mutation.ManagerRole(); !ok {
		return &ValidationError{Name: "manager_role", err: errors.New(`ent: missing required field "ManagerRole.manager_role"`)}
	}
	if v, ok := mrc.mutation.ManagerRole(); ok {
		if err := managerrole.ManagerRoleValidator(v); err != nil {
			return &ValidationError{Name: "manager_role", err: fmt.Errorf(`ent: validator failed for field "ManagerRole.manager_role": %w`, err)}
		}
	}
	if _, ok := mrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ManagerRole.created_at"`)}
	}
	if _, ok := mrc.mutation.IsClose(); !ok {
		return &ValidationError{Name: "is_close", err: errors.New(`ent: missing required field "ManagerRole.is_close"`)}
	}
	if len(mrc.mutation.GymIDs()) == 0 {
		return &ValidationError{Name: "gym", err: errors.New(`ent: missing required edge "ManagerRole.gym"`)}
	}
	if len(mrc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ManagerRole.user"`)}
	}
	return nil
}

func (mrc *ManagerRoleCreate) sqlSave(ctx context.Context) (*ManagerRole, error) {
	if err := mrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mrc.mutation.id = &_node.ID
	mrc.mutation.done = true
	return _node, nil
}

func (mrc *ManagerRoleCreate) createSpec() (*ManagerRole, *sqlgraph.CreateSpec) {
	var (
		_node = &ManagerRole{config: mrc.config}
		_spec = sqlgraph.NewCreateSpec(managerrole.Table, sqlgraph.NewFieldSpec(managerrole.FieldID, field.TypeInt))
	)
	if value, ok := mrc.mutation.ManagerRole(); ok {
		_spec.SetField(managerrole.FieldManagerRole, field.TypeEnum, value)
		_node.ManagerRole = value
	}
	if value, ok := mrc.mutation.CreatedAt(); ok {
		_spec.SetField(managerrole.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mrc.mutation.UpdatedAt(); ok {
		_spec.SetField(managerrole.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mrc.mutation.IsClose(); ok {
		_spec.SetField(managerrole.FieldIsClose, field.TypeBool, value)
		_node.IsClose = value
	}
	if nodes := mrc.mutation.GymIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   managerrole.GymTable,
			Columns: []string{managerrole.GymColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.manager_role_gym = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   managerrole.UserTable,
			Columns: []string{managerrole.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.manager_role_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ManagerRoleCreateBulk is the builder for creating many ManagerRole entities in bulk.
type ManagerRoleCreateBulk struct {
	config
	err      error
	builders []*ManagerRoleCreate
}

// Save creates the ManagerRole entities in the database.
func (mrcb *ManagerRoleCreateBulk) Save(ctx context.Context) ([]*ManagerRole, error) {
	if mrcb.err != nil {
		return nil, mrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mrcb.builders))
	nodes := make([]*ManagerRole, len(mrcb.builders))
	mutators := make([]Mutator, len(mrcb.builders))
	for i := range mrcb.builders {
		func(i int, root context.Context) {
			builder := mrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ManagerRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mrcb *ManagerRoleCreateBulk) SaveX(ctx context.Context) []*ManagerRole {
	v, err := mrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mrcb *ManagerRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := mrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrcb *ManagerRoleCreateBulk) ExecX(ctx context.Context) {
	if err := mrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
