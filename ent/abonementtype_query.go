// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"gym-api/ent/abonement"
	"gym-api/ent/abonementtype"
	"gym-api/ent/gym"
	"gym-api/ent/predicate"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AbonementTypeQuery is the builder for querying AbonementType entities.
type AbonementTypeQuery struct {
	config
	ctx           *QueryContext
	order         []abonementtype.OrderOption
	inters        []Interceptor
	predicates    []predicate.AbonementType
	withGym       *GymQuery
	withAbonement *AbonementQuery
	withFKs       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AbonementTypeQuery builder.
func (atq *AbonementTypeQuery) Where(ps ...predicate.AbonementType) *AbonementTypeQuery {
	atq.predicates = append(atq.predicates, ps...)
	return atq
}

// Limit the number of records to be returned by this query.
func (atq *AbonementTypeQuery) Limit(limit int) *AbonementTypeQuery {
	atq.ctx.Limit = &limit
	return atq
}

// Offset to start from.
func (atq *AbonementTypeQuery) Offset(offset int) *AbonementTypeQuery {
	atq.ctx.Offset = &offset
	return atq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (atq *AbonementTypeQuery) Unique(unique bool) *AbonementTypeQuery {
	atq.ctx.Unique = &unique
	return atq
}

// Order specifies how the records should be ordered.
func (atq *AbonementTypeQuery) Order(o ...abonementtype.OrderOption) *AbonementTypeQuery {
	atq.order = append(atq.order, o...)
	return atq
}

// QueryGym chains the current query on the "gym" edge.
func (atq *AbonementTypeQuery) QueryGym() *GymQuery {
	query := (&GymClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(abonementtype.Table, abonementtype.FieldID, selector),
			sqlgraph.To(gym.Table, gym.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, abonementtype.GymTable, abonementtype.GymColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAbonement chains the current query on the "abonement" edge.
func (atq *AbonementTypeQuery) QueryAbonement() *AbonementQuery {
	query := (&AbonementClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(abonementtype.Table, abonementtype.FieldID, selector),
			sqlgraph.To(abonement.Table, abonement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, abonementtype.AbonementTable, abonementtype.AbonementColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AbonementType entity from the query.
// Returns a *NotFoundError when no AbonementType was found.
func (atq *AbonementTypeQuery) First(ctx context.Context) (*AbonementType, error) {
	nodes, err := atq.Limit(1).All(setContextOp(ctx, atq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{abonementtype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (atq *AbonementTypeQuery) FirstX(ctx context.Context) *AbonementType {
	node, err := atq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AbonementType ID from the query.
// Returns a *NotFoundError when no AbonementType ID was found.
func (atq *AbonementTypeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = atq.Limit(1).IDs(setContextOp(ctx, atq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{abonementtype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (atq *AbonementTypeQuery) FirstIDX(ctx context.Context) int {
	id, err := atq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AbonementType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AbonementType entity is found.
// Returns a *NotFoundError when no AbonementType entities are found.
func (atq *AbonementTypeQuery) Only(ctx context.Context) (*AbonementType, error) {
	nodes, err := atq.Limit(2).All(setContextOp(ctx, atq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{abonementtype.Label}
	default:
		return nil, &NotSingularError{abonementtype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (atq *AbonementTypeQuery) OnlyX(ctx context.Context) *AbonementType {
	node, err := atq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AbonementType ID in the query.
// Returns a *NotSingularError when more than one AbonementType ID is found.
// Returns a *NotFoundError when no entities are found.
func (atq *AbonementTypeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = atq.Limit(2).IDs(setContextOp(ctx, atq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{abonementtype.Label}
	default:
		err = &NotSingularError{abonementtype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (atq *AbonementTypeQuery) OnlyIDX(ctx context.Context) int {
	id, err := atq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AbonementTypes.
func (atq *AbonementTypeQuery) All(ctx context.Context) ([]*AbonementType, error) {
	ctx = setContextOp(ctx, atq.ctx, ent.OpQueryAll)
	if err := atq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AbonementType, *AbonementTypeQuery]()
	return withInterceptors[[]*AbonementType](ctx, atq, qr, atq.inters)
}

// AllX is like All, but panics if an error occurs.
func (atq *AbonementTypeQuery) AllX(ctx context.Context) []*AbonementType {
	nodes, err := atq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AbonementType IDs.
func (atq *AbonementTypeQuery) IDs(ctx context.Context) (ids []int, err error) {
	if atq.ctx.Unique == nil && atq.path != nil {
		atq.Unique(true)
	}
	ctx = setContextOp(ctx, atq.ctx, ent.OpQueryIDs)
	if err = atq.Select(abonementtype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (atq *AbonementTypeQuery) IDsX(ctx context.Context) []int {
	ids, err := atq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (atq *AbonementTypeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, atq.ctx, ent.OpQueryCount)
	if err := atq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, atq, querierCount[*AbonementTypeQuery](), atq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (atq *AbonementTypeQuery) CountX(ctx context.Context) int {
	count, err := atq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (atq *AbonementTypeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, atq.ctx, ent.OpQueryExist)
	switch _, err := atq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (atq *AbonementTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := atq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AbonementTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (atq *AbonementTypeQuery) Clone() *AbonementTypeQuery {
	if atq == nil {
		return nil
	}
	return &AbonementTypeQuery{
		config:        atq.config,
		ctx:           atq.ctx.Clone(),
		order:         append([]abonementtype.OrderOption{}, atq.order...),
		inters:        append([]Interceptor{}, atq.inters...),
		predicates:    append([]predicate.AbonementType{}, atq.predicates...),
		withGym:       atq.withGym.Clone(),
		withAbonement: atq.withAbonement.Clone(),
		// clone intermediate query.
		sql:  atq.sql.Clone(),
		path: atq.path,
	}
}

// WithGym tells the query-builder to eager-load the nodes that are connected to
// the "gym" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AbonementTypeQuery) WithGym(opts ...func(*GymQuery)) *AbonementTypeQuery {
	query := (&GymClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withGym = query
	return atq
}

// WithAbonement tells the query-builder to eager-load the nodes that are connected to
// the "abonement" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AbonementTypeQuery) WithAbonement(opts ...func(*AbonementQuery)) *AbonementTypeQuery {
	query := (&AbonementClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withAbonement = query
	return atq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AbonementType.Query().
//		GroupBy(abonementtype.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (atq *AbonementTypeQuery) GroupBy(field string, fields ...string) *AbonementTypeGroupBy {
	atq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AbonementTypeGroupBy{build: atq}
	grbuild.flds = &atq.ctx.Fields
	grbuild.label = abonementtype.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.AbonementType.Query().
//		Select(abonementtype.FieldName).
//		Scan(ctx, &v)
func (atq *AbonementTypeQuery) Select(fields ...string) *AbonementTypeSelect {
	atq.ctx.Fields = append(atq.ctx.Fields, fields...)
	sbuild := &AbonementTypeSelect{AbonementTypeQuery: atq}
	sbuild.label = abonementtype.Label
	sbuild.flds, sbuild.scan = &atq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AbonementTypeSelect configured with the given aggregations.
func (atq *AbonementTypeQuery) Aggregate(fns ...AggregateFunc) *AbonementTypeSelect {
	return atq.Select().Aggregate(fns...)
}

func (atq *AbonementTypeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range atq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, atq); err != nil {
				return err
			}
		}
	}
	for _, f := range atq.ctx.Fields {
		if !abonementtype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if atq.path != nil {
		prev, err := atq.path(ctx)
		if err != nil {
			return err
		}
		atq.sql = prev
	}
	return nil
}

func (atq *AbonementTypeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AbonementType, error) {
	var (
		nodes       = []*AbonementType{}
		withFKs     = atq.withFKs
		_spec       = atq.querySpec()
		loadedTypes = [2]bool{
			atq.withGym != nil,
			atq.withAbonement != nil,
		}
	)
	if atq.withGym != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, abonementtype.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AbonementType).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AbonementType{config: atq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, atq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := atq.withGym; query != nil {
		if err := atq.loadGym(ctx, query, nodes, nil,
			func(n *AbonementType, e *Gym) { n.Edges.Gym = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withAbonement; query != nil {
		if err := atq.loadAbonement(ctx, query, nodes,
			func(n *AbonementType) { n.Edges.Abonement = []*Abonement{} },
			func(n *AbonementType, e *Abonement) { n.Edges.Abonement = append(n.Edges.Abonement, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (atq *AbonementTypeQuery) loadGym(ctx context.Context, query *GymQuery, nodes []*AbonementType, init func(*AbonementType), assign func(*AbonementType, *Gym)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*AbonementType)
	for i := range nodes {
		if nodes[i].abonement_type_gym == nil {
			continue
		}
		fk := *nodes[i].abonement_type_gym
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(gym.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "abonement_type_gym" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AbonementTypeQuery) loadAbonement(ctx context.Context, query *AbonementQuery, nodes []*AbonementType, init func(*AbonementType), assign func(*AbonementType, *Abonement)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*AbonementType)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Abonement(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(abonementtype.AbonementColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.abonement_type_abonement
		if fk == nil {
			return fmt.Errorf(`foreign-key "abonement_type_abonement" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "abonement_type_abonement" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (atq *AbonementTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := atq.querySpec()
	_spec.Node.Columns = atq.ctx.Fields
	if len(atq.ctx.Fields) > 0 {
		_spec.Unique = atq.ctx.Unique != nil && *atq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, atq.driver, _spec)
}

func (atq *AbonementTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(abonementtype.Table, abonementtype.Columns, sqlgraph.NewFieldSpec(abonementtype.FieldID, field.TypeInt))
	_spec.From = atq.sql
	if unique := atq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if atq.path != nil {
		_spec.Unique = true
	}
	if fields := atq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, abonementtype.FieldID)
		for i := range fields {
			if fields[i] != abonementtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := atq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := atq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := atq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := atq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (atq *AbonementTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(atq.driver.Dialect())
	t1 := builder.Table(abonementtype.Table)
	columns := atq.ctx.Fields
	if len(columns) == 0 {
		columns = abonementtype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if atq.sql != nil {
		selector = atq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if atq.ctx.Unique != nil && *atq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range atq.predicates {
		p(selector)
	}
	for _, p := range atq.order {
		p(selector)
	}
	if offset := atq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := atq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AbonementTypeGroupBy is the group-by builder for AbonementType entities.
type AbonementTypeGroupBy struct {
	selector
	build *AbonementTypeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (atgb *AbonementTypeGroupBy) Aggregate(fns ...AggregateFunc) *AbonementTypeGroupBy {
	atgb.fns = append(atgb.fns, fns...)
	return atgb
}

// Scan applies the selector query and scans the result into the given value.
func (atgb *AbonementTypeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, atgb.build.ctx, ent.OpQueryGroupBy)
	if err := atgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AbonementTypeQuery, *AbonementTypeGroupBy](ctx, atgb.build, atgb, atgb.build.inters, v)
}

func (atgb *AbonementTypeGroupBy) sqlScan(ctx context.Context, root *AbonementTypeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(atgb.fns))
	for _, fn := range atgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*atgb.flds)+len(atgb.fns))
		for _, f := range *atgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*atgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := atgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AbonementTypeSelect is the builder for selecting fields of AbonementType entities.
type AbonementTypeSelect struct {
	*AbonementTypeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ats *AbonementTypeSelect) Aggregate(fns ...AggregateFunc) *AbonementTypeSelect {
	ats.fns = append(ats.fns, fns...)
	return ats
}

// Scan applies the selector query and scans the result into the given value.
func (ats *AbonementTypeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ats.ctx, ent.OpQuerySelect)
	if err := ats.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AbonementTypeQuery, *AbonementTypeSelect](ctx, ats.AbonementTypeQuery, ats, ats.inters, v)
}

func (ats *AbonementTypeSelect) sqlScan(ctx context.Context, root *AbonementTypeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ats.fns))
	for _, fn := range ats.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ats.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ats.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
