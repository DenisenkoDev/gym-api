// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gym-api/ent/credential"
	"gym-api/ent/usagemode"
	"gym-api/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Mail holds the value of the "mail" field.
	Mail string `json:"mail,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges           UserEdges `json:"edges"`
	credential_user *int
	usage_mode_user *int
	selectValues    sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// VisitorGym holds the value of the visitor_gym edge.
	VisitorGym []*Gym `json:"visitor_gym,omitempty"`
	// ManagerGym holds the value of the manager_gym edge.
	ManagerGym []*Gym `json:"manager_gym,omitempty"`
	// PersonalTreiner holds the value of the personal_treiner edge.
	PersonalTreiner []*Abonement `json:"personal_treiner,omitempty"`
	// OwnedGyms holds the value of the owned_gyms edge.
	OwnedGyms []*Gym `json:"owned_gyms,omitempty"`
	// Abonements holds the value of the abonements edge.
	Abonements []*Abonement `json:"abonements,omitempty"`
	// UserRoles holds the value of the user_roles edge.
	UserRoles []*UserRole `json:"user_roles,omitempty"`
	// ManagerRoles holds the value of the manager_roles edge.
	ManagerRoles []*ManagerRole `json:"manager_roles,omitempty"`
	// FamilyOf holds the value of the family_of edge.
	FamilyOf []*User `json:"family_of,omitempty"`
	// FamilyMembers holds the value of the family_members edge.
	FamilyMembers []*User `json:"family_members,omitempty"`
	// Credential holds the value of the credential edge.
	Credential *Credential `json:"credential,omitempty"`
	// UsageMode holds the value of the usage_mode edge.
	UsageMode *UsageMode `json:"usage_mode,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [11]bool
}

// VisitorGymOrErr returns the VisitorGym value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) VisitorGymOrErr() ([]*Gym, error) {
	if e.loadedTypes[0] {
		return e.VisitorGym, nil
	}
	return nil, &NotLoadedError{edge: "visitor_gym"}
}

// ManagerGymOrErr returns the ManagerGym value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ManagerGymOrErr() ([]*Gym, error) {
	if e.loadedTypes[1] {
		return e.ManagerGym, nil
	}
	return nil, &NotLoadedError{edge: "manager_gym"}
}

// PersonalTreinerOrErr returns the PersonalTreiner value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PersonalTreinerOrErr() ([]*Abonement, error) {
	if e.loadedTypes[2] {
		return e.PersonalTreiner, nil
	}
	return nil, &NotLoadedError{edge: "personal_treiner"}
}

// OwnedGymsOrErr returns the OwnedGyms value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OwnedGymsOrErr() ([]*Gym, error) {
	if e.loadedTypes[3] {
		return e.OwnedGyms, nil
	}
	return nil, &NotLoadedError{edge: "owned_gyms"}
}

// AbonementsOrErr returns the Abonements value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AbonementsOrErr() ([]*Abonement, error) {
	if e.loadedTypes[4] {
		return e.Abonements, nil
	}
	return nil, &NotLoadedError{edge: "abonements"}
}

// UserRolesOrErr returns the UserRoles value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserRolesOrErr() ([]*UserRole, error) {
	if e.loadedTypes[5] {
		return e.UserRoles, nil
	}
	return nil, &NotLoadedError{edge: "user_roles"}
}

// ManagerRolesOrErr returns the ManagerRoles value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ManagerRolesOrErr() ([]*ManagerRole, error) {
	if e.loadedTypes[6] {
		return e.ManagerRoles, nil
	}
	return nil, &NotLoadedError{edge: "manager_roles"}
}

// FamilyOfOrErr returns the FamilyOf value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FamilyOfOrErr() ([]*User, error) {
	if e.loadedTypes[7] {
		return e.FamilyOf, nil
	}
	return nil, &NotLoadedError{edge: "family_of"}
}

// FamilyMembersOrErr returns the FamilyMembers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FamilyMembersOrErr() ([]*User, error) {
	if e.loadedTypes[8] {
		return e.FamilyMembers, nil
	}
	return nil, &NotLoadedError{edge: "family_members"}
}

// CredentialOrErr returns the Credential value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) CredentialOrErr() (*Credential, error) {
	if e.Credential != nil {
		return e.Credential, nil
	} else if e.loadedTypes[9] {
		return nil, &NotFoundError{label: credential.Label}
	}
	return nil, &NotLoadedError{edge: "credential"}
}

// UsageModeOrErr returns the UsageMode value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) UsageModeOrErr() (*UsageMode, error) {
	if e.UsageMode != nil {
		return e.UsageMode, nil
	} else if e.loadedTypes[10] {
		return nil, &NotFoundError{label: usagemode.Label}
	}
	return nil, &NotLoadedError{edge: "usage_mode"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldMail, user.FieldFirstName, user.FieldLastName, user.FieldPhone, user.FieldAddress, user.FieldDescription:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case user.ForeignKeys[0]: // credential_user
			values[i] = new(sql.NullInt64)
		case user.ForeignKeys[1]: // usage_mode_user
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldMail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mail", values[i])
			} else if value.Valid {
				u.Mail = value.String
			}
		case user.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				u.FirstName = value.String
			}
		case user.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				u.LastName = value.String
			}
		case user.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				u.Phone = value.String
			}
		case user.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				u.Address = value.String
			}
		case user.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				u.Description = value.String
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field credential_user", value)
			} else if value.Valid {
				u.credential_user = new(int)
				*u.credential_user = int(value.Int64)
			}
		case user.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field usage_mode_user", value)
			} else if value.Valid {
				u.usage_mode_user = new(int)
				*u.usage_mode_user = int(value.Int64)
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryVisitorGym queries the "visitor_gym" edge of the User entity.
func (u *User) QueryVisitorGym() *GymQuery {
	return NewUserClient(u.config).QueryVisitorGym(u)
}

// QueryManagerGym queries the "manager_gym" edge of the User entity.
func (u *User) QueryManagerGym() *GymQuery {
	return NewUserClient(u.config).QueryManagerGym(u)
}

// QueryPersonalTreiner queries the "personal_treiner" edge of the User entity.
func (u *User) QueryPersonalTreiner() *AbonementQuery {
	return NewUserClient(u.config).QueryPersonalTreiner(u)
}

// QueryOwnedGyms queries the "owned_gyms" edge of the User entity.
func (u *User) QueryOwnedGyms() *GymQuery {
	return NewUserClient(u.config).QueryOwnedGyms(u)
}

// QueryAbonements queries the "abonements" edge of the User entity.
func (u *User) QueryAbonements() *AbonementQuery {
	return NewUserClient(u.config).QueryAbonements(u)
}

// QueryUserRoles queries the "user_roles" edge of the User entity.
func (u *User) QueryUserRoles() *UserRoleQuery {
	return NewUserClient(u.config).QueryUserRoles(u)
}

// QueryManagerRoles queries the "manager_roles" edge of the User entity.
func (u *User) QueryManagerRoles() *ManagerRoleQuery {
	return NewUserClient(u.config).QueryManagerRoles(u)
}

// QueryFamilyOf queries the "family_of" edge of the User entity.
func (u *User) QueryFamilyOf() *UserQuery {
	return NewUserClient(u.config).QueryFamilyOf(u)
}

// QueryFamilyMembers queries the "family_members" edge of the User entity.
func (u *User) QueryFamilyMembers() *UserQuery {
	return NewUserClient(u.config).QueryFamilyMembers(u)
}

// QueryCredential queries the "credential" edge of the User entity.
func (u *User) QueryCredential() *CredentialQuery {
	return NewUserClient(u.config).QueryCredential(u)
}

// QueryUsageMode queries the "usage_mode" edge of the User entity.
func (u *User) QueryUsageMode() *UsageModeQuery {
	return NewUserClient(u.config).QueryUsageMode(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("mail=")
	builder.WriteString(u.Mail)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(u.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(u.LastName)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(u.Phone)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(u.Address)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(u.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
