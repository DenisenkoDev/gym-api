// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gym-api/ent/abonement"
	"gym-api/ent/credential"
	"gym-api/ent/gym"
	"gym-api/ent/managerrole"
	"gym-api/ent/predicate"
	"gym-api/ent/usagemode"
	"gym-api/ent/user"
	"gym-api/ent/userrole"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetMail sets the "mail" field.
func (uu *UserUpdate) SetMail(s string) *UserUpdate {
	uu.mutation.SetMail(s)
	return uu
}

// SetNillableMail sets the "mail" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMail(s *string) *UserUpdate {
	if s != nil {
		uu.SetMail(*s)
	}
	return uu
}

// SetFirstName sets the "first_name" field.
func (uu *UserUpdate) SetFirstName(s string) *UserUpdate {
	uu.mutation.SetFirstName(s)
	return uu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFirstName(s *string) *UserUpdate {
	if s != nil {
		uu.SetFirstName(*s)
	}
	return uu
}

// SetLastName sets the "last_name" field.
func (uu *UserUpdate) SetLastName(s string) *UserUpdate {
	uu.mutation.SetLastName(s)
	return uu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastName(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastName(*s)
	}
	return uu
}

// SetPhone sets the "phone" field.
func (uu *UserUpdate) SetPhone(s string) *UserUpdate {
	uu.mutation.SetPhone(s)
	return uu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhone(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhone(*s)
	}
	return uu
}

// SetAddress sets the "address" field.
func (uu *UserUpdate) SetAddress(s string) *UserUpdate {
	uu.mutation.SetAddress(s)
	return uu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAddress(s *string) *UserUpdate {
	if s != nil {
		uu.SetAddress(*s)
	}
	return uu
}

// ClearAddress clears the value of the "address" field.
func (uu *UserUpdate) ClearAddress() *UserUpdate {
	uu.mutation.ClearAddress()
	return uu
}

// SetDescription sets the "description" field.
func (uu *UserUpdate) SetDescription(s string) *UserUpdate {
	uu.mutation.SetDescription(s)
	return uu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDescription(s *string) *UserUpdate {
	if s != nil {
		uu.SetDescription(*s)
	}
	return uu
}

// ClearDescription clears the value of the "description" field.
func (uu *UserUpdate) ClearDescription() *UserUpdate {
	uu.mutation.ClearDescription()
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetUpdatedAt(*t)
	}
	return uu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uu *UserUpdate) ClearUpdatedAt() *UserUpdate {
	uu.mutation.ClearUpdatedAt()
	return uu
}

// AddVisitorGymIDs adds the "visitor_gym" edge to the Gym entity by IDs.
func (uu *UserUpdate) AddVisitorGymIDs(ids ...int) *UserUpdate {
	uu.mutation.AddVisitorGymIDs(ids...)
	return uu
}

// AddVisitorGym adds the "visitor_gym" edges to the Gym entity.
func (uu *UserUpdate) AddVisitorGym(g ...*Gym) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddVisitorGymIDs(ids...)
}

// AddManagerGymIDs adds the "manager_gym" edge to the Gym entity by IDs.
func (uu *UserUpdate) AddManagerGymIDs(ids ...int) *UserUpdate {
	uu.mutation.AddManagerGymIDs(ids...)
	return uu
}

// AddManagerGym adds the "manager_gym" edges to the Gym entity.
func (uu *UserUpdate) AddManagerGym(g ...*Gym) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddManagerGymIDs(ids...)
}

// AddPersonalTreinerIDs adds the "personal_treiner" edge to the Abonement entity by IDs.
func (uu *UserUpdate) AddPersonalTreinerIDs(ids ...int) *UserUpdate {
	uu.mutation.AddPersonalTreinerIDs(ids...)
	return uu
}

// AddPersonalTreiner adds the "personal_treiner" edges to the Abonement entity.
func (uu *UserUpdate) AddPersonalTreiner(a ...*Abonement) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddPersonalTreinerIDs(ids...)
}

// AddOwnedGymIDs adds the "owned_gyms" edge to the Gym entity by IDs.
func (uu *UserUpdate) AddOwnedGymIDs(ids ...int) *UserUpdate {
	uu.mutation.AddOwnedGymIDs(ids...)
	return uu
}

// AddOwnedGyms adds the "owned_gyms" edges to the Gym entity.
func (uu *UserUpdate) AddOwnedGyms(g ...*Gym) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddOwnedGymIDs(ids...)
}

// AddAbonementIDs adds the "abonements" edge to the Abonement entity by IDs.
func (uu *UserUpdate) AddAbonementIDs(ids ...int) *UserUpdate {
	uu.mutation.AddAbonementIDs(ids...)
	return uu
}

// AddAbonements adds the "abonements" edges to the Abonement entity.
func (uu *UserUpdate) AddAbonements(a ...*Abonement) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAbonementIDs(ids...)
}

// AddUserRoleIDs adds the "user_roles" edge to the UserRole entity by IDs.
func (uu *UserUpdate) AddUserRoleIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUserRoleIDs(ids...)
	return uu
}

// AddUserRoles adds the "user_roles" edges to the UserRole entity.
func (uu *UserUpdate) AddUserRoles(u ...*UserRole) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserRoleIDs(ids...)
}

// AddManagerRoleIDs adds the "manager_roles" edge to the ManagerRole entity by IDs.
func (uu *UserUpdate) AddManagerRoleIDs(ids ...int) *UserUpdate {
	uu.mutation.AddManagerRoleIDs(ids...)
	return uu
}

// AddManagerRoles adds the "manager_roles" edges to the ManagerRole entity.
func (uu *UserUpdate) AddManagerRoles(m ...*ManagerRole) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddManagerRoleIDs(ids...)
}

// AddFamilyOfIDs adds the "family_of" edge to the User entity by IDs.
func (uu *UserUpdate) AddFamilyOfIDs(ids ...int) *UserUpdate {
	uu.mutation.AddFamilyOfIDs(ids...)
	return uu
}

// AddFamilyOf adds the "family_of" edges to the User entity.
func (uu *UserUpdate) AddFamilyOf(u ...*User) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddFamilyOfIDs(ids...)
}

// AddFamilyMemberIDs adds the "family_members" edge to the User entity by IDs.
func (uu *UserUpdate) AddFamilyMemberIDs(ids ...int) *UserUpdate {
	uu.mutation.AddFamilyMemberIDs(ids...)
	return uu
}

// AddFamilyMembers adds the "family_members" edges to the User entity.
func (uu *UserUpdate) AddFamilyMembers(u ...*User) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddFamilyMemberIDs(ids...)
}

// SetCredentialID sets the "credential" edge to the Credential entity by ID.
func (uu *UserUpdate) SetCredentialID(id int) *UserUpdate {
	uu.mutation.SetCredentialID(id)
	return uu
}

// SetNillableCredentialID sets the "credential" edge to the Credential entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableCredentialID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetCredentialID(*id)
	}
	return uu
}

// SetCredential sets the "credential" edge to the Credential entity.
func (uu *UserUpdate) SetCredential(c *Credential) *UserUpdate {
	return uu.SetCredentialID(c.ID)
}

// SetUsageModeID sets the "usage_mode" edge to the UsageMode entity by ID.
func (uu *UserUpdate) SetUsageModeID(id int) *UserUpdate {
	uu.mutation.SetUsageModeID(id)
	return uu
}

// SetNillableUsageModeID sets the "usage_mode" edge to the UsageMode entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableUsageModeID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetUsageModeID(*id)
	}
	return uu
}

// SetUsageMode sets the "usage_mode" edge to the UsageMode entity.
func (uu *UserUpdate) SetUsageMode(u *UsageMode) *UserUpdate {
	return uu.SetUsageModeID(u.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearVisitorGym clears all "visitor_gym" edges to the Gym entity.
func (uu *UserUpdate) ClearVisitorGym() *UserUpdate {
	uu.mutation.ClearVisitorGym()
	return uu
}

// RemoveVisitorGymIDs removes the "visitor_gym" edge to Gym entities by IDs.
func (uu *UserUpdate) RemoveVisitorGymIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveVisitorGymIDs(ids...)
	return uu
}

// RemoveVisitorGym removes "visitor_gym" edges to Gym entities.
func (uu *UserUpdate) RemoveVisitorGym(g ...*Gym) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveVisitorGymIDs(ids...)
}

// ClearManagerGym clears all "manager_gym" edges to the Gym entity.
func (uu *UserUpdate) ClearManagerGym() *UserUpdate {
	uu.mutation.ClearManagerGym()
	return uu
}

// RemoveManagerGymIDs removes the "manager_gym" edge to Gym entities by IDs.
func (uu *UserUpdate) RemoveManagerGymIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveManagerGymIDs(ids...)
	return uu
}

// RemoveManagerGym removes "manager_gym" edges to Gym entities.
func (uu *UserUpdate) RemoveManagerGym(g ...*Gym) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveManagerGymIDs(ids...)
}

// ClearPersonalTreiner clears all "personal_treiner" edges to the Abonement entity.
func (uu *UserUpdate) ClearPersonalTreiner() *UserUpdate {
	uu.mutation.ClearPersonalTreiner()
	return uu
}

// RemovePersonalTreinerIDs removes the "personal_treiner" edge to Abonement entities by IDs.
func (uu *UserUpdate) RemovePersonalTreinerIDs(ids ...int) *UserUpdate {
	uu.mutation.RemovePersonalTreinerIDs(ids...)
	return uu
}

// RemovePersonalTreiner removes "personal_treiner" edges to Abonement entities.
func (uu *UserUpdate) RemovePersonalTreiner(a ...*Abonement) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemovePersonalTreinerIDs(ids...)
}

// ClearOwnedGyms clears all "owned_gyms" edges to the Gym entity.
func (uu *UserUpdate) ClearOwnedGyms() *UserUpdate {
	uu.mutation.ClearOwnedGyms()
	return uu
}

// RemoveOwnedGymIDs removes the "owned_gyms" edge to Gym entities by IDs.
func (uu *UserUpdate) RemoveOwnedGymIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveOwnedGymIDs(ids...)
	return uu
}

// RemoveOwnedGyms removes "owned_gyms" edges to Gym entities.
func (uu *UserUpdate) RemoveOwnedGyms(g ...*Gym) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveOwnedGymIDs(ids...)
}

// ClearAbonements clears all "abonements" edges to the Abonement entity.
func (uu *UserUpdate) ClearAbonements() *UserUpdate {
	uu.mutation.ClearAbonements()
	return uu
}

// RemoveAbonementIDs removes the "abonements" edge to Abonement entities by IDs.
func (uu *UserUpdate) RemoveAbonementIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveAbonementIDs(ids...)
	return uu
}

// RemoveAbonements removes "abonements" edges to Abonement entities.
func (uu *UserUpdate) RemoveAbonements(a ...*Abonement) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAbonementIDs(ids...)
}

// ClearUserRoles clears all "user_roles" edges to the UserRole entity.
func (uu *UserUpdate) ClearUserRoles() *UserUpdate {
	uu.mutation.ClearUserRoles()
	return uu
}

// RemoveUserRoleIDs removes the "user_roles" edge to UserRole entities by IDs.
func (uu *UserUpdate) RemoveUserRoleIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUserRoleIDs(ids...)
	return uu
}

// RemoveUserRoles removes "user_roles" edges to UserRole entities.
func (uu *UserUpdate) RemoveUserRoles(u ...*UserRole) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserRoleIDs(ids...)
}

// ClearManagerRoles clears all "manager_roles" edges to the ManagerRole entity.
func (uu *UserUpdate) ClearManagerRoles() *UserUpdate {
	uu.mutation.ClearManagerRoles()
	return uu
}

// RemoveManagerRoleIDs removes the "manager_roles" edge to ManagerRole entities by IDs.
func (uu *UserUpdate) RemoveManagerRoleIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveManagerRoleIDs(ids...)
	return uu
}

// RemoveManagerRoles removes "manager_roles" edges to ManagerRole entities.
func (uu *UserUpdate) RemoveManagerRoles(m ...*ManagerRole) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveManagerRoleIDs(ids...)
}

// ClearFamilyOf clears all "family_of" edges to the User entity.
func (uu *UserUpdate) ClearFamilyOf() *UserUpdate {
	uu.mutation.ClearFamilyOf()
	return uu
}

// RemoveFamilyOfIDs removes the "family_of" edge to User entities by IDs.
func (uu *UserUpdate) RemoveFamilyOfIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveFamilyOfIDs(ids...)
	return uu
}

// RemoveFamilyOf removes "family_of" edges to User entities.
func (uu *UserUpdate) RemoveFamilyOf(u ...*User) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveFamilyOfIDs(ids...)
}

// ClearFamilyMembers clears all "family_members" edges to the User entity.
func (uu *UserUpdate) ClearFamilyMembers() *UserUpdate {
	uu.mutation.ClearFamilyMembers()
	return uu
}

// RemoveFamilyMemberIDs removes the "family_members" edge to User entities by IDs.
func (uu *UserUpdate) RemoveFamilyMemberIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveFamilyMemberIDs(ids...)
	return uu
}

// RemoveFamilyMembers removes "family_members" edges to User entities.
func (uu *UserUpdate) RemoveFamilyMembers(u ...*User) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveFamilyMemberIDs(ids...)
}

// ClearCredential clears the "credential" edge to the Credential entity.
func (uu *UserUpdate) ClearCredential() *UserUpdate {
	uu.mutation.ClearCredential()
	return uu
}

// ClearUsageMode clears the "usage_mode" edge to the UsageMode entity.
func (uu *UserUpdate) ClearUsageMode() *UserUpdate {
	uu.mutation.ClearUsageMode()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Mail(); ok {
		_spec.SetField(user.FieldMail, field.TypeString, value)
	}
	if value, ok := uu.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := uu.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if value, ok := uu.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if uu.mutation.AddressCleared() {
		_spec.ClearField(user.FieldAddress, field.TypeString)
	}
	if value, ok := uu.mutation.Description(); ok {
		_spec.SetField(user.FieldDescription, field.TypeString, value)
	}
	if uu.mutation.DescriptionCleared() {
		_spec.ClearField(user.FieldDescription, field.TypeString)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if uu.mutation.VisitorGymCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.VisitorGymTable,
			Columns: user.VisitorGymPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedVisitorGymIDs(); len(nodes) > 0 && !uu.mutation.VisitorGymCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.VisitorGymTable,
			Columns: user.VisitorGymPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.VisitorGymIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.VisitorGymTable,
			Columns: user.VisitorGymPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ManagerGymCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ManagerGymTable,
			Columns: user.ManagerGymPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedManagerGymIDs(); len(nodes) > 0 && !uu.mutation.ManagerGymCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ManagerGymTable,
			Columns: user.ManagerGymPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ManagerGymIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ManagerGymTable,
			Columns: user.ManagerGymPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PersonalTreinerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PersonalTreinerTable,
			Columns: []string{user.PersonalTreinerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPersonalTreinerIDs(); len(nodes) > 0 && !uu.mutation.PersonalTreinerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PersonalTreinerTable,
			Columns: []string{user.PersonalTreinerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PersonalTreinerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PersonalTreinerTable,
			Columns: []string{user.PersonalTreinerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OwnedGymsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedGymsTable,
			Columns: []string{user.OwnedGymsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOwnedGymsIDs(); len(nodes) > 0 && !uu.mutation.OwnedGymsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedGymsTable,
			Columns: []string{user.OwnedGymsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OwnedGymsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedGymsTable,
			Columns: []string{user.OwnedGymsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AbonementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AbonementsTable,
			Columns: []string{user.AbonementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAbonementsIDs(); len(nodes) > 0 && !uu.mutation.AbonementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AbonementsTable,
			Columns: []string{user.AbonementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AbonementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AbonementsTable,
			Columns: []string{user.AbonementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserRolesIDs(); len(nodes) > 0 && !uu.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ManagerRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ManagerRolesTable,
			Columns: []string{user.ManagerRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(managerrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedManagerRolesIDs(); len(nodes) > 0 && !uu.mutation.ManagerRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ManagerRolesTable,
			Columns: []string{user.ManagerRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(managerrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ManagerRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ManagerRolesTable,
			Columns: []string{user.ManagerRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(managerrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FamilyOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.FamilyOfTable,
			Columns: user.FamilyOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFamilyOfIDs(); len(nodes) > 0 && !uu.mutation.FamilyOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.FamilyOfTable,
			Columns: user.FamilyOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FamilyOfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.FamilyOfTable,
			Columns: user.FamilyOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FamilyMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FamilyMembersTable,
			Columns: user.FamilyMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFamilyMembersIDs(); len(nodes) > 0 && !uu.mutation.FamilyMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FamilyMembersTable,
			Columns: user.FamilyMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FamilyMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FamilyMembersTable,
			Columns: user.FamilyMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CredentialCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   user.CredentialTable,
			Columns: []string{user.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credential.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CredentialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   user.CredentialTable,
			Columns: []string{user.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credential.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UsageModeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   user.UsageModeTable,
			Columns: []string{user.UsageModeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usagemode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UsageModeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   user.UsageModeTable,
			Columns: []string{user.UsageModeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usagemode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetMail sets the "mail" field.
func (uuo *UserUpdateOne) SetMail(s string) *UserUpdateOne {
	uuo.mutation.SetMail(s)
	return uuo
}

// SetNillableMail sets the "mail" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetMail(*s)
	}
	return uuo
}

// SetFirstName sets the "first_name" field.
func (uuo *UserUpdateOne) SetFirstName(s string) *UserUpdateOne {
	uuo.mutation.SetFirstName(s)
	return uuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFirstName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFirstName(*s)
	}
	return uuo
}

// SetLastName sets the "last_name" field.
func (uuo *UserUpdateOne) SetLastName(s string) *UserUpdateOne {
	uuo.mutation.SetLastName(s)
	return uuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastName(*s)
	}
	return uuo
}

// SetPhone sets the "phone" field.
func (uuo *UserUpdateOne) SetPhone(s string) *UserUpdateOne {
	uuo.mutation.SetPhone(s)
	return uuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhone(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhone(*s)
	}
	return uuo
}

// SetAddress sets the "address" field.
func (uuo *UserUpdateOne) SetAddress(s string) *UserUpdateOne {
	uuo.mutation.SetAddress(s)
	return uuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAddress(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAddress(*s)
	}
	return uuo
}

// ClearAddress clears the value of the "address" field.
func (uuo *UserUpdateOne) ClearAddress() *UserUpdateOne {
	uuo.mutation.ClearAddress()
	return uuo
}

// SetDescription sets the "description" field.
func (uuo *UserUpdateOne) SetDescription(s string) *UserUpdateOne {
	uuo.mutation.SetDescription(s)
	return uuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDescription(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDescription(*s)
	}
	return uuo
}

// ClearDescription clears the value of the "description" field.
func (uuo *UserUpdateOne) ClearDescription() *UserUpdateOne {
	uuo.mutation.ClearDescription()
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetUpdatedAt(*t)
	}
	return uuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uuo *UserUpdateOne) ClearUpdatedAt() *UserUpdateOne {
	uuo.mutation.ClearUpdatedAt()
	return uuo
}

// AddVisitorGymIDs adds the "visitor_gym" edge to the Gym entity by IDs.
func (uuo *UserUpdateOne) AddVisitorGymIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddVisitorGymIDs(ids...)
	return uuo
}

// AddVisitorGym adds the "visitor_gym" edges to the Gym entity.
func (uuo *UserUpdateOne) AddVisitorGym(g ...*Gym) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddVisitorGymIDs(ids...)
}

// AddManagerGymIDs adds the "manager_gym" edge to the Gym entity by IDs.
func (uuo *UserUpdateOne) AddManagerGymIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddManagerGymIDs(ids...)
	return uuo
}

// AddManagerGym adds the "manager_gym" edges to the Gym entity.
func (uuo *UserUpdateOne) AddManagerGym(g ...*Gym) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddManagerGymIDs(ids...)
}

// AddPersonalTreinerIDs adds the "personal_treiner" edge to the Abonement entity by IDs.
func (uuo *UserUpdateOne) AddPersonalTreinerIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddPersonalTreinerIDs(ids...)
	return uuo
}

// AddPersonalTreiner adds the "personal_treiner" edges to the Abonement entity.
func (uuo *UserUpdateOne) AddPersonalTreiner(a ...*Abonement) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddPersonalTreinerIDs(ids...)
}

// AddOwnedGymIDs adds the "owned_gyms" edge to the Gym entity by IDs.
func (uuo *UserUpdateOne) AddOwnedGymIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddOwnedGymIDs(ids...)
	return uuo
}

// AddOwnedGyms adds the "owned_gyms" edges to the Gym entity.
func (uuo *UserUpdateOne) AddOwnedGyms(g ...*Gym) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddOwnedGymIDs(ids...)
}

// AddAbonementIDs adds the "abonements" edge to the Abonement entity by IDs.
func (uuo *UserUpdateOne) AddAbonementIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddAbonementIDs(ids...)
	return uuo
}

// AddAbonements adds the "abonements" edges to the Abonement entity.
func (uuo *UserUpdateOne) AddAbonements(a ...*Abonement) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAbonementIDs(ids...)
}

// AddUserRoleIDs adds the "user_roles" edge to the UserRole entity by IDs.
func (uuo *UserUpdateOne) AddUserRoleIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUserRoleIDs(ids...)
	return uuo
}

// AddUserRoles adds the "user_roles" edges to the UserRole entity.
func (uuo *UserUpdateOne) AddUserRoles(u ...*UserRole) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserRoleIDs(ids...)
}

// AddManagerRoleIDs adds the "manager_roles" edge to the ManagerRole entity by IDs.
func (uuo *UserUpdateOne) AddManagerRoleIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddManagerRoleIDs(ids...)
	return uuo
}

// AddManagerRoles adds the "manager_roles" edges to the ManagerRole entity.
func (uuo *UserUpdateOne) AddManagerRoles(m ...*ManagerRole) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddManagerRoleIDs(ids...)
}

// AddFamilyOfIDs adds the "family_of" edge to the User entity by IDs.
func (uuo *UserUpdateOne) AddFamilyOfIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddFamilyOfIDs(ids...)
	return uuo
}

// AddFamilyOf adds the "family_of" edges to the User entity.
func (uuo *UserUpdateOne) AddFamilyOf(u ...*User) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddFamilyOfIDs(ids...)
}

// AddFamilyMemberIDs adds the "family_members" edge to the User entity by IDs.
func (uuo *UserUpdateOne) AddFamilyMemberIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddFamilyMemberIDs(ids...)
	return uuo
}

// AddFamilyMembers adds the "family_members" edges to the User entity.
func (uuo *UserUpdateOne) AddFamilyMembers(u ...*User) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddFamilyMemberIDs(ids...)
}

// SetCredentialID sets the "credential" edge to the Credential entity by ID.
func (uuo *UserUpdateOne) SetCredentialID(id int) *UserUpdateOne {
	uuo.mutation.SetCredentialID(id)
	return uuo
}

// SetNillableCredentialID sets the "credential" edge to the Credential entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCredentialID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetCredentialID(*id)
	}
	return uuo
}

// SetCredential sets the "credential" edge to the Credential entity.
func (uuo *UserUpdateOne) SetCredential(c *Credential) *UserUpdateOne {
	return uuo.SetCredentialID(c.ID)
}

// SetUsageModeID sets the "usage_mode" edge to the UsageMode entity by ID.
func (uuo *UserUpdateOne) SetUsageModeID(id int) *UserUpdateOne {
	uuo.mutation.SetUsageModeID(id)
	return uuo
}

// SetNillableUsageModeID sets the "usage_mode" edge to the UsageMode entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsageModeID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetUsageModeID(*id)
	}
	return uuo
}

// SetUsageMode sets the "usage_mode" edge to the UsageMode entity.
func (uuo *UserUpdateOne) SetUsageMode(u *UsageMode) *UserUpdateOne {
	return uuo.SetUsageModeID(u.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearVisitorGym clears all "visitor_gym" edges to the Gym entity.
func (uuo *UserUpdateOne) ClearVisitorGym() *UserUpdateOne {
	uuo.mutation.ClearVisitorGym()
	return uuo
}

// RemoveVisitorGymIDs removes the "visitor_gym" edge to Gym entities by IDs.
func (uuo *UserUpdateOne) RemoveVisitorGymIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveVisitorGymIDs(ids...)
	return uuo
}

// RemoveVisitorGym removes "visitor_gym" edges to Gym entities.
func (uuo *UserUpdateOne) RemoveVisitorGym(g ...*Gym) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveVisitorGymIDs(ids...)
}

// ClearManagerGym clears all "manager_gym" edges to the Gym entity.
func (uuo *UserUpdateOne) ClearManagerGym() *UserUpdateOne {
	uuo.mutation.ClearManagerGym()
	return uuo
}

// RemoveManagerGymIDs removes the "manager_gym" edge to Gym entities by IDs.
func (uuo *UserUpdateOne) RemoveManagerGymIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveManagerGymIDs(ids...)
	return uuo
}

// RemoveManagerGym removes "manager_gym" edges to Gym entities.
func (uuo *UserUpdateOne) RemoveManagerGym(g ...*Gym) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveManagerGymIDs(ids...)
}

// ClearPersonalTreiner clears all "personal_treiner" edges to the Abonement entity.
func (uuo *UserUpdateOne) ClearPersonalTreiner() *UserUpdateOne {
	uuo.mutation.ClearPersonalTreiner()
	return uuo
}

// RemovePersonalTreinerIDs removes the "personal_treiner" edge to Abonement entities by IDs.
func (uuo *UserUpdateOne) RemovePersonalTreinerIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemovePersonalTreinerIDs(ids...)
	return uuo
}

// RemovePersonalTreiner removes "personal_treiner" edges to Abonement entities.
func (uuo *UserUpdateOne) RemovePersonalTreiner(a ...*Abonement) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemovePersonalTreinerIDs(ids...)
}

// ClearOwnedGyms clears all "owned_gyms" edges to the Gym entity.
func (uuo *UserUpdateOne) ClearOwnedGyms() *UserUpdateOne {
	uuo.mutation.ClearOwnedGyms()
	return uuo
}

// RemoveOwnedGymIDs removes the "owned_gyms" edge to Gym entities by IDs.
func (uuo *UserUpdateOne) RemoveOwnedGymIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveOwnedGymIDs(ids...)
	return uuo
}

// RemoveOwnedGyms removes "owned_gyms" edges to Gym entities.
func (uuo *UserUpdateOne) RemoveOwnedGyms(g ...*Gym) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveOwnedGymIDs(ids...)
}

// ClearAbonements clears all "abonements" edges to the Abonement entity.
func (uuo *UserUpdateOne) ClearAbonements() *UserUpdateOne {
	uuo.mutation.ClearAbonements()
	return uuo
}

// RemoveAbonementIDs removes the "abonements" edge to Abonement entities by IDs.
func (uuo *UserUpdateOne) RemoveAbonementIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveAbonementIDs(ids...)
	return uuo
}

// RemoveAbonements removes "abonements" edges to Abonement entities.
func (uuo *UserUpdateOne) RemoveAbonements(a ...*Abonement) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAbonementIDs(ids...)
}

// ClearUserRoles clears all "user_roles" edges to the UserRole entity.
func (uuo *UserUpdateOne) ClearUserRoles() *UserUpdateOne {
	uuo.mutation.ClearUserRoles()
	return uuo
}

// RemoveUserRoleIDs removes the "user_roles" edge to UserRole entities by IDs.
func (uuo *UserUpdateOne) RemoveUserRoleIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUserRoleIDs(ids...)
	return uuo
}

// RemoveUserRoles removes "user_roles" edges to UserRole entities.
func (uuo *UserUpdateOne) RemoveUserRoles(u ...*UserRole) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserRoleIDs(ids...)
}

// ClearManagerRoles clears all "manager_roles" edges to the ManagerRole entity.
func (uuo *UserUpdateOne) ClearManagerRoles() *UserUpdateOne {
	uuo.mutation.ClearManagerRoles()
	return uuo
}

// RemoveManagerRoleIDs removes the "manager_roles" edge to ManagerRole entities by IDs.
func (uuo *UserUpdateOne) RemoveManagerRoleIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveManagerRoleIDs(ids...)
	return uuo
}

// RemoveManagerRoles removes "manager_roles" edges to ManagerRole entities.
func (uuo *UserUpdateOne) RemoveManagerRoles(m ...*ManagerRole) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveManagerRoleIDs(ids...)
}

// ClearFamilyOf clears all "family_of" edges to the User entity.
func (uuo *UserUpdateOne) ClearFamilyOf() *UserUpdateOne {
	uuo.mutation.ClearFamilyOf()
	return uuo
}

// RemoveFamilyOfIDs removes the "family_of" edge to User entities by IDs.
func (uuo *UserUpdateOne) RemoveFamilyOfIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveFamilyOfIDs(ids...)
	return uuo
}

// RemoveFamilyOf removes "family_of" edges to User entities.
func (uuo *UserUpdateOne) RemoveFamilyOf(u ...*User) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveFamilyOfIDs(ids...)
}

// ClearFamilyMembers clears all "family_members" edges to the User entity.
func (uuo *UserUpdateOne) ClearFamilyMembers() *UserUpdateOne {
	uuo.mutation.ClearFamilyMembers()
	return uuo
}

// RemoveFamilyMemberIDs removes the "family_members" edge to User entities by IDs.
func (uuo *UserUpdateOne) RemoveFamilyMemberIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveFamilyMemberIDs(ids...)
	return uuo
}

// RemoveFamilyMembers removes "family_members" edges to User entities.
func (uuo *UserUpdateOne) RemoveFamilyMembers(u ...*User) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveFamilyMemberIDs(ids...)
}

// ClearCredential clears the "credential" edge to the Credential entity.
func (uuo *UserUpdateOne) ClearCredential() *UserUpdateOne {
	uuo.mutation.ClearCredential()
	return uuo
}

// ClearUsageMode clears the "usage_mode" edge to the UsageMode entity.
func (uuo *UserUpdateOne) ClearUsageMode() *UserUpdateOne {
	uuo.mutation.ClearUsageMode()
	return uuo
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Mail(); ok {
		_spec.SetField(user.FieldMail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if uuo.mutation.AddressCleared() {
		_spec.ClearField(user.FieldAddress, field.TypeString)
	}
	if value, ok := uuo.mutation.Description(); ok {
		_spec.SetField(user.FieldDescription, field.TypeString, value)
	}
	if uuo.mutation.DescriptionCleared() {
		_spec.ClearField(user.FieldDescription, field.TypeString)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if uuo.mutation.VisitorGymCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.VisitorGymTable,
			Columns: user.VisitorGymPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedVisitorGymIDs(); len(nodes) > 0 && !uuo.mutation.VisitorGymCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.VisitorGymTable,
			Columns: user.VisitorGymPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.VisitorGymIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.VisitorGymTable,
			Columns: user.VisitorGymPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ManagerGymCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ManagerGymTable,
			Columns: user.ManagerGymPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedManagerGymIDs(); len(nodes) > 0 && !uuo.mutation.ManagerGymCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ManagerGymTable,
			Columns: user.ManagerGymPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ManagerGymIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ManagerGymTable,
			Columns: user.ManagerGymPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PersonalTreinerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PersonalTreinerTable,
			Columns: []string{user.PersonalTreinerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPersonalTreinerIDs(); len(nodes) > 0 && !uuo.mutation.PersonalTreinerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PersonalTreinerTable,
			Columns: []string{user.PersonalTreinerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PersonalTreinerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.PersonalTreinerTable,
			Columns: []string{user.PersonalTreinerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OwnedGymsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedGymsTable,
			Columns: []string{user.OwnedGymsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOwnedGymsIDs(); len(nodes) > 0 && !uuo.mutation.OwnedGymsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedGymsTable,
			Columns: []string{user.OwnedGymsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OwnedGymsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedGymsTable,
			Columns: []string{user.OwnedGymsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gym.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AbonementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AbonementsTable,
			Columns: []string{user.AbonementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAbonementsIDs(); len(nodes) > 0 && !uuo.mutation.AbonementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AbonementsTable,
			Columns: []string{user.AbonementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AbonementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AbonementsTable,
			Columns: []string{user.AbonementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(abonement.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserRolesIDs(); len(nodes) > 0 && !uuo.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ManagerRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ManagerRolesTable,
			Columns: []string{user.ManagerRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(managerrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedManagerRolesIDs(); len(nodes) > 0 && !uuo.mutation.ManagerRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ManagerRolesTable,
			Columns: []string{user.ManagerRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(managerrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ManagerRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ManagerRolesTable,
			Columns: []string{user.ManagerRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(managerrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FamilyOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.FamilyOfTable,
			Columns: user.FamilyOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFamilyOfIDs(); len(nodes) > 0 && !uuo.mutation.FamilyOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.FamilyOfTable,
			Columns: user.FamilyOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FamilyOfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.FamilyOfTable,
			Columns: user.FamilyOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FamilyMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FamilyMembersTable,
			Columns: user.FamilyMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFamilyMembersIDs(); len(nodes) > 0 && !uuo.mutation.FamilyMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FamilyMembersTable,
			Columns: user.FamilyMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FamilyMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FamilyMembersTable,
			Columns: user.FamilyMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CredentialCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   user.CredentialTable,
			Columns: []string{user.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credential.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CredentialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   user.CredentialTable,
			Columns: []string{user.CredentialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credential.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UsageModeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   user.UsageModeTable,
			Columns: []string{user.UsageModeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usagemode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UsageModeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   user.UsageModeTable,
			Columns: []string{user.UsageModeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usagemode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
