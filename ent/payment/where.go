// Code generated by ent, DO NOT EDIT.

package payment

import (
	"gym-api/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldID, id))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldAmount, v))
}

// LinkPhoto applies equality check predicate on the "link_photo" field. It's identical to LinkPhotoEQ.
func LinkPhoto(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldLinkPhoto, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldCreatedAt, v))
}

// ConfirmedAt applies equality check predicate on the "confirmed_at" field. It's identical to ConfirmedAtEQ.
func ConfirmedAt(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldConfirmedAt, v))
}

// IsConfirmed applies equality check predicate on the "is_confirmed" field. It's identical to IsConfirmedEQ.
func IsConfirmed(v bool) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldIsConfirmed, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldAmount, v))
}

// LinkPhotoEQ applies the EQ predicate on the "link_photo" field.
func LinkPhotoEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldLinkPhoto, v))
}

// LinkPhotoNEQ applies the NEQ predicate on the "link_photo" field.
func LinkPhotoNEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldLinkPhoto, v))
}

// LinkPhotoIn applies the In predicate on the "link_photo" field.
func LinkPhotoIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldLinkPhoto, vs...))
}

// LinkPhotoNotIn applies the NotIn predicate on the "link_photo" field.
func LinkPhotoNotIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldLinkPhoto, vs...))
}

// LinkPhotoGT applies the GT predicate on the "link_photo" field.
func LinkPhotoGT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldLinkPhoto, v))
}

// LinkPhotoGTE applies the GTE predicate on the "link_photo" field.
func LinkPhotoGTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldLinkPhoto, v))
}

// LinkPhotoLT applies the LT predicate on the "link_photo" field.
func LinkPhotoLT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldLinkPhoto, v))
}

// LinkPhotoLTE applies the LTE predicate on the "link_photo" field.
func LinkPhotoLTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldLinkPhoto, v))
}

// LinkPhotoContains applies the Contains predicate on the "link_photo" field.
func LinkPhotoContains(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContains(FieldLinkPhoto, v))
}

// LinkPhotoHasPrefix applies the HasPrefix predicate on the "link_photo" field.
func LinkPhotoHasPrefix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasPrefix(FieldLinkPhoto, v))
}

// LinkPhotoHasSuffix applies the HasSuffix predicate on the "link_photo" field.
func LinkPhotoHasSuffix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasSuffix(FieldLinkPhoto, v))
}

// LinkPhotoIsNil applies the IsNil predicate on the "link_photo" field.
func LinkPhotoIsNil() predicate.Payment {
	return predicate.Payment(sql.FieldIsNull(FieldLinkPhoto))
}

// LinkPhotoNotNil applies the NotNil predicate on the "link_photo" field.
func LinkPhotoNotNil() predicate.Payment {
	return predicate.Payment(sql.FieldNotNull(FieldLinkPhoto))
}

// LinkPhotoEqualFold applies the EqualFold predicate on the "link_photo" field.
func LinkPhotoEqualFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEqualFold(FieldLinkPhoto, v))
}

// LinkPhotoContainsFold applies the ContainsFold predicate on the "link_photo" field.
func LinkPhotoContainsFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContainsFold(FieldLinkPhoto, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldCreatedAt, v))
}

// ConfirmedAtEQ applies the EQ predicate on the "confirmed_at" field.
func ConfirmedAtEQ(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldConfirmedAt, v))
}

// ConfirmedAtNEQ applies the NEQ predicate on the "confirmed_at" field.
func ConfirmedAtNEQ(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldConfirmedAt, v))
}

// ConfirmedAtIn applies the In predicate on the "confirmed_at" field.
func ConfirmedAtIn(vs ...time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldConfirmedAt, vs...))
}

// ConfirmedAtNotIn applies the NotIn predicate on the "confirmed_at" field.
func ConfirmedAtNotIn(vs ...time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldConfirmedAt, vs...))
}

// ConfirmedAtGT applies the GT predicate on the "confirmed_at" field.
func ConfirmedAtGT(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldConfirmedAt, v))
}

// ConfirmedAtGTE applies the GTE predicate on the "confirmed_at" field.
func ConfirmedAtGTE(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldConfirmedAt, v))
}

// ConfirmedAtLT applies the LT predicate on the "confirmed_at" field.
func ConfirmedAtLT(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldConfirmedAt, v))
}

// ConfirmedAtLTE applies the LTE predicate on the "confirmed_at" field.
func ConfirmedAtLTE(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldConfirmedAt, v))
}

// ConfirmedAtIsNil applies the IsNil predicate on the "confirmed_at" field.
func ConfirmedAtIsNil() predicate.Payment {
	return predicate.Payment(sql.FieldIsNull(FieldConfirmedAt))
}

// ConfirmedAtNotNil applies the NotNil predicate on the "confirmed_at" field.
func ConfirmedAtNotNil() predicate.Payment {
	return predicate.Payment(sql.FieldNotNull(FieldConfirmedAt))
}

// IsConfirmedEQ applies the EQ predicate on the "is_confirmed" field.
func IsConfirmedEQ(v bool) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldIsConfirmed, v))
}

// IsConfirmedNEQ applies the NEQ predicate on the "is_confirmed" field.
func IsConfirmedNEQ(v bool) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldIsConfirmed, v))
}

// HasAbonement applies the HasEdge predicate on the "abonement" edge.
func HasAbonement() predicate.Payment {
	return predicate.Payment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AbonementTable, AbonementColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAbonementWith applies the HasEdge predicate on the "abonement" edge with a given conditions (other predicates).
func HasAbonementWith(preds ...predicate.Abonement) predicate.Payment {
	return predicate.Payment(func(s *sql.Selector) {
		step := newAbonementStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Payment) predicate.Payment {
	return predicate.Payment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Payment) predicate.Payment {
	return predicate.Payment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Payment) predicate.Payment {
	return predicate.Payment(sql.NotPredicates(p))
}
