// Code generated by ent, DO NOT EDIT.

package payment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the payment type in the database.
	Label = "payment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldLinkPhoto holds the string denoting the link_photo field in the database.
	FieldLinkPhoto = "link_photo"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldConfirmedAt holds the string denoting the confirmed_at field in the database.
	FieldConfirmedAt = "confirmed_at"
	// FieldIsConfirmed holds the string denoting the is_confirmed field in the database.
	FieldIsConfirmed = "is_confirmed"
	// EdgeAbonement holds the string denoting the abonement edge name in mutations.
	EdgeAbonement = "abonement"
	// Table holds the table name of the payment in the database.
	Table = "payments"
	// AbonementTable is the table that holds the abonement relation/edge.
	AbonementTable = "payments"
	// AbonementInverseTable is the table name for the Abonement entity.
	// It exists in this package in order to avoid circular dependency with the "abonement" package.
	AbonementInverseTable = "abonements"
	// AbonementColumn is the table column denoting the abonement relation/edge.
	AbonementColumn = "payment_abonement"
)

// Columns holds all SQL columns for payment fields.
var Columns = []string{
	FieldID,
	FieldAmount,
	FieldLinkPhoto,
	FieldCreatedAt,
	FieldConfirmedAt,
	FieldIsConfirmed,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "payments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"payment_abonement",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultIsConfirmed holds the default value on creation for the "is_confirmed" field.
	DefaultIsConfirmed bool
)

// OrderOption defines the ordering options for the Payment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByLinkPhoto orders the results by the link_photo field.
func ByLinkPhoto(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLinkPhoto, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByConfirmedAt orders the results by the confirmed_at field.
func ByConfirmedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfirmedAt, opts...).ToFunc()
}

// ByIsConfirmed orders the results by the is_confirmed field.
func ByIsConfirmed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsConfirmed, opts...).ToFunc()
}

// ByAbonementField orders the results by abonement field.
func ByAbonementField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAbonementStep(), sql.OrderByField(field, opts...))
	}
}
func newAbonementStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AbonementInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AbonementTable, AbonementColumn),
	)
}
