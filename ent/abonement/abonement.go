// Code generated by ent, DO NOT EDIT.

package abonement

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the abonement type in the database.
	Label = "abonement"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldDurationMonths holds the string denoting the duration_months field in the database.
	FieldDurationMonths = "duration_months"
	// FieldExpirationDate holds the string denoting the expiration_date field in the database.
	FieldExpirationDate = "expiration_date"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPaidUntil holds the string denoting the paid_until field in the database.
	FieldPaidUntil = "paid_until"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldIsPaid holds the string denoting the is_paid field in the database.
	FieldIsPaid = "is_paid"
	// EdgePayments holds the string denoting the payments edge name in mutations.
	EdgePayments = "payments"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeCoach holds the string denoting the coach edge name in mutations.
	EdgeCoach = "coach"
	// EdgeGym holds the string denoting the gym edge name in mutations.
	EdgeGym = "gym"
	// EdgeType holds the string denoting the type edge name in mutations.
	EdgeType = "type"
	// Table holds the table name of the abonement in the database.
	Table = "abonements"
	// PaymentsTable is the table that holds the payments relation/edge.
	PaymentsTable = "payments"
	// PaymentsInverseTable is the table name for the Payment entity.
	// It exists in this package in order to avoid circular dependency with the "payment" package.
	PaymentsInverseTable = "payments"
	// PaymentsColumn is the table column denoting the payments relation/edge.
	PaymentsColumn = "payment_abonement"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "abonements"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_abonements"
	// CoachTable is the table that holds the coach relation/edge.
	CoachTable = "abonements"
	// CoachInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CoachInverseTable = "users"
	// CoachColumn is the table column denoting the coach relation/edge.
	CoachColumn = "abonement_coach"
	// GymTable is the table that holds the gym relation/edge.
	GymTable = "abonements"
	// GymInverseTable is the table name for the Gym entity.
	// It exists in this package in order to avoid circular dependency with the "gym" package.
	GymInverseTable = "gyms"
	// GymColumn is the table column denoting the gym relation/edge.
	GymColumn = "abonement_gym"
	// TypeTable is the table that holds the type relation/edge.
	TypeTable = "abonements"
	// TypeInverseTable is the table name for the AbonementType entity.
	// It exists in this package in order to avoid circular dependency with the "abonementtype" package.
	TypeInverseTable = "abonement_types"
	// TypeColumn is the table column denoting the type relation/edge.
	TypeColumn = "abonement_type_abonement"
)

// Columns holds all SQL columns for abonement fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPrice,
	FieldDurationMonths,
	FieldExpirationDate,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPaidUntil,
	FieldIsActive,
	FieldIsPaid,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "abonements"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"abonement_coach",
	"abonement_gym",
	"abonement_type_abonement",
	"user_abonements",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// PriceValidator is a validator for the "price" field. It is called by the builders before save.
	PriceValidator func(float64) error
	// DefaultDurationMonths holds the default value on creation for the "duration_months" field.
	DefaultDurationMonths int
	// DurationMonthsValidator is a validator for the "duration_months" field. It is called by the builders before save.
	DurationMonthsValidator func(int) error
	// DefaultExpirationDate holds the default value on creation for the "expiration_date" field.
	DefaultExpirationDate func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultIsPaid holds the default value on creation for the "is_paid" field.
	DefaultIsPaid bool
)

// OrderOption defines the ordering options for the Abonement queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByDurationMonths orders the results by the duration_months field.
func ByDurationMonths(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationMonths, opts...).ToFunc()
}

// ByExpirationDate orders the results by the expiration_date field.
func ByExpirationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpirationDate, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPaidUntil orders the results by the paid_until field.
func ByPaidUntil(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaidUntil, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByIsPaid orders the results by the is_paid field.
func ByIsPaid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPaid, opts...).ToFunc()
}

// ByPaymentsCount orders the results by payments count.
func ByPaymentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPaymentsStep(), opts...)
	}
}

// ByPayments orders the results by payments terms.
func ByPayments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaymentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByCoachField orders the results by coach field.
func ByCoachField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCoachStep(), sql.OrderByField(field, opts...))
	}
}

// ByGymField orders the results by gym field.
func ByGymField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGymStep(), sql.OrderByField(field, opts...))
	}
}

// ByTypeField orders the results by type field.
func ByTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTypeStep(), sql.OrderByField(field, opts...))
	}
}
func newPaymentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaymentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PaymentsTable, PaymentsColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newCoachStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CoachInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CoachTable, CoachColumn),
	)
}
func newGymStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GymInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, GymTable, GymColumn),
	)
}
func newTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TypeTable, TypeColumn),
	)
}
