// Code generated by ent, DO NOT EDIT.

package abonement

import (
	"gym-api/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Abonement {
	return predicate.Abonement(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Abonement {
	return predicate.Abonement(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Abonement {
	return predicate.Abonement(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Abonement {
	return predicate.Abonement(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Abonement {
	return predicate.Abonement(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Abonement {
	return predicate.Abonement(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Abonement {
	return predicate.Abonement(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Abonement {
	return predicate.Abonement(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Abonement {
	return predicate.Abonement(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Abonement {
	return predicate.Abonement(sql.FieldEQ(FieldName, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.Abonement {
	return predicate.Abonement(sql.FieldEQ(FieldPrice, v))
}

// DurationMonths applies equality check predicate on the "duration_months" field. It's identical to DurationMonthsEQ.
func DurationMonths(v int) predicate.Abonement {
	return predicate.Abonement(sql.FieldEQ(FieldDurationMonths, v))
}

// ExpirationDate applies equality check predicate on the "expiration_date" field. It's identical to ExpirationDateEQ.
func ExpirationDate(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldEQ(FieldExpirationDate, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldEQ(FieldUpdatedAt, v))
}

// PaidUntil applies equality check predicate on the "paid_until" field. It's identical to PaidUntilEQ.
func PaidUntil(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldEQ(FieldPaidUntil, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Abonement {
	return predicate.Abonement(sql.FieldEQ(FieldIsActive, v))
}

// IsPaid applies equality check predicate on the "is_paid" field. It's identical to IsPaidEQ.
func IsPaid(v bool) predicate.Abonement {
	return predicate.Abonement(sql.FieldEQ(FieldIsPaid, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Abonement {
	return predicate.Abonement(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Abonement {
	return predicate.Abonement(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Abonement {
	return predicate.Abonement(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Abonement {
	return predicate.Abonement(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Abonement {
	return predicate.Abonement(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Abonement {
	return predicate.Abonement(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Abonement {
	return predicate.Abonement(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Abonement {
	return predicate.Abonement(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Abonement {
	return predicate.Abonement(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Abonement {
	return predicate.Abonement(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Abonement {
	return predicate.Abonement(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Abonement {
	return predicate.Abonement(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Abonement {
	return predicate.Abonement(sql.FieldContainsFold(FieldName, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.Abonement {
	return predicate.Abonement(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.Abonement {
	return predicate.Abonement(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.Abonement {
	return predicate.Abonement(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.Abonement {
	return predicate.Abonement(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.Abonement {
	return predicate.Abonement(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.Abonement {
	return predicate.Abonement(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.Abonement {
	return predicate.Abonement(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.Abonement {
	return predicate.Abonement(sql.FieldLTE(FieldPrice, v))
}

// DurationMonthsEQ applies the EQ predicate on the "duration_months" field.
func DurationMonthsEQ(v int) predicate.Abonement {
	return predicate.Abonement(sql.FieldEQ(FieldDurationMonths, v))
}

// DurationMonthsNEQ applies the NEQ predicate on the "duration_months" field.
func DurationMonthsNEQ(v int) predicate.Abonement {
	return predicate.Abonement(sql.FieldNEQ(FieldDurationMonths, v))
}

// DurationMonthsIn applies the In predicate on the "duration_months" field.
func DurationMonthsIn(vs ...int) predicate.Abonement {
	return predicate.Abonement(sql.FieldIn(FieldDurationMonths, vs...))
}

// DurationMonthsNotIn applies the NotIn predicate on the "duration_months" field.
func DurationMonthsNotIn(vs ...int) predicate.Abonement {
	return predicate.Abonement(sql.FieldNotIn(FieldDurationMonths, vs...))
}

// DurationMonthsGT applies the GT predicate on the "duration_months" field.
func DurationMonthsGT(v int) predicate.Abonement {
	return predicate.Abonement(sql.FieldGT(FieldDurationMonths, v))
}

// DurationMonthsGTE applies the GTE predicate on the "duration_months" field.
func DurationMonthsGTE(v int) predicate.Abonement {
	return predicate.Abonement(sql.FieldGTE(FieldDurationMonths, v))
}

// DurationMonthsLT applies the LT predicate on the "duration_months" field.
func DurationMonthsLT(v int) predicate.Abonement {
	return predicate.Abonement(sql.FieldLT(FieldDurationMonths, v))
}

// DurationMonthsLTE applies the LTE predicate on the "duration_months" field.
func DurationMonthsLTE(v int) predicate.Abonement {
	return predicate.Abonement(sql.FieldLTE(FieldDurationMonths, v))
}

// ExpirationDateEQ applies the EQ predicate on the "expiration_date" field.
func ExpirationDateEQ(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldEQ(FieldExpirationDate, v))
}

// ExpirationDateNEQ applies the NEQ predicate on the "expiration_date" field.
func ExpirationDateNEQ(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldNEQ(FieldExpirationDate, v))
}

// ExpirationDateIn applies the In predicate on the "expiration_date" field.
func ExpirationDateIn(vs ...time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldIn(FieldExpirationDate, vs...))
}

// ExpirationDateNotIn applies the NotIn predicate on the "expiration_date" field.
func ExpirationDateNotIn(vs ...time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldNotIn(FieldExpirationDate, vs...))
}

// ExpirationDateGT applies the GT predicate on the "expiration_date" field.
func ExpirationDateGT(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldGT(FieldExpirationDate, v))
}

// ExpirationDateGTE applies the GTE predicate on the "expiration_date" field.
func ExpirationDateGTE(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldGTE(FieldExpirationDate, v))
}

// ExpirationDateLT applies the LT predicate on the "expiration_date" field.
func ExpirationDateLT(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldLT(FieldExpirationDate, v))
}

// ExpirationDateLTE applies the LTE predicate on the "expiration_date" field.
func ExpirationDateLTE(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldLTE(FieldExpirationDate, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Abonement {
	return predicate.Abonement(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Abonement {
	return predicate.Abonement(sql.FieldNotNull(FieldUpdatedAt))
}

// PaidUntilEQ applies the EQ predicate on the "paid_until" field.
func PaidUntilEQ(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldEQ(FieldPaidUntil, v))
}

// PaidUntilNEQ applies the NEQ predicate on the "paid_until" field.
func PaidUntilNEQ(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldNEQ(FieldPaidUntil, v))
}

// PaidUntilIn applies the In predicate on the "paid_until" field.
func PaidUntilIn(vs ...time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldIn(FieldPaidUntil, vs...))
}

// PaidUntilNotIn applies the NotIn predicate on the "paid_until" field.
func PaidUntilNotIn(vs ...time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldNotIn(FieldPaidUntil, vs...))
}

// PaidUntilGT applies the GT predicate on the "paid_until" field.
func PaidUntilGT(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldGT(FieldPaidUntil, v))
}

// PaidUntilGTE applies the GTE predicate on the "paid_until" field.
func PaidUntilGTE(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldGTE(FieldPaidUntil, v))
}

// PaidUntilLT applies the LT predicate on the "paid_until" field.
func PaidUntilLT(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldLT(FieldPaidUntil, v))
}

// PaidUntilLTE applies the LTE predicate on the "paid_until" field.
func PaidUntilLTE(v time.Time) predicate.Abonement {
	return predicate.Abonement(sql.FieldLTE(FieldPaidUntil, v))
}

// PaidUntilIsNil applies the IsNil predicate on the "paid_until" field.
func PaidUntilIsNil() predicate.Abonement {
	return predicate.Abonement(sql.FieldIsNull(FieldPaidUntil))
}

// PaidUntilNotNil applies the NotNil predicate on the "paid_until" field.
func PaidUntilNotNil() predicate.Abonement {
	return predicate.Abonement(sql.FieldNotNull(FieldPaidUntil))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Abonement {
	return predicate.Abonement(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Abonement {
	return predicate.Abonement(sql.FieldNEQ(FieldIsActive, v))
}

// IsPaidEQ applies the EQ predicate on the "is_paid" field.
func IsPaidEQ(v bool) predicate.Abonement {
	return predicate.Abonement(sql.FieldEQ(FieldIsPaid, v))
}

// IsPaidNEQ applies the NEQ predicate on the "is_paid" field.
func IsPaidNEQ(v bool) predicate.Abonement {
	return predicate.Abonement(sql.FieldNEQ(FieldIsPaid, v))
}

// HasPayments applies the HasEdge predicate on the "payments" edge.
func HasPayments() predicate.Abonement {
	return predicate.Abonement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PaymentsTable, PaymentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentsWith applies the HasEdge predicate on the "payments" edge with a given conditions (other predicates).
func HasPaymentsWith(preds ...predicate.Payment) predicate.Abonement {
	return predicate.Abonement(func(s *sql.Selector) {
		step := newPaymentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Abonement {
	return predicate.Abonement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Abonement {
	return predicate.Abonement(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCoach applies the HasEdge predicate on the "coach" edge.
func HasCoach() predicate.Abonement {
	return predicate.Abonement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CoachTable, CoachColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCoachWith applies the HasEdge predicate on the "coach" edge with a given conditions (other predicates).
func HasCoachWith(preds ...predicate.User) predicate.Abonement {
	return predicate.Abonement(func(s *sql.Selector) {
		step := newCoachStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGym applies the HasEdge predicate on the "gym" edge.
func HasGym() predicate.Abonement {
	return predicate.Abonement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, GymTable, GymColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGymWith applies the HasEdge predicate on the "gym" edge with a given conditions (other predicates).
func HasGymWith(preds ...predicate.Gym) predicate.Abonement {
	return predicate.Abonement(func(s *sql.Selector) {
		step := newGymStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasType applies the HasEdge predicate on the "type" edge.
func HasType() predicate.Abonement {
	return predicate.Abonement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TypeTable, TypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTypeWith applies the HasEdge predicate on the "type" edge with a given conditions (other predicates).
func HasTypeWith(preds ...predicate.AbonementType) predicate.Abonement {
	return predicate.Abonement(func(s *sql.Selector) {
		step := newTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Abonement) predicate.Abonement {
	return predicate.Abonement(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Abonement) predicate.Abonement {
	return predicate.Abonement(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Abonement) predicate.Abonement {
	return predicate.Abonement(sql.NotPredicates(p))
}
